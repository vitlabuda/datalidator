#!/bin/false

# Copyright (c) 2022 V√≠t Labuda. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
# following conditions are met:
#  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
#     disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
#     following disclaimer in the documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
#     products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


import os.path
import sys
__TESTS_DIR = os.path.dirname(os.path.realpath(__file__))  
__MODULE_DIR = os.path.realpath(os.path.join(__TESTS_DIR, "../.."))  
if __TESTS_DIR not in sys.path:  
    sys.path.insert(0, __TESTS_DIR)  
if __MODULE_DIR not in sys.path:  
    sys.path.insert(0, __MODULE_DIR)  

import theoretical_testutils
import pytest
import re
import datetime
import zoneinfo
import ipaddress
import urllib.parse
import uuid
from test_008_integer_blueprint import IntableObject, ExceptionRaisingIntableObject
from test_011_list_blueprint import IterableObject, ExceptionRaisingIterableObject
from datalidator.blueprints.ParsingMode import ParsingMode
from datalidator.blueprints.impl.StringBlueprint import StringBlueprint
from datalidator.blueprints.exc.InputDataNotConvertibleExc import InputDataNotConvertibleExc
from datalidator.blueprints.exc.InputDataTypeNotInAllowlistExc import InputDataTypeNotInAllowlistExc
from datalidator.filters.impl.StringAlwaysEmptyFilter import StringAlwaysEmptyFilter
from datalidator.filters.impl.StringCapitalizeFilter import StringCapitalizeFilter
from datalidator.filters.impl.StringControlAndSeparatorCharacterFilter import StringControlAndSeparatorCharacterFilter
from datalidator.filters.impl.StringDeduplicateWhitespaceFilter import StringDeduplicateWhitespaceFilter
from datalidator.filters.impl.StringLowercaseFilter import StringLowercaseFilter
from datalidator.filters.impl.StringRegexReplaceFilter import StringRegexReplaceFilter
from datalidator.filters.impl.StringReplaceFilter import StringReplaceFilter
from datalidator.filters.impl.StringStripFilter import StringStripFilter
from datalidator.filters.impl.StringUnicodeNormalizeFilter import StringUnicodeNormalizeFilter
from datalidator.filters.impl.StringUnifyNewlinesFilter import StringUnifyNewlinesFilter
from datalidator.filters.impl.StringUnifyWhitespaceFilter import StringUnifyWhitespaceFilter
from datalidator.filters.impl.StringUppercaseFilter import StringUppercaseFilter
from datalidator.filters.impl.UnixFilesystemPathAddTrailingSlashFilter import UnixFilesystemPathAddTrailingSlashFilter
from datalidator.filters.impl.UnixFilesystemPathStripTrailingSlashesFilter import UnixFilesystemPathStripTrailingSlashesFilter
from datalidator.filters.exc.RegexFailedInFilterExc import RegexFailedInFilterExc
from datalidator.filters.exc.err.InvalidFilterConfigError import InvalidFilterConfigError
from datalidator.filters.exc.err.RegexCompilationFailedInFilterError import RegexCompilationFailedInFilterError
from datalidator.validators.impl.SequenceIsNotEmptyValidator import SequenceIsNotEmptyValidator
from datalidator.validators.impl.SequenceMaximumLengthValidator import SequenceMaximumLengthValidator
from datalidator.validators.impl.SequenceMinimumLengthValidator import SequenceMinimumLengthValidator
from datalidator.validators.impl.StringContainsNoControlOrSeparatorCharactersValidator import StringContainsNoControlOrSeparatorCharactersValidator
from datalidator.validators.impl.StringContainsSubstringValidator import StringContainsSubstringValidator
from datalidator.validators.impl.StringIsOnlySingleCharacterValidator import StringIsOnlySingleCharacterValidator
from datalidator.validators.impl.StringIsOnlySingleLineValidator import StringIsOnlySingleLineValidator
from datalidator.validators.impl.StringIsOnlySingleWordValidator import StringIsOnlySingleWordValidator
from datalidator.validators.impl.StringMatchesRegexValidator import StringMatchesRegexValidator
from datalidator.validators.impl.UnixFilesystemPathContainsOnlyFilenameValidator import UnixFilesystemPathContainsOnlyFilenameValidator
from datalidator.validators.impl.UnixFilesystemPathIsAbsoluteValidator import UnixFilesystemPathIsAbsoluteValidator
from datalidator.validators.impl.UnixFilesystemPathIsRelativeValidator import UnixFilesystemPathIsRelativeValidator
from datalidator.validators.exc.DataValidationFailedExc import DataValidationFailedExc
from datalidator.validators.exc.err.InvalidValidatorConfigError import InvalidValidatorConfigError
from datalidator.validators.exc.err.RegexCompilationFailedInValidatorError import RegexCompilationFailedInValidatorError


def expected_output_generic_representation(class_name: str):
    return lambda output: bool(re.match(r'^<{} object at 0x[0-9a-f]+>\Z'.format(class_name), output))


def exception_raising_regex_replacement_function(m: re.Match):  # noqa
    raise theoretical_testutils.TestException()


class StringableObject:
    def __init__(self, returned_value):
        self.__returned_value = returned_value

    def __str__(self):
        return self.__returned_value


class ExceptionRaisingStringableObject:
    def __str__(self):
        raise theoretical_testutils.TestException()


current_datetime_naive = datetime.datetime.now()
current_datetime_aware = datetime.datetime.now(tz=datetime.timezone.utc).astimezone()


__STRING_BLUEPRINT_TEST_SUITE = (
    (StringBlueprint(parsing_mode=ParsingMode.MODE_LOOSE), (
        ("", ""),
        ("teststring", "teststring"),
        ("\t\f\v   hel  lo\two rld  \r\n", "\t\f\v   hel  lo\two rld  \r\n"),
        ("‚ù§Ô∏èüß°üíõüíöüíôüíúüñ§ü§çü§éüíî‚ù£üíïüíûüíìüíó", "‚ù§Ô∏èüß°üíõüíöüíôüíúüñ§ü§çü§éüíî‚ù£üíïüíûüíìüíó"),
        ("\x00", "\x00"),
        ("\x00teststring", "\x00teststring"),
        ("test\x00string", "test\x00string"),
        ("teststring\x00", "teststring\x00"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (-100_000_000_000_000, "-100000000000000"),
        (-123, "-123"),
        (0, "0"),
        (123, "123"),
        (100_000_000_000_000, "100000000000000"),
        (-10e100, "-1e+101"),
        (-10e9, "-10000000000.0"),
        (-123.456, "-123.456"),
        (-1/3, "-0.3333333333333333"),
        (-0.1, "-0.1"),
        (-0.0, "-0.0"),
        (0.0, "0.0"),
        (0.1, "0.1"),
        (1/3, "0.3333333333333333"),
        (123.456, "123.456"),
        (10e9, "10000000000.0"),
        (10e100, "1e+101"),
        (float("inf"), "inf"),
        (float("-inf"), "-inf"),
        (float("nan"), "nan"),
        (-10e15-10e15j, "(-1e+16-1e+16j)"),
        (-10e6-10e6j, "(-10000000-10000000j)"),
        (-123.456-123.456j, "(-123.456-123.456j)"),
        (-123+123j, "(-123+123j)"),
        (-0.1+0.1j, "(-0.1+0.1j)"),
        (complex(float("-0.0"), float("0.0")), "(-0+0j)"),
        (complex(float("0.0"), float("-0.0")), "-0j"),
        (+0.1-0.1j, "(0.1-0.1j)"),
        (+123-123j, "(123-123j)"),
        (123.456+123.456j, "(123.456+123.456j)"),
        (10e6+10e6j, "(10000000+10000000j)"),
        (10e15+10e15j, "(1e+16+1e+16j)"),
        (complex(float("nan"), float("nan")), "(nan+nanj)"),
        (complex(float("inf"), float("-inf")), "(inf-infj)"),
        (complex(float("-inf"), float("inf")), "(-inf+infj)"),
        (ipaddress.ip_address("0.0.0.0"), "0.0.0.0"),
        (ipaddress.ip_address("127.0.0.1"), "127.0.0.1"),
        (ipaddress.ip_address("255.255.255.255"), "255.255.255.255"),
        (ipaddress.ip_address("0::0000"), "::"),
        (ipaddress.ip_address("::1"), "::1"),
        (ipaddress.ip_address("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"), "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"),
        (ipaddress.ip_address("::ffff:127.0.0.1"), "::ffff:7f00:1"),
        (ipaddress.ip_network("0.0.0.0/0"), "0.0.0.0/0"),
        (ipaddress.ip_network("127.0.0.0/8"), "127.0.0.0/8"),
        (ipaddress.ip_network("255.255.255.255"), "255.255.255.255/32"),
        (ipaddress.ip_network("0::0000/0"), "::/0"),
        (ipaddress.ip_network("2001:db8::/32"), "2001:db8::/32"),
        (ipaddress.ip_network("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"), "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/128"),
        (ipaddress.ip_network("::ffff:127.0.0.0/104"), "::ffff:7f00:0/104"),
        (uuid.UUID('{12345678-1234-5678-1234-567812345678}'), "12345678-1234-5678-1234-567812345678"),
        (uuid.UUID('urn:uuid:12345678-1234-5678-1234-567812345678'), "12345678-1234-5678-1234-567812345678"),
        (uuid.UUID(bytes=b'\x12\x34\x56\x78' * 4), "12345678-1234-5678-1234-567812345678"),
        (uuid.UUID(int=0x12345678123456781234567812345678), "12345678-1234-5678-1234-567812345678"),
        (b'', "b''"),
        (b'foobar', "b'foobar'"),
        (b'\r\r\n\r  hello world  \t\f\v', "b'\\r\\r\\n\\r  hello world  \\t\\x0c\\x0b'"),
        (b'\x00' * 4, "b'\\x00\\x00\\x00\\x00'"),
        (b'P\xc5\x99\xc3\xadli\xc5\xa1\x0d \xc5\xbelu\xc5\xa5ou\xc4\x8dk\xc3\xbd\x0a k\xc5\xaf\xc5\x88', "b'P\\xc5\\x99\\xc3\\xadli\\xc5\\xa1\\r \\xc5\\xbelu\\xc5\\xa5ou\\xc4\\x8dk\\xc3\\xbd\\n k\\xc5\\xaf\\xc5\\x88'"),
        (b'aaa\xffaaa', "b'aaa\\xffaaa'"),
        (b'aaa\xc5aaa', "b'aaa\\xc5aaa'"),
        (b'aaa\xc5', "b'aaa\\xc5'"),
        (bytearray(b''), "bytearray(b'')"),
        (bytearray(b'foobar'), "bytearray(b'foobar')"),
        (bytearray(b'\r\r\n\r  hello world  \t\f\v'), "bytearray(b'\\r\\r\\n\\r  hello world  \\t\\x0c\\x0b')"),
        (bytearray(b'\x00' * 4), "bytearray(b'\\x00\\x00\\x00\\x00')"),
        (bytearray(b'P\xc5\x99\xc3\xadli\xc5\xa1\x0d \xc5\xbelu\xc5\xa5ou\xc4\x8dk\xc3\xbd\x0a k\xc5\xaf\xc5\x88'), "bytearray(b'P\\xc5\\x99\\xc3\\xadli\\xc5\\xa1\\r \\xc5\\xbelu\\xc5\\xa5ou\\xc4\\x8dk\\xc3\\xbd\\n k\\xc5\\xaf\\xc5\\x88')"),
        (bytearray(b'aaa\xffaaa'), "bytearray(b'aaa\\xffaaa')"),
        (bytearray(b'aaa\xc5aaa'), "bytearray(b'aaa\\xc5aaa')"),
        (bytearray(b'aaa\xc5'), "bytearray(b'aaa\\xc5')"),
        (current_datetime_naive, str(current_datetime_naive)),
        (current_datetime_aware, str(current_datetime_aware)),
        (datetime.datetime(10, 1, 1, 15, 40, 5), "0010-01-01 15:40:05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5), "2020-01-20 15:40:05"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5), "2020-08-20 15:40:05"),
        (datetime.datetime(9990, 1, 1, 15, 40, 5), "9990-01-01 15:40:05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=datetime.timezone.utc), "2020-01-20 15:40:05+00:00"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=datetime.timezone.utc), "2020-08-20 15:40:05+00:00"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), "2020-01-20 15:40:05+01:00"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), "2020-08-20 15:40:05+02:00"),  # DST active
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")), "2020-01-20 15:40:05-05:00"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")), "2020-08-20 15:40:05-04:00"),  # DST active
        (current_datetime_naive.date(), current_datetime_naive.date().isoformat()),
        (current_datetime_aware.date(), current_datetime_aware.date().isoformat()),
        (datetime.datetime(10, 1, 1, 15, 40, 5).date(), "0010-01-01"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5).date(), "2020-01-20"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5).date(), "2020-08-20"),
        (datetime.datetime(9990, 1, 1, 15, 40, 5).date(), "9990-01-01"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=datetime.timezone.utc).date(), "2020-01-20"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=datetime.timezone.utc).date(), "2020-08-20"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")).date(), "2020-01-20"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")).date(), "2020-08-20"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")).date(), "2020-01-20"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")).date(), "2020-08-20"),
        (current_datetime_naive.time(), current_datetime_naive.time().isoformat()),
        (current_datetime_aware.time(), current_datetime_aware.time().isoformat()),
        (datetime.datetime(10, 1, 1, 15, 40, 5).time(), "15:40:05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5).time(), "15:40:05"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5).time(), "15:40:05"),
        (datetime.datetime(9990, 1, 1, 15, 40, 5).time(), "15:40:05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=datetime.timezone.utc).time(), "15:40:05"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=datetime.timezone.utc).time(), "15:40:05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")).time(), "15:40:05"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")).time(), "15:40:05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")).time(), "15:40:05"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")).time(), "15:40:05"),
        (urllib.parse.urlparse("https://www.google.com/test?abc=def#anchor"), "ParseResult(scheme='https', netloc='www.google.com', path='/test', params='', query='abc=def', fragment='anchor')"),
        (urllib.parse.urlparse("HTTPS://user@pass:www.google.com:443/test?abc=def#anchor"), "ParseResult(scheme='https', netloc='user@pass:www.google.com:443', path='/test', params='', query='abc=def', fragment='anchor')"),
        (urllib.parse.urlparse("http://[::1]/testpath?123#456"), "ParseResult(scheme='http', netloc='[::1]', path='/testpath', params='', query='123', fragment='456')"),
        (urllib.parse.urlparse("CUSTOMPROTO://a@b:[::1]:80/testpath?123#456"), "ParseResult(scheme='customproto', netloc='a@b:[::1]:80', path='/testpath', params='', query='123', fragment='456')"),
        (urllib.parse.urlparse(b"https://www.google.com/test?abc=def#anchor"), "ParseResultBytes(scheme=b'https', netloc=b'www.google.com', path=b'/test', params=b'', query=b'abc=def', fragment=b'anchor')"),
        (urllib.parse.urlparse(b"HTTPS://user@pass:www.google.com:443/test?abc=def#anchor"), "ParseResultBytes(scheme=b'https', netloc=b'user@pass:www.google.com:443', path=b'/test', params=b'', query=b'abc=def', fragment=b'anchor')"),
        (urllib.parse.urlparse(b"http://[::1]/testpath?123#456"), "ParseResultBytes(scheme=b'http', netloc=b'[::1]', path=b'/testpath', params=b'', query=b'123', fragment=b'456')"),
        (urllib.parse.urlparse(b"CUSTOMPROTO://a@b:[::1]:80/testpath?123#456"), "ParseResultBytes(scheme=b'customproto', netloc=b'a@b:[::1]:80', path=b'/testpath', params=b'', query=b'123', fragment=b'456')"),
        (list(), "[]"),
        (tuple(), "()"),
        (dict(), "{}"),
        (set(), "set()"),
        (frozenset(), "frozenset()"),
        (["hello", 123.456, True], "['hello', 123.456, True]"),
        (("hello", 123.456, True), "('hello', 123.456, True)"),
        ({"hello": "world", 123.456: 789, True: None}, lambda o: o.startswith("{") and o.endswith("}") and ("'hello': 'world'" in o) and ("123.456: 789" in o) and ("True: None" in o)),  # The order is undefined!
        ({"hello", 123.456, True}, lambda o: o.startswith("{") and o.endswith("}") and ("'hello'" in o) and ("123.456" in o) and ("True" in o)),  # The order is undefined
        (frozenset(("hello", 123.456, True)), lambda o: o.startswith("frozenset({") and o.endswith("})") and ("'hello'" in o) and ("123.456" in o) and ("True" in o)),
        (str, "<class 'str'>"),
        (int, "<class 'int'>"),
        (object, "<class 'object'>"),
        (theoretical_testutils.EmptyObject, "<class 'theoretical_testutils.EmptyObject'>"),
        (theoretical_testutils.TestException, "<class 'theoretical_testutils.TestException'>"),
        (object(), expected_output_generic_representation("object")),
        (theoretical_testutils.EmptyObject(), expected_output_generic_representation("theoretical_testutils.EmptyObject")),
        (theoretical_testutils.TestException("exception string"), "exception string"),
        (StringableObject("hello world"), "hello world"),
        (StringableObject(123), InputDataNotConvertibleExc),
        (StringableObject(None), InputDataNotConvertibleExc),
        (StringableObject(theoretical_testutils.EmptyObject()), InputDataNotConvertibleExc),
        (ExceptionRaisingStringableObject(), InputDataNotConvertibleExc),
        (IntableObject("hello world"), expected_output_generic_representation("test_008_integer_blueprint.IntableObject")),
        (IntableObject(123), expected_output_generic_representation("test_008_integer_blueprint.IntableObject")),
        (IntableObject(None), expected_output_generic_representation("test_008_integer_blueprint.IntableObject")),
        (IntableObject(theoretical_testutils.EmptyObject()), expected_output_generic_representation("test_008_integer_blueprint.IntableObject")),
        (ExceptionRaisingIntableObject(), expected_output_generic_representation("test_008_integer_blueprint.ExceptionRaisingIntableObject")),
        (IterableObject("a string"), expected_output_generic_representation("test_011_list_blueprint.IterableObject")),
        (IterableObject([]), expected_output_generic_representation("test_011_list_blueprint.IterableObject")),
        (IterableObject(["hello", 123.456, True]), expected_output_generic_representation("test_011_list_blueprint.IterableObject")),
        (ExceptionRaisingIterableObject(raise_=False), expected_output_generic_representation("test_011_list_blueprint.ExceptionRaisingIterableObject")),
        (ExceptionRaisingIterableObject(raise_=True), expected_output_generic_representation("test_011_list_blueprint.ExceptionRaisingIterableObject")),
    )),
    (StringBlueprint(parsing_mode=ParsingMode.MODE_RATIONAL), (
        ("", ""),
        ("teststring", "teststring"),
        ("\t\f\v   hel  lo\two rld  \r\n", "\t\f\v   hel  lo\two rld  \r\n"),
        ("‚ù§Ô∏èüß°üíõüíöüíôüíúüñ§ü§çü§éüíî‚ù£üíïüíûüíìüíó", "‚ù§Ô∏èüß°üíõüíöüíôüíúüñ§ü§çü§éüíî‚ù£üíïüíûüíìüíó"),
        ("\x00", "\x00"),
        ("\x00teststring", "\x00teststring"),
        ("test\x00string", "test\x00string"),
        ("teststring\x00", "teststring\x00"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (-100_000_000_000_000, "-100000000000000"),
        (-123, "-123"),
        (0, "0"),
        (123, "123"),
        (100_000_000_000_000, "100000000000000"),
        (-10e100, "-1e+101"),
        (-10e9, "-10000000000.0"),
        (-123.456, "-123.456"),
        (-1/3, "-0.3333333333333333"),
        (-0.1, "-0.1"),
        (-0.0, "-0.0"),
        (0.0, "0.0"),
        (0.1, "0.1"),
        (1/3, "0.3333333333333333"),
        (123.456, "123.456"),
        (10e9, "10000000000.0"),
        (10e100, "1e+101"),
        (float("inf"), "inf"),
        (float("-inf"), "-inf"),
        (float("nan"), "nan"),
        (-10e15-10e15j, "(-1e+16-1e+16j)"),
        (-10e6-10e6j, "(-10000000-10000000j)"),
        (-123.456-123.456j, "(-123.456-123.456j)"),
        (-123+123j, "(-123+123j)"),
        (-0.1+0.1j, "(-0.1+0.1j)"),
        (complex(float("-0.0"), float("0.0")), "(-0+0j)"),
        (complex(float("0.0"), float("-0.0")), "-0j"),
        (+0.1-0.1j, "(0.1-0.1j)"),
        (+123-123j, "(123-123j)"),
        (123.456+123.456j, "(123.456+123.456j)"),
        (10e6+10e6j, "(10000000+10000000j)"),
        (10e15+10e15j, "(1e+16+1e+16j)"),
        (complex(float("nan"), float("nan")), "(nan+nanj)"),
        (complex(float("inf"), float("-inf")), "(inf-infj)"),
        (complex(float("-inf"), float("inf")), "(-inf+infj)"),
        (ipaddress.ip_address("0.0.0.0"), "0.0.0.0"),
        (ipaddress.ip_address("127.0.0.1"), "127.0.0.1"),
        (ipaddress.ip_address("255.255.255.255"), "255.255.255.255"),
        (ipaddress.ip_address("0::0000"), "::"),
        (ipaddress.ip_address("::1"), "::1"),
        (ipaddress.ip_address("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"), "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"),
        (ipaddress.ip_address("::ffff:127.0.0.1"), "::ffff:7f00:1"),
        (ipaddress.ip_network("0.0.0.0/0"), "0.0.0.0/0"),
        (ipaddress.ip_network("127.0.0.0/8"), "127.0.0.0/8"),
        (ipaddress.ip_network("255.255.255.255"), "255.255.255.255/32"),
        (ipaddress.ip_network("0::0000/0"), "::/0"),
        (ipaddress.ip_network("2001:db8::/32"), "2001:db8::/32"),
        (ipaddress.ip_network("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"), "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/128"),
        (ipaddress.ip_network("::ffff:127.0.0.0/104"), "::ffff:7f00:0/104"),
        (uuid.UUID('{12345678-1234-5678-1234-567812345678}'), "12345678-1234-5678-1234-567812345678"),
        (uuid.UUID('urn:uuid:12345678-1234-5678-1234-567812345678'), "12345678-1234-5678-1234-567812345678"),
        (uuid.UUID(bytes=b'\x12\x34\x56\x78' * 4), "12345678-1234-5678-1234-567812345678"),
        (uuid.UUID(int=0x12345678123456781234567812345678), "12345678-1234-5678-1234-567812345678"),
        (b'', ""),
        (b'foobar', "foobar"),
        (b'\r\r\n\r  hello world  \t\f\v', "\r\r\n\r  hello world  \t\f\v"),
        (b'\x00' * 4, "\0\0\0\0"),
        (b'P\xc5\x99\xc3\xadli\xc5\xa1\x0d \xc5\xbelu\xc5\xa5ou\xc4\x8dk\xc3\xbd\x0a k\xc5\xaf\xc5\x88', "P≈ô√≠li≈°\r ≈ælu≈•ouƒçk√Ω\n k≈Ø≈à"),
        (b'aaa\xffaaa', InputDataNotConvertibleExc),
        (b'aaa\xc5aaa', InputDataNotConvertibleExc),
        (b'aaa\xc5', InputDataNotConvertibleExc),
        (bytearray(b''), ""),
        (bytearray(b'foobar'), "foobar"),
        (bytearray(b'\r\r\n\r  hello world  \t\f\v'), "\r\r\n\r  hello world  \t\f\v"),
        (bytearray(b'\x00' * 4), "\0\0\0\0"),
        (bytearray(b'P\xc5\x99\xc3\xadli\xc5\xa1\x0d \xc5\xbelu\xc5\xa5ou\xc4\x8dk\xc3\xbd\x0a k\xc5\xaf\xc5\x88'), "P≈ô√≠li≈°\r ≈ælu≈•ouƒçk√Ω\n k≈Ø≈à"),
        (bytearray(b'aaa\xffaaa'), InputDataNotConvertibleExc),
        (bytearray(b'aaa\xc5aaa'), InputDataNotConvertibleExc),
        (bytearray(b'aaa\xc5'), InputDataNotConvertibleExc),
        (current_datetime_naive, current_datetime_naive.isoformat()),
        (current_datetime_aware, current_datetime_aware.isoformat()),
        (datetime.datetime(10, 1, 1, 15, 40, 5), "0010-01-01T15:40:05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5), "2020-01-20T15:40:05"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5), "2020-08-20T15:40:05"),
        (datetime.datetime(9990, 1, 1, 15, 40, 5), "9990-01-01T15:40:05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=datetime.timezone.utc), "2020-01-20T15:40:05+00:00"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=datetime.timezone.utc), "2020-08-20T15:40:05+00:00"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), "2020-01-20T15:40:05+01:00"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), "2020-08-20T15:40:05+02:00"),  # DST active
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")), "2020-01-20T15:40:05-05:00"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")), "2020-08-20T15:40:05-04:00"),  # DST active
        (current_datetime_naive.date(), current_datetime_naive.date().isoformat()),
        (current_datetime_aware.date(), current_datetime_aware.date().isoformat()),
        (datetime.datetime(10, 1, 1, 15, 40, 5).date(), "0010-01-01"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5).date(), "2020-01-20"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5).date(), "2020-08-20"),
        (datetime.datetime(9990, 1, 1, 15, 40, 5).date(), "9990-01-01"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=datetime.timezone.utc).date(), "2020-01-20"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=datetime.timezone.utc).date(), "2020-08-20"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")).date(), "2020-01-20"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")).date(), "2020-08-20"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")).date(), "2020-01-20"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")).date(), "2020-08-20"),
        (current_datetime_naive.time(), current_datetime_naive.time().isoformat()),
        (current_datetime_aware.time(), current_datetime_aware.time().isoformat()),
        (datetime.datetime(10, 1, 1, 15, 40, 5).time(), "15:40:05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5).time(), "15:40:05"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5).time(), "15:40:05"),
        (datetime.datetime(9990, 1, 1, 15, 40, 5).time(), "15:40:05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=datetime.timezone.utc).time(), "15:40:05"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=datetime.timezone.utc).time(), "15:40:05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")).time(), "15:40:05"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")).time(), "15:40:05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")).time(), "15:40:05"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")).time(), "15:40:05"),
        (urllib.parse.urlparse("https://www.google.com/test?abc=def#anchor"), "https://www.google.com/test?abc=def#anchor"),
        (urllib.parse.urlparse("HTTPS://user@pass:www.google.com:443/test?abc=def#anchor"), "https://user@pass:www.google.com:443/test?abc=def#anchor"),
        (urllib.parse.urlparse("http://[::1]/testpath?123#456"), "http://[::1]/testpath?123#456"),
        (urllib.parse.urlparse("CUSTOMPROTO://a@b:[::1]:80/testpath?123#456"), "customproto://a@b:[::1]:80/testpath?123#456"),
        (urllib.parse.urlparse(b"https://www.google.com/test?abc=def#anchor"), InputDataTypeNotInAllowlistExc),
        (urllib.parse.urlparse(b"HTTPS://user@pass:www.google.com:443/test?abc=def#anchor"), InputDataTypeNotInAllowlistExc),
        (urllib.parse.urlparse(b"http://[::1]/testpath?123#456"), InputDataTypeNotInAllowlistExc),
        (urllib.parse.urlparse(b"CUSTOMPROTO://a@b:[::1]:80/testpath?123#456"), InputDataTypeNotInAllowlistExc),
        (list(), InputDataTypeNotInAllowlistExc),
        (tuple(), InputDataTypeNotInAllowlistExc),
        (dict(), InputDataTypeNotInAllowlistExc),
        (set(), InputDataTypeNotInAllowlistExc),
        (frozenset(), InputDataTypeNotInAllowlistExc),
        (["hello", 123.456, True], InputDataTypeNotInAllowlistExc),
        (("hello", 123.456, True), InputDataTypeNotInAllowlistExc),
        ({"hello": "world", 123.456: 789, True: None}, InputDataTypeNotInAllowlistExc),
        ({"hello", 123.456, True}, InputDataTypeNotInAllowlistExc),
        (frozenset(("hello", 123.456, True)), InputDataTypeNotInAllowlistExc),
        (str, InputDataTypeNotInAllowlistExc),
        (int, InputDataTypeNotInAllowlistExc),
        (object, InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject, InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException, InputDataTypeNotInAllowlistExc),
        (object(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
        (StringableObject("hello world"), InputDataTypeNotInAllowlistExc),
        (StringableObject(123), InputDataTypeNotInAllowlistExc),
        (StringableObject(None), InputDataTypeNotInAllowlistExc),
        (StringableObject(theoretical_testutils.EmptyObject()), InputDataTypeNotInAllowlistExc),
        (ExceptionRaisingStringableObject(), InputDataTypeNotInAllowlistExc),
        (IntableObject("hello world"), InputDataTypeNotInAllowlistExc),
        (IntableObject(123), InputDataTypeNotInAllowlistExc),
        (IntableObject(None), InputDataTypeNotInAllowlistExc),
        (IntableObject(theoretical_testutils.EmptyObject()), InputDataTypeNotInAllowlistExc),
        (ExceptionRaisingIntableObject(), InputDataTypeNotInAllowlistExc),
        (IterableObject("a string"), InputDataTypeNotInAllowlistExc),
        (IterableObject([]), InputDataTypeNotInAllowlistExc),
        (IterableObject(["hello", 123.456, True]), InputDataTypeNotInAllowlistExc),
        (ExceptionRaisingIterableObject(raise_=False), InputDataTypeNotInAllowlistExc),
        (ExceptionRaisingIterableObject(raise_=True), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(parsing_mode=ParsingMode.MODE_STRICT), (
        ("", ""),
        ("teststring", "teststring"),
        ("\t\f\v   hel  lo\two rld  \r\n", "\t\f\v   hel  lo\two rld  \r\n"),
        ("‚ù§Ô∏èüß°üíõüíöüíôüíúüñ§ü§çü§éüíî‚ù£üíïüíûüíìüíó", "‚ù§Ô∏èüß°üíõüíöüíôüíúüñ§ü§çü§éüíî‚ù£üíïüíûüíìüíó"),
        ("\x00", "\x00"),
        ("\x00teststring", "\x00teststring"),
        ("test\x00string", "test\x00string"),
        ("teststring\x00", "teststring\x00"),
        (None, InputDataTypeNotInAllowlistExc),
        (True, InputDataTypeNotInAllowlistExc),
        (False, InputDataTypeNotInAllowlistExc),
        (-100_000_000_000_000, InputDataTypeNotInAllowlistExc),
        (-123, InputDataTypeNotInAllowlistExc),
        (0, InputDataTypeNotInAllowlistExc),
        (123, InputDataTypeNotInAllowlistExc),
        (100_000_000_000_000, InputDataTypeNotInAllowlistExc),
        (-10e100, InputDataTypeNotInAllowlistExc),
        (-10e9, InputDataTypeNotInAllowlistExc),
        (-123.456, InputDataTypeNotInAllowlistExc),
        (-1/3, InputDataTypeNotInAllowlistExc),
        (-0.1, InputDataTypeNotInAllowlistExc),
        (-0.0, InputDataTypeNotInAllowlistExc),
        (0.0, InputDataTypeNotInAllowlistExc),
        (0.1, InputDataTypeNotInAllowlistExc),
        (1/3, InputDataTypeNotInAllowlistExc),
        (123.456, InputDataTypeNotInAllowlistExc),
        (10e9, InputDataTypeNotInAllowlistExc),
        (10e100, InputDataTypeNotInAllowlistExc),
        (float("inf"), InputDataTypeNotInAllowlistExc),
        (float("-inf"), InputDataTypeNotInAllowlistExc),
        (float("nan"), InputDataTypeNotInAllowlistExc),
        (-10e15-10e15j, InputDataTypeNotInAllowlistExc),
        (-10e6-10e6j, InputDataTypeNotInAllowlistExc),
        (-123.456-123.456j, InputDataTypeNotInAllowlistExc),
        (-123+123j, InputDataTypeNotInAllowlistExc),
        (-0.1+0.1j, InputDataTypeNotInAllowlistExc),
        (complex(float("-0.0"), float("0.0")), InputDataTypeNotInAllowlistExc),
        (complex(float("0.0"), float("-0.0")), InputDataTypeNotInAllowlistExc),
        (+0.1-0.1j, InputDataTypeNotInAllowlistExc),
        (+123-123j, InputDataTypeNotInAllowlistExc),
        (123.456+123.456j, InputDataTypeNotInAllowlistExc),
        (10e6+10e6j, InputDataTypeNotInAllowlistExc),
        (10e15+10e15j, InputDataTypeNotInAllowlistExc),
        (complex(float("nan"), float("nan")), InputDataTypeNotInAllowlistExc),
        (complex(float("inf"), float("-inf")), InputDataTypeNotInAllowlistExc),
        (complex(float("-inf"), float("inf")), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_address("0.0.0.0"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_address("127.0.0.1"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_address("255.255.255.255"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_address("0::0000"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_address("::1"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_address("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_address("::ffff:127.0.0.1"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_network("0.0.0.0/0"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_network("127.0.0.0/8"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_network("255.255.255.255"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_network("0::0000/0"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_network("2001:db8::/32"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_network("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_network("::ffff:127.0.0.0/104"), InputDataTypeNotInAllowlistExc),
        (uuid.UUID('{12345678-1234-5678-1234-567812345678}'), InputDataTypeNotInAllowlistExc),
        (uuid.UUID('urn:uuid:12345678-1234-5678-1234-567812345678'), InputDataTypeNotInAllowlistExc),
        (uuid.UUID(bytes=b'\x12\x34\x56\x78' * 4), InputDataTypeNotInAllowlistExc),
        (uuid.UUID(int=0x12345678123456781234567812345678), InputDataTypeNotInAllowlistExc),
        (b'', InputDataTypeNotInAllowlistExc),
        (b'foobar', InputDataTypeNotInAllowlistExc),
        (b'\r\r\n\r  hello world  \t\f\v', InputDataTypeNotInAllowlistExc),
        (b'\x00' * 4, InputDataTypeNotInAllowlistExc),
        (b'P\xc5\x99\xc3\xadli\xc5\xa1\x0d \xc5\xbelu\xc5\xa5ou\xc4\x8dk\xc3\xbd\x0a k\xc5\xaf\xc5\x88', InputDataTypeNotInAllowlistExc),
        (b'aaa\xffaaa', InputDataTypeNotInAllowlistExc),
        (b'aaa\xc5aaa', InputDataTypeNotInAllowlistExc),
        (b'aaa\xc5', InputDataTypeNotInAllowlistExc),
        (bytearray(b''), InputDataTypeNotInAllowlistExc),
        (bytearray(b'foobar'), InputDataTypeNotInAllowlistExc),
        (bytearray(b'\r\r\n\r  hello world  \t\f\v'), InputDataTypeNotInAllowlistExc),
        (bytearray(b'\x00' * 4), InputDataTypeNotInAllowlistExc),
        (bytearray(b'P\xc5\x99\xc3\xadli\xc5\xa1\x0d \xc5\xbelu\xc5\xa5ou\xc4\x8dk\xc3\xbd\x0a k\xc5\xaf\xc5\x88'), InputDataTypeNotInAllowlistExc),
        (bytearray(b'aaa\xffaaa'), InputDataTypeNotInAllowlistExc),
        (bytearray(b'aaa\xc5aaa'), InputDataTypeNotInAllowlistExc),
        (bytearray(b'aaa\xc5'), InputDataTypeNotInAllowlistExc),
        (current_datetime_naive, InputDataTypeNotInAllowlistExc),
        (current_datetime_aware, InputDataTypeNotInAllowlistExc),
        (datetime.datetime(10, 1, 1, 15, 40, 5), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 1, 20, 15, 40, 5), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 8, 20, 15, 40, 5), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(9990, 1, 1, 15, 40, 5), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=datetime.timezone.utc), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=datetime.timezone.utc), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), InputDataTypeNotInAllowlistExc),  # DST active
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")), InputDataTypeNotInAllowlistExc),  # DST active
        (current_datetime_naive.date(), InputDataTypeNotInAllowlistExc),
        (current_datetime_aware.date(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(10, 1, 1, 15, 40, 5).date(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 1, 20, 15, 40, 5).date(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 8, 20, 15, 40, 5).date(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(9990, 1, 1, 15, 40, 5).date(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=datetime.timezone.utc).date(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=datetime.timezone.utc).date(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")).date(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")).date(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")).date(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")).date(), InputDataTypeNotInAllowlistExc),
        (current_datetime_naive.time(), InputDataTypeNotInAllowlistExc),
        (current_datetime_aware.time(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(10, 1, 1, 15, 40, 5).time(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 1, 20, 15, 40, 5).time(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 8, 20, 15, 40, 5).time(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(9990, 1, 1, 15, 40, 5).time(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=datetime.timezone.utc).time(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=datetime.timezone.utc).time(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")).time(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")).time(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")).time(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")).time(), InputDataTypeNotInAllowlistExc),
        (urllib.parse.urlparse("https://www.google.com/test?abc=def#anchor"), InputDataTypeNotInAllowlistExc),
        (urllib.parse.urlparse("HTTPS://user@pass:www.google.com:443/test?abc=def#anchor"), InputDataTypeNotInAllowlistExc),
        (urllib.parse.urlparse("http://[::1]/testpath?123#456"), InputDataTypeNotInAllowlistExc),
        (urllib.parse.urlparse("CUSTOMPROTO://a@b:[::1]:80/testpath?123#456"), InputDataTypeNotInAllowlistExc),
        (urllib.parse.urlparse(b"https://www.google.com/test?abc=def#anchor"), InputDataTypeNotInAllowlistExc),
        (urllib.parse.urlparse(b"HTTPS://user@pass:www.google.com:443/test?abc=def#anchor"), InputDataTypeNotInAllowlistExc),
        (urllib.parse.urlparse(b"http://[::1]/testpath?123#456"), InputDataTypeNotInAllowlistExc),
        (urllib.parse.urlparse(b"CUSTOMPROTO://a@b:[::1]:80/testpath?123#456"), InputDataTypeNotInAllowlistExc),
        (list(), InputDataTypeNotInAllowlistExc),
        (tuple(), InputDataTypeNotInAllowlistExc),
        (dict(), InputDataTypeNotInAllowlistExc),
        (set(), InputDataTypeNotInAllowlistExc),
        (frozenset(), InputDataTypeNotInAllowlistExc),
        (["hello", 123.456, True], InputDataTypeNotInAllowlistExc),
        (("hello", 123.456, True), InputDataTypeNotInAllowlistExc),
        ({"hello": "world", 123.456: 789, True: None}, InputDataTypeNotInAllowlistExc),
        ({"hello", 123.456, True}, InputDataTypeNotInAllowlistExc),
        (frozenset(("hello", 123.456, True)), InputDataTypeNotInAllowlistExc),
        (str, InputDataTypeNotInAllowlistExc),
        (int, InputDataTypeNotInAllowlistExc),
        (object, InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject, InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException, InputDataTypeNotInAllowlistExc),
        (object(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
        (StringableObject("hello world"), InputDataTypeNotInAllowlistExc),
        (StringableObject(123), InputDataTypeNotInAllowlistExc),
        (StringableObject(None), InputDataTypeNotInAllowlistExc),
        (StringableObject(theoretical_testutils.EmptyObject()), InputDataTypeNotInAllowlistExc),
        (ExceptionRaisingStringableObject(), InputDataTypeNotInAllowlistExc),
        (IntableObject("hello world"), InputDataTypeNotInAllowlistExc),
        (IntableObject(123), InputDataTypeNotInAllowlistExc),
        (IntableObject(None), InputDataTypeNotInAllowlistExc),
        (IntableObject(theoretical_testutils.EmptyObject()), InputDataTypeNotInAllowlistExc),
        (ExceptionRaisingIntableObject(), InputDataTypeNotInAllowlistExc),
        (IterableObject("a string"), InputDataTypeNotInAllowlistExc),
        (IterableObject([]), InputDataTypeNotInAllowlistExc),
        (IterableObject(["hello", 123.456, True]), InputDataTypeNotInAllowlistExc),
        (ExceptionRaisingIterableObject(raise_=False), InputDataTypeNotInAllowlistExc),
        (ExceptionRaisingIterableObject(raise_=True), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(
        bytes_encoding="ascii",
        datetime_string_format="%d.%m.%Y | %H-%M-%S",
        date_string_format="%d.%m.%Y",
        time_string_format="%H-%M-%S"
    ), (
        ("", ""),
        ("teststring", "teststring"),
        ("\t\f\v   hel  lo\two rld  \r\n", "\t\f\v   hel  lo\two rld  \r\n"),
        ("‚ù§Ô∏èüß°üíõüíöüíôüíúüñ§ü§çü§éüíî‚ù£üíïüíûüíìüíó", "‚ù§Ô∏èüß°üíõüíöüíôüíúüñ§ü§çü§éüíî‚ù£üíïüíûüíìüíó"),
        ("\x00", "\x00"),
        ("\x00teststring", "\x00teststring"),
        ("test\x00string", "test\x00string"),
        ("teststring\x00", "teststring\x00"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
        (b'', ""),
        (b'testbytes', "testbytes"),
        (b'hello\nworld  \t\f', "hello\nworld  \t\f"),
        (b'\x00\x00', "\x00\x00"),
        (b'\xe2\x9d\xa4\xef\xb8\x8f\xf0\x9f\xa7\xa1\xf0\x9f\x92\x9b', InputDataNotConvertibleExc),
        (b'\xc5\xbdlu\xc5\xa5ou\xc4\x8dk\xc3\xbd k\xc5\xaf\xc5\x88', InputDataNotConvertibleExc),
        (b'aaa\xffaaa', InputDataNotConvertibleExc),
        (bytearray(b''), ""),
        (bytearray(b'testbytes'), "testbytes"),
        (bytearray(b'hello\nworld  \t\f'), "hello\nworld  \t\f"),
        (bytearray(b'\x00\x00'), "\x00\x00"),
        (bytearray(b'\xe2\x9d\xa4\xef\xb8\x8f\xf0\x9f\xa7\xa1\xf0\x9f\x92\x9b'), InputDataNotConvertibleExc),
        (bytearray(b'\xc5\xbdlu\xc5\xa5ou\xc4\x8dk\xc3\xbd k\xc5\xaf\xc5\x88'), InputDataNotConvertibleExc),
        (bytearray(b'aaa\xffaaa'), InputDataNotConvertibleExc),
        (current_datetime_naive, current_datetime_naive.strftime("%d.%m.%Y | %H-%M-%S")),
        (current_datetime_aware, current_datetime_aware.strftime("%d.%m.%Y | %H-%M-%S")),
        (datetime.datetime(10, 1, 1, 15, 40, 5), "01.01.10 | 15-40-05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5), "20.01.2020 | 15-40-05"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5), "20.08.2020 | 15-40-05"),
        (datetime.datetime(9990, 1, 1, 15, 40, 5), "01.01.9990 | 15-40-05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=datetime.timezone.utc), "20.01.2020 | 15-40-05"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=datetime.timezone.utc), "20.08.2020 | 15-40-05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), "20.01.2020 | 15-40-05"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), "20.08.2020 | 15-40-05"),  # DST active
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")), "20.01.2020 | 15-40-05"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")), "20.08.2020 | 15-40-05"),  # DST active
        (current_datetime_naive.date(), current_datetime_naive.date().strftime("%d.%m.%Y")),
        (current_datetime_aware.date(), current_datetime_aware.date().strftime("%d.%m.%Y")),
        (datetime.datetime(10, 1, 1, 15, 40, 5).date(), "01.01.10"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5).date(), "20.01.2020"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5).date(), "20.08.2020"),
        (datetime.datetime(9990, 1, 1, 15, 40, 5).date(), "01.01.9990"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=datetime.timezone.utc).date(), "20.01.2020"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=datetime.timezone.utc).date(), "20.08.2020"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")).date(), "20.01.2020"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")).date(), "20.08.2020"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")).date(), "20.01.2020"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")).date(), "20.08.2020"),
        (current_datetime_naive.time(), current_datetime_naive.time().strftime("%H-%M-%S")),
        (current_datetime_aware.time(), current_datetime_aware.time().strftime("%H-%M-%S")),
        (datetime.datetime(10, 1, 1, 15, 40, 5).time(), "15-40-05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5).time(), "15-40-05"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5).time(), "15-40-05"),
        (datetime.datetime(9990, 1, 1, 15, 40, 5).time(), "15-40-05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=datetime.timezone.utc).time(), "15-40-05"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=datetime.timezone.utc).time(), "15-40-05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")).time(), "15-40-05"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")).time(), "15-40-05"),
        (datetime.datetime(2020, 1, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")).time(), "15-40-05"),
        (datetime.datetime(2020, 8, 20, 15, 40, 5, tzinfo=zoneinfo.ZoneInfo("America/New_York")).time(), "15-40-05"),
    )),
    (StringBlueprint(filters=(StringAlwaysEmptyFilter(),)), (
        ("", ""),
        ("teststring", ""),
        ("\t\f\v   hel  lo\two rld  \r\n", ""),
        ("‚ù§Ô∏èüß°üíõüíöüíôüíúüñ§ü§çü§éüíî‚ù£üíïüíûüíìüíó", ""),
        ("\x00", ""),
        ("\x00teststring", ""),
        ("test\x00string", ""),
        ("teststring\x00", ""),
        (None, ""),
        (True, ""),
        (False, ""),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringCapitalizeFilter(),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("123456789", "123456789"),
        ("\n\t ", "\n\t "),
        ("ü§çü§é", "ü§çü§é"),
        ("hello", "Hello"),
        ("hello world!", "Hello world!"),
        ("Hello World!", "Hello world!"),
        ("HELLO WORLD!", "Hello world!"),
        ("hELLO wORLD!", "Hello world!"),
        ("≈ôe≈ôicha", "≈òe≈ôicha"),
        ("≈æ√°dn√° ≈ôe≈ôicha", "≈Ω√°dn√° ≈ôe≈ôicha"),
        ("\x00hello", "\x00hello"),
        ("\x00hello world!", "\x00hello world!"),
        ("\x00Hello World!", "\x00hello world!"),
        ("\x00HELLO WORLD!", "\x00hello world!"),
        ("\x00hELLO wORLD!", "\x00hello world!"),
        ("\x00≈ôe≈ôicha", "\x00≈ôe≈ôicha"),
        ("\x00≈æ√°dn√° ≈ôe≈ôicha", "\x00≈æ√°dn√° ≈ôe≈ôicha"),
        (" hello", " hello"),
        (" hello world!", " hello world!"),
        (" Hello World!", " hello world!"),
        (" HELLO WORLD!", " hello world!"),
        (" hELLO wORLD!", " hello world!"),
        (" ≈ôe≈ôicha", " ≈ôe≈ôicha"),
        (" ≈æ√°dn√° ≈ôe≈ôicha", " ≈æ√°dn√° ≈ôe≈ôicha"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringControlAndSeparatorCharacterFilter(),)), (
        ("", ""),
        ("1234", "1234"),
        ("hello", "hello"),
        ("ü§çü§é", "ü§çü§é"),
        ("≈ôe≈ôicha", "≈ôe≈ôicha"),
        ("Hello World!", "Hello World!"),
        ("P≈ô√≠li≈° ≈ælu≈•ouƒçk√Ω\r\nk≈Ø≈à\r√∫pƒõl\nƒè√°belsk√©\t√≥dy.", "P≈ô√≠li≈° ≈ælu≈•ouƒçk√Ω\r\nk≈Ø≈à\r√∫pƒõl\nƒè√°belsk√©\t√≥dy."),
        (
            "Nech≈• ji≈æ\t\n\rh≈ô√≠≈°n√©\u2028saxofony\x00ƒè√°bl≈Ø\x01\x02\x03rozezvuƒç√≠\u2028\u2029s√≠≈à\u202f\u1680√∫dƒõsn√Ωmi\u3000t√≥ny\u061c\u180ewaltzu, \t \u008d\u009ctanga\ufeff\uffff\u2064a quickstepu.\ufffe",
            "Nech≈• ji≈æ\t\n\rh≈ô√≠≈°n√©saxofonyƒè√°bl≈Ørozezvuƒç√≠s√≠≈à√∫dƒõsn√Ωmit√≥nywaltzu, \t tangaa quickstepu."
        ),
        ("–î–æ–±—Ä–æ \t–ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\u2028\uffff\n", "–î–æ–±—Ä–æ \t–ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringControlAndSeparatorCharacterFilter(allowed_characters=" "),)), (
        ("", ""),
        ("1234", "1234"),
        ("hello", "hello"),
        ("ü§çü§é", "ü§çü§é"),
        ("≈ôe≈ôicha", "≈ôe≈ôicha"),
        ("Hello World!", "Hello World!"),
        ("P≈ô√≠li≈° ≈ælu≈•ouƒçk√Ω\r\nk≈Ø≈à\r√∫pƒõl\nƒè√°belsk√©\t√≥dy.", "P≈ô√≠li≈° ≈ælu≈•ouƒçk√Ωk≈Ø≈à√∫pƒõlƒè√°belsk√©√≥dy."),
        (
            "Nech≈• ji≈æ\t\n\rh≈ô√≠≈°n√©\u2028saxofony\x00ƒè√°bl≈Ø\x01\x02\x03rozezvuƒç√≠\u2028\u2029s√≠≈à\u202f\u1680√∫dƒõsn√Ωmi\u3000t√≥ny\u061c\u180ewaltzu, \t \u008d\u009ctanga\ufeff\uffff\u2064a quickstepu.\ufffe",
            "Nech≈• ji≈æh≈ô√≠≈°n√©saxofonyƒè√°bl≈Ørozezvuƒç√≠s√≠≈à√∫dƒõsn√Ωmit√≥nywaltzu,  tangaa quickstepu."
        ),
        ("–î–æ–±—Ä–æ \t–ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\u2028\uffff\n", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringControlAndSeparatorCharacterFilter(allowed_characters="\uffff\x00\u2028"),)), (
        ("", ""),
        ("1234", "1234"),
        ("hello", "hello"),
        ("ü§çü§é", "ü§çü§é"),
        ("≈ôe≈ôicha", "≈ôe≈ôicha"),
        ("Hello World!", "HelloWorld!"),
        ("P≈ô√≠li≈° ≈ælu≈•ouƒçk√Ω\r\nk≈Ø≈à\r√∫pƒõl\nƒè√°belsk√©\t√≥dy.", "P≈ô√≠li≈°≈ælu≈•ouƒçk√Ωk≈Ø≈à√∫pƒõlƒè√°belsk√©√≥dy."),
        (
            "Nech≈• ji≈æ\t\n\rh≈ô√≠≈°n√©\u2028saxofony\x00ƒè√°bl≈Ø\x01\x02\x03rozezvuƒç√≠\u2028\u2029s√≠≈à\u202f\u1680√∫dƒõsn√Ωmi\u3000t√≥ny\u061c\u180ewaltzu, \t \u008d\u009ctanga\ufeff\uffff\u2064a quickstepu.\ufffe",
            "Nech≈•ji≈æh≈ô√≠≈°n√©\u2028saxofony\x00ƒè√°bl≈Ørozezvuƒç√≠\u2028s√≠≈à√∫dƒõsn√Ωmit√≥nywaltzu,tanga\uffffaquickstepu."
        ),
        ("–î–æ–±—Ä–æ \t–ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\u2028\uffff\n", "–î–æ–±—Ä–æ–ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\u2028\uffff"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringDeduplicateWhitespaceFilter(),)), (
        ("", ""),
        ("hello", "hello"),
        ("ü§çü§é", "ü§çü§é"),
        ("Hello World", "Hello World"),
        ("Hello     World", "Hello World"),
        ("Hello\r\n\r\nWorld", "Hello\nWorld"),
        ("Hello\n\r.\r\nWorld", "Hello\r.\nWorld"),
        ("\x00HelloWorld", "\x00HelloWorld"),
        ("Hello\x00World", "Hello\x00World"),
        ("HelloWorld\x00", "HelloWorld\x00"),
        ("\x00\x00HelloWorld", "\x00\x00HelloWorld"),
        ("Hello\x00\x00World", "Hello\x00\x00World"),
        ("HelloWorld\x00\x00", "HelloWorld\x00\x00"),
        ("Hello\u2028\u2028World", "Hello\u2028World"),
        ("Hello\x85\u00a0World\u00a0\x85", "Hello\u00a0World\x85"),
        ("≈Ωlu≈•ouƒçk√Ω\t\t\tK≈Æ≈á!!!", "≈Ωlu≈•ouƒçk√Ω\tK≈Æ≈á!!!"),
        ("≈Ωlu≈•ouƒçk√Ω\t\t\t K≈Æ≈á!!!", "≈Ωlu≈•ouƒçk√Ω K≈Æ≈á!!!"),
        ("≈Ωlu≈•ouƒçk√Ω\t\t\t. K≈Æ≈á!!!", "≈Ωlu≈•ouƒçk√Ω\t. K≈Æ≈á!!!"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringLowercaseFilter(),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("12345\t\r\n\u2028", "12345\t\r\n\u2028"),
        ("ü§çü§é", "ü§çü§é"),
        ("hello", "hello"),
        ("Hello", "hello"),
        ("HELLO", "hello"),
        ("hELLO", "hello"),
        ("\x00hello", "\x00hello"),
        ("\x00Hello", "\x00hello"),
        ("\x00HELLO", "\x00hello"),
        ("\x00hELLO", "\x00hello"),
        ("hello world", "hello world"),
        ("Hello World", "hello world"),
        ("HELLO WORLD", "hello world"),
        ("hELLO wORLD", "hello world"),
        ("≈æ√°dn√°\n\t≈ôe≈ôicha", "≈æ√°dn√°\n\t≈ôe≈ôicha"),
        ("≈Ω√°dn√°\n\t≈òe≈ôicha", "≈æ√°dn√°\n\t≈ôe≈ôicha"),
        ("≈Ω√ÅDN√Å\n\t≈òE≈òICHA", "≈æ√°dn√°\n\t≈ôe≈ôicha"),
        ("≈æ√ÅDN√Å\n\t≈ôE≈òICHA", "≈æ√°dn√°\n\t≈ôe≈ôicha"),
        ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"),
        (None, "none"),
        (True, "true"),
        (False, "false"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringRegexReplaceFilter(r'[a-z]', '-'),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("12345\t\r\n\u2028", "12345\t\r\n\u2028"),
        ("ü§çü§é", "ü§çü§é"),
        ("hello", "-----"),
        ("HELLO", "HELLO"),
        ("\x00TEST\x00", "\x00TEST\x00"),
        ("\x00test\x00", "\x00----\x00"),
        ("hello world!", "----- -----!"),
        ("Hello World!", "H---- W----!"),
        ("HELLO WORLD!", "HELLO WORLD!"),
        ("hELLO wORLD!", "-ELLO -ORLD!"),
        ("≈æ√°dn√° ≈ôe≈ôicha\r\n", "≈æ√°--√° ≈ô-≈ô----\r\n"),
        ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"),
        (None, "N---"),
        (True, "T---"),
        (False, "F----"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringRegexReplaceFilter(r'[a-z]', '-', max_replacement_count=2),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("12345\t\r\n\u2028", "12345\t\r\n\u2028"),
        ("ü§çü§é", "ü§çü§é"),
        ("hello", "--llo"),
        ("HELLO", "HELLO"),
        ("\x00TEST\x00", "\x00TEST\x00"),
        ("\x00test\x00", "\x00--st\x00"),
        ("hello world!", "--llo world!"),
        ("Hello World!", "H--lo World!"),
        ("HELLO WORLD!", "HELLO WORLD!"),
        ("hELLO wORLD!", "-ELLO -ORLD!"),
        ("≈æ√°dn√° ≈ôe≈ôicha\r\n", "≈æ√°--√° ≈ôe≈ôicha\r\n"),
        ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"),
        (None, "N--e"),
        (True, "T--e"),
        (False, "F--se"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringRegexReplaceFilter(r'[a-z]', '-', regex_compile_flags=re.IGNORECASE),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("12345\t\r\n\u2028", "12345\t\r\n\u2028"),
        ("ü§çü§é", "ü§çü§é"),
        ("hello", "-----"),
        ("HELLO", "-----"),
        ("\x00TEST\x00", "\x00----\x00"),
        ("\x00test\x00", "\x00----\x00"),
        ("hello world!", "----- -----!"),
        ("Hello World!", "----- -----!"),
        ("HELLO WORLD!", "----- -----!"),
        ("hELLO wORLD!", "----- -----!"),
        ("≈æ√°dn√° ≈ôe≈ôicha\r\n", "≈æ√°--√° ≈ô-≈ô----\r\n"),
        ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"),
        (None, "----"),
        (True, "----"),
        (False, "-----"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringRegexReplaceFilter(r'[a-z]', '-', max_replacement_count=2, regex_compile_flags=re.IGNORECASE),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("12345\t\r\n\u2028", "12345\t\r\n\u2028"),
        ("ü§çü§é", "ü§çü§é"),
        ("hello", "--llo"),
        ("HELLO", "--LLO"),
        ("\x00TEST\x00", "\x00--ST\x00"),
        ("\x00test\x00", "\x00--st\x00"),
        ("hello world!", "--llo world!"),
        ("Hello World!", "--llo World!"),
        ("HELLO WORLD!", "--LLO WORLD!"),
        ("hELLO wORLD!", "--LLO wORLD!"),
        ("≈æ√°dn√° ≈ôe≈ôicha\r\n", "≈æ√°--√° ≈ôe≈ôicha\r\n"),
        ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"),
        (None, "--ne"),
        (True, "--ue"),
        (False, "--lse"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringRegexReplaceFilter(r'[a-z]', lambda m: "|{}|".format(ord(m.group(0)))),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("12345\t\r\n\u2028", "12345\t\r\n\u2028"),
        ("ü§çü§é", "ü§çü§é"),
        ("hello", "|104||101||108||108||111|"),
        ("HELLO", "HELLO"),
        ("\x00TEST\x00", "\x00TEST\x00"),
        ("\x00test\x00", "\x00|116||101||115||116|\x00"),
        ("hello world!", "|104||101||108||108||111| |119||111||114||108||100|!"),
        ("Hello World!", "H|101||108||108||111| W|111||114||108||100|!"),
        ("HELLO WORLD!", "HELLO WORLD!"),
        ("hELLO wORLD!", "|104|ELLO |119|ORLD!"),
        ("≈æ√°dn√° ≈ôe≈ôicha\r\n", "≈æ√°|100||110|√° ≈ô|101|≈ô|105||99||104||97|\r\n"),
        ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"),
        (None, "N|111||110||101|"),
        (True, "T|114||117||101|"),
        (False, "F|97||108||115||101|"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringRegexReplaceFilter(r'[a-z]', lambda m: ord(m.group(0))),)), (  # noqa
        ("", ""),
        ("!!!", "!!!"),
        ("12345\t\r\n\u2028", "12345\t\r\n\u2028"),
        ("ü§çü§é", "ü§çü§é"),
        ("hello", RegexFailedInFilterExc),
        ("HELLO", "HELLO"),
        ("\x00TEST\x00", "\x00TEST\x00"),
        ("\x00test\x00", RegexFailedInFilterExc),
        ("hello world!", RegexFailedInFilterExc),
        ("Hello World!", RegexFailedInFilterExc),
        ("HELLO WORLD!", "HELLO WORLD!"),
        ("hELLO wORLD!", RegexFailedInFilterExc),
        ("≈æ√°dn√° ≈ôe≈ôicha\r\n", RegexFailedInFilterExc),
        ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"),
        (None, RegexFailedInFilterExc),
        (True, RegexFailedInFilterExc),
        (False, RegexFailedInFilterExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringRegexReplaceFilter(r'[a-z]', exception_raising_regex_replacement_function),)), (  
        ("", ""),
        ("!!!", "!!!"),
        ("12345\t\r\n\u2028", "12345\t\r\n\u2028"),
        ("ü§çü§é", "ü§çü§é"),
        ("hello", RegexFailedInFilterExc),
        ("HELLO", "HELLO"),
        ("\x00TEST\x00", "\x00TEST\x00"),
        ("\x00test\x00", RegexFailedInFilterExc),
        ("hello world!", RegexFailedInFilterExc),
        ("Hello World!", RegexFailedInFilterExc),
        ("HELLO WORLD!", "HELLO WORLD!"),
        ("hELLO wORLD!", RegexFailedInFilterExc),
        ("≈æ√°dn√° ≈ôe≈ôicha\r\n", RegexFailedInFilterExc),
        ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"),
        (None, RegexFailedInFilterExc),
        (True, RegexFailedInFilterExc),
        (False, RegexFailedInFilterExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringReplaceFilter("ll", "XX"),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("12345\t\r\n\u2028", "12345\t\r\n\u2028"),
        ("ü§çü§é", "ü§çü§é"),
        ("hello", "heXXo"),
        ("HELLO", "HELLO"),
        ("\x00TEST\x00", "\x00TEST\x00"),
        ("\x00test\x00", "\x00test\x00"),
        ("hello world!", "heXXo world!"),
        ("Hello World!", "HeXXo World!"),
        ("HELLO WORLD!", "HELLO WORLD!"),
        ("hELLO wORLD!", "hELLO wORLD!"),
        ("≈æ√°dn√° ≈ôe≈ôicha\r\n", "≈æ√°dn√° ≈ôe≈ôicha\r\n"),
        ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringReplaceFilter("l", ""),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("12345\t\r\n\u2028", "12345\t\r\n\u2028"),
        ("ü§çü§é", "ü§çü§é"),
        ("hello", "heo"),
        ("HELLO", "HELLO"),
        ("\x00TEST\x00", "\x00TEST\x00"),
        ("\x00test\x00", "\x00test\x00"),
        ("hello world!", "heo word!"),
        ("Hello World!", "Heo Word!"),
        ("HELLO WORLD!", "HELLO WORLD!"),
        ("hELLO wORLD!", "hELLO wORLD!"),
        ("≈æ√°dn√° ≈ôe≈ôicha\r\n", "≈æ√°dn√° ≈ôe≈ôicha\r\n"),
        ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"),
        (None, "None"),
        (True, "True"),
        (False, "Fase"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringReplaceFilter("l", "", max_replacement_count=1),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("12345\t\r\n\u2028", "12345\t\r\n\u2028"),
        ("ü§çü§é", "ü§çü§é"),
        ("hello", "helo"),
        ("HELLO", "HELLO"),
        ("\x00TEST\x00", "\x00TEST\x00"),
        ("\x00test\x00", "\x00test\x00"),
        ("hello world!", "helo world!"),
        ("Hello World!", "Helo World!"),
        ("HELLO WORLD!", "HELLO WORLD!"),
        ("hELLO wORLD!", "hELLO wORLD!"),
        ("≈æ√°dn√° ≈ôe≈ôicha\r\n", "≈æ√°dn√° ≈ôe≈ôicha\r\n"),
        ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"),
        (None, "None"),
        (True, "True"),
        (False, "Fase"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringStripFilter(),)), (
        ("", ""),
        ("   ", ""),
        ("\n", ""),
        ("\n" * 10, ""),
        ("!!!", "!!!"),
        ("000123456000", "000123456000"),
        ("hello world", "hello world"),
        ("   hello world   ", "hello world"),
        ("\r\n\r\r\u2028hello world  \t\f\v", "hello world"),
        (" ≈ô≈ô≈ô ", "≈ô≈ô≈ô"),
        ("\x00test\x00", "\x00test\x00"),
        ("\x00\x00test\x00\x00", "\x00\x00test\x00\x00"),
        ("ü§çü§é", "ü§çü§é"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringStripFilter(do_left_strip=False, do_right_strip=True),)), (
        ("", ""),
        ("   ", ""),
        ("\n", ""),
        ("\n" * 10, ""),
        ("!!!", "!!!"),
        ("000123456000", "000123456000"),
        ("hello world", "hello world"),
        ("   hello world   ", "   hello world"),
        ("\r\n\r\r\u2028hello world  \t\f\v", "\r\n\r\r\u2028hello world"),
        (" ≈ô≈ô≈ô ", " ≈ô≈ô≈ô"),
        ("\x00test\x00", "\x00test\x00"),
        ("\x00\x00test\x00\x00", "\x00\x00test\x00\x00"),
        ("ü§çü§é", "ü§çü§é"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringStripFilter(do_left_strip=True, do_right_strip=False),)), (
        ("", ""),
        ("   ", ""),
        ("\n", ""),
        ("\n" * 10, ""),
        ("!!!", "!!!"),
        ("000123456000", "000123456000"),
        ("hello world", "hello world"),
        ("   hello world   ", "hello world   "),
        ("\r\n\r\r\u2028hello world  \t\f\v", "hello world  \t\f\v"),
        (" ≈ô≈ô≈ô ", "≈ô≈ô≈ô "),
        ("\x00test\x00", "\x00test\x00"),
        ("\x00\x00test\x00\x00", "\x00\x00test\x00\x00"),
        ("ü§çü§é", "ü§çü§é"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringStripFilter(stripped_characters="0e"),)), (
        ("", ""),
        ("   ", "   "),
        ("\n", "\n"),
        ("\n" * 10, "\n\n\n\n\n\n\n\n\n\n"),
        ("!!!", "!!!"),
        ("000123456000", "123456"),
        ("hello world", "hello world"),
        ("   hello world   ", "   hello world   "),
        ("\r\n\r\r\u2028hello world  \t\f\v", "\r\n\r\r\u2028hello world  \t\f\v"),
        (" ≈ô≈ô≈ô ", " ≈ô≈ô≈ô "),
        ("\x00test\x00", "\x00test\x00"),
        ("\x00\x00test\x00\x00", "\x00\x00test\x00\x00"),
        ("ü§çü§é", "ü§çü§é"),
        (None, "Non"),
        (True, "Tru"),
        (False, "Fals"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringUnicodeNormalizeFilter(normal_form="NFC"),)), (
        (b"".decode("utf-8"), b"".decode("utf-8")),
        (b"!!!".decode("utf-8"), b"!!!".decode("utf-8")),
        (b"hello".decode("utf-8"), b"hello".decode("utf-8")),
        (b"hello world".decode("utf-8"), b"hello world".decode("utf-8")),
        (b'\x00test\x00'.decode("utf-8"), b'\x00test\x00'.decode("utf-8")),
        (b'\x00\x00test\x00\x00'.decode("utf-8"), b'\x00\x00test\x00\x00'.decode("utf-8")),
        (b'\xf0\x9f\xa4\x8d\xf0\x9f\xa4\x8e'.decode("utf-8"), b'\xf0\x9f\xa4\x8d\xf0\x9f\xa4\x8e'.decode("utf-8")),
        (
            b'P\xc5\x99\xc3\xadli\xc5\xa1 \xc5\xbelu\xc5\xa5ou\xc4\x8dk\xc3\xbd k\xc5\xaf\xc5\x88 \xc3\xbap\xc4\x9bl \xc4\x8f\xc3\xa1belsk\xc3\xa9 \xc3\xb3dy.'.decode("utf-8"),
            b'P\xc5\x99\xc3\xadli\xc5\xa1 \xc5\xbelu\xc5\xa5ou\xc4\x8dk\xc3\xbd k\xc5\xaf\xc5\x88 \xc3\xbap\xc4\x9bl \xc4\x8f\xc3\xa1belsk\xc3\xa9 \xc3\xb3dy.'.decode("utf-8")
        ),
        (
            b'Pr\xcc\x8ci\xcc\x81lis\xcc\x8c z\xcc\x8clut\xcc\x8couc\xcc\x8cky\xcc\x81 ku\xcc\x8an\xcc\x8c u\xcc\x81pe\xcc\x8cl d\xcc\x8ca\xcc\x81belske\xcc\x81 o\xcc\x81dy.'.decode("utf-8"),
            b'P\xc5\x99\xc3\xadli\xc5\xa1 \xc5\xbelu\xc5\xa5ou\xc4\x8dk\xc3\xbd k\xc5\xaf\xc5\x88 \xc3\xbap\xc4\x9bl \xc4\x8f\xc3\xa1belsk\xc3\xa9 \xc3\xb3dy.'.decode("utf-8")
        ),
        (
            b'\xef\xbd\x81\xef\xbd\x82\xef\xbd\x83\xef\xbc\xa1\xef\xbc\xa2\xef\xbc\xa3'.decode("utf-8"),
            b'\xef\xbd\x81\xef\xbd\x82\xef\xbd\x83\xef\xbc\xa1\xef\xbc\xa2\xef\xbc\xa3'.decode("utf-8")
        ),
        (b'abcABC'.decode("utf-8"), b'abcABC'.decode("utf-8")),
        (
            b'\xc5\xbe\xc3\xa1dn\xc3\xa1 \xc5\x99e\xc5\x99icha \xef\xbd\x81\xef\xbd\x82\xef\xbd\x83\xef\xbc\xa1\xef\xbc\xa2\xef\xbc\xa3'.decode("utf-8"),
            b'\xc5\xbe\xc3\xa1dn\xc3\xa1 \xc5\x99e\xc5\x99icha \xef\xbd\x81\xef\xbd\x82\xef\xbd\x83\xef\xbc\xa1\xef\xbc\xa2\xef\xbc\xa3'.decode("utf-8")
        ),
        (
            b'z\xcc\x8ca\xcc\x81dna\xcc\x81 r\xcc\x8cer\xcc\x8cicha \xef\xbd\x81\xef\xbd\x82\xef\xbd\x83\xef\xbc\xa1\xef\xbc\xa2\xef\xbc\xa3'.decode("utf-8"),
            b'\xc5\xbe\xc3\xa1dn\xc3\xa1 \xc5\x99e\xc5\x99icha \xef\xbd\x81\xef\xbd\x82\xef\xbd\x83\xef\xbc\xa1\xef\xbc\xa2\xef\xbc\xa3'.decode("utf-8")
        ),
        (
            b'\xc5\xbe\xc3\xa1dn\xc3\xa1 \xc5\x99e\xc5\x99icha abcABC'.decode("utf-8"),
            b'\xc5\xbe\xc3\xa1dn\xc3\xa1 \xc5\x99e\xc5\x99icha abcABC'.decode("utf-8")
        ),
        (
            b'z\xcc\x8ca\xcc\x81dna\xcc\x81 r\xcc\x8cer\xcc\x8cicha abcABC'.decode("utf-8"),
            b'\xc5\xbe\xc3\xa1dn\xc3\xa1 \xc5\x99e\xc5\x99icha abcABC'.decode("utf-8")
        ),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringUnicodeNormalizeFilter(normal_form="NFKD"),)), (
        (b"".decode("utf-8"), b"".decode("utf-8")),
        (b"!!!".decode("utf-8"), b"!!!".decode("utf-8")),
        (b"hello".decode("utf-8"), b"hello".decode("utf-8")),
        (b"hello world".decode("utf-8"), b"hello world".decode("utf-8")),
        (b'\x00test\x00'.decode("utf-8"), b'\x00test\x00'.decode("utf-8")),
        (b'\x00\x00test\x00\x00'.decode("utf-8"), b'\x00\x00test\x00\x00'.decode("utf-8")),
        (b'\xf0\x9f\xa4\x8d\xf0\x9f\xa4\x8e'.decode("utf-8"), b'\xf0\x9f\xa4\x8d\xf0\x9f\xa4\x8e'.decode("utf-8")),
        (
            b'P\xc5\x99\xc3\xadli\xc5\xa1 \xc5\xbelu\xc5\xa5ou\xc4\x8dk\xc3\xbd k\xc5\xaf\xc5\x88 \xc3\xbap\xc4\x9bl \xc4\x8f\xc3\xa1belsk\xc3\xa9 \xc3\xb3dy.'.decode("utf-8"),
            b'Pr\xcc\x8ci\xcc\x81lis\xcc\x8c z\xcc\x8clut\xcc\x8couc\xcc\x8cky\xcc\x81 ku\xcc\x8an\xcc\x8c u\xcc\x81pe\xcc\x8cl d\xcc\x8ca\xcc\x81belske\xcc\x81 o\xcc\x81dy.'.decode("utf-8")
        ),
        (
            b'Pr\xcc\x8ci\xcc\x81lis\xcc\x8c z\xcc\x8clut\xcc\x8couc\xcc\x8cky\xcc\x81 ku\xcc\x8an\xcc\x8c u\xcc\x81pe\xcc\x8cl d\xcc\x8ca\xcc\x81belske\xcc\x81 o\xcc\x81dy.'.decode("utf-8"),
            b'Pr\xcc\x8ci\xcc\x81lis\xcc\x8c z\xcc\x8clut\xcc\x8couc\xcc\x8cky\xcc\x81 ku\xcc\x8an\xcc\x8c u\xcc\x81pe\xcc\x8cl d\xcc\x8ca\xcc\x81belske\xcc\x81 o\xcc\x81dy.'.decode("utf-8")
        ),
        (b'\xef\xbd\x81\xef\xbd\x82\xef\xbd\x83\xef\xbc\xa1\xef\xbc\xa2\xef\xbc\xa3'.decode("utf-8"), b'abcABC'.decode("utf-8")),
        (b'abcABC'.decode("utf-8"), b'abcABC'.decode("utf-8")),
        (
            b'\xc5\xbe\xc3\xa1dn\xc3\xa1 \xc5\x99e\xc5\x99icha \xef\xbd\x81\xef\xbd\x82\xef\xbd\x83\xef\xbc\xa1\xef\xbc\xa2\xef\xbc\xa3'.decode("utf-8"),
            b'z\xcc\x8ca\xcc\x81dna\xcc\x81 r\xcc\x8cer\xcc\x8cicha abcABC'.decode("utf-8")
        ),
        (
            b'z\xcc\x8ca\xcc\x81dna\xcc\x81 r\xcc\x8cer\xcc\x8cicha \xef\xbd\x81\xef\xbd\x82\xef\xbd\x83\xef\xbc\xa1\xef\xbc\xa2\xef\xbc\xa3'.decode("utf-8"),
            b'z\xcc\x8ca\xcc\x81dna\xcc\x81 r\xcc\x8cer\xcc\x8cicha abcABC'.decode("utf-8")
        ),
        (
            b'\xc5\xbe\xc3\xa1dn\xc3\xa1 \xc5\x99e\xc5\x99icha abcABC'.decode("utf-8"),
            b'z\xcc\x8ca\xcc\x81dna\xcc\x81 r\xcc\x8cer\xcc\x8cicha abcABC'.decode("utf-8")
        ),
        (
            b'z\xcc\x8ca\xcc\x81dna\xcc\x81 r\xcc\x8cer\xcc\x8cicha abcABC'.decode("utf-8"),
            b'z\xcc\x8ca\xcc\x81dna\xcc\x81 r\xcc\x8cer\xcc\x8cicha abcABC'.decode("utf-8")
        ),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringUnifyNewlinesFilter(replacement_newline="\n"),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("hello world", "hello world"),
        ("hello\r\n\r\nworld", "hello\n\nworld"),
        ("hello\r\rworld", "hello\n\nworld"),
        ("hello\n\nworld", "hello\n\nworld"),
        ("hello\v\fworld", "hello\n\nworld"),
        ("hello\x1c\x1dworld", "hello\n\nworld"),
        ("hello\x1e\x85world", "hello\n\nworld"),
        ("hello\u2028\u2029world", "hello\n\nworld"),
        ("ü§çü§é", "ü§çü§é"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à\r\n", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à\n"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à\n\r", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à\n\n"),
        ("\x00test\x00", "\x00test\x00"),
        ("\x00\x00test\x00\x00", "\x00\x00test\x00\x00"),
        ("\x00\x00test\x00\x00\v\u2028\r\n", "\x00\x00test\x00\x00\n\n\n"),
        ("\u2029 \u2028 \x85 \x1e \x1d \x1c \f \v \r \n", "\n \n \n \n \n \n \n \n \n \n"),
        ("\u2029 \u2028 \x85 \x1e \x1d \x1c \f \v \r \n \r\n", "\n \n \n \n \n \n \n \n \n \n \n"),
        ("\t \b \a \u2029 \u2028 \x85 \x1e \x1d \x1c \f \v \r \n \r\n \uffff \ufffe", "\t \b \a \n \n \n \n \n \n \n \n \n \n \n \uffff \ufffe"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringUnifyNewlinesFilter(replacement_newline="\u2029"),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("hello world", "hello world"),
        ("hello\r\n\r\nworld", "hello\u2029\u2029world"),
        ("hello\r\rworld", "hello\u2029\u2029world"),
        ("hello\n\nworld", "hello\u2029\u2029world"),
        ("hello\v\fworld", "hello\u2029\u2029world"),
        ("hello\x1c\x1dworld", "hello\u2029\u2029world"),
        ("hello\x1e\x85world", "hello\u2029\u2029world"),
        ("hello\u2028\u2029world", "hello\u2029\u2029world"),
        ("ü§çü§é", "ü§çü§é"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à\r\n", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à\u2029"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à\n\r", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à\u2029\u2029"),
        ("\x00test\x00", "\x00test\x00"),
        ("\x00\x00test\x00\x00", "\x00\x00test\x00\x00"),
        ("\x00\x00test\x00\x00\v\u2028\r\n", "\x00\x00test\x00\x00\u2029\u2029\u2029"),
        ("\u2029 \u2028 \x85 \x1e \x1d \x1c \f \v \r \n", "\u2029 \u2029 \u2029 \u2029 \u2029 \u2029 \u2029 \u2029 \u2029 \u2029"),
        ("\u2029 \u2028 \x85 \x1e \x1d \x1c \f \v \r \n \r\n", "\u2029 \u2029 \u2029 \u2029 \u2029 \u2029 \u2029 \u2029 \u2029 \u2029 \u2029"),
        ("\t \b \a \u2029 \u2028 \x85 \x1e \x1d \x1c \f \v \r \n \r\n \uffff \ufffe", "\t \b \a \u2029 \u2029 \u2029 \u2029 \u2029 \u2029 \u2029 \u2029 \u2029 \u2029 \u2029 \uffff \ufffe"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringUnifyNewlinesFilter(replacement_newline="\r\n"),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("hello world", "hello world"),
        ("hello\r\n\r\nworld", "hello\r\n\r\nworld"),
        ("hello\r\rworld", "hello\r\n\r\nworld"),
        ("hello\n\nworld", "hello\r\n\r\nworld"),
        ("hello\v\fworld", "hello\r\n\r\nworld"),
        ("hello\x1c\x1dworld", "hello\r\n\r\nworld"),
        ("hello\x1e\x85world", "hello\r\n\r\nworld"),
        ("hello\u2028\u2029world", "hello\r\n\r\nworld"),
        ("ü§çü§é", "ü§çü§é"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à\r\n", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à\r\n"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à\n\r", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à\r\n\r\n"),
        ("\x00test\x00", "\x00test\x00"),
        ("\x00\x00test\x00\x00", "\x00\x00test\x00\x00"),
        ("\x00\x00test\x00\x00\v\u2028\r\n", "\x00\x00test\x00\x00\r\n\r\n\r\n"),
        ("\u2029 \u2028 \x85 \x1e \x1d \x1c \f \v \r \n", "\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n"),
        ("\u2029 \u2028 \x85 \x1e \x1d \x1c \f \v \r \n \r\n", "\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n"),
        ("\t \b \a \u2029 \u2028 \x85 \x1e \x1d \x1c \f \v \r \n \r\n \uffff \ufffe", "\t \b \a \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \uffff \ufffe"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringUnifyWhitespaceFilter(replacement_whitespace=" "),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("hello", "hello"),
        ("hello world", "hello world"),
        ("hello\tworld", "hello world"),
        ("hello\nworld", "hello world"),
        ("hello\rworld", "hello world"),
        ("hello  world", "hello  world"),
        ("hello\r\nworld", "hello  world"),
        ("hello\n\rworld", "hello  world"),
        ("hello\t\tworld", "hello  world"),
        ("hello\v\fworld", "hello  world"),
        ("hello\x1c\x1dworld", "hello  world"),
        ("hello\x1e\x85world", "hello  world"),
        ("hello\u2028\u2029world", "hello  world"),
        ("ü§çü§é", "ü§çü§é"),
        ("\x00test\x00", "\x00test\x00"),
        ("\x00\x00test\x00\x00", "\x00\x00test\x00\x00"),
        ("test\a\nTEST", "test\a TEST"),
        ("test\b\nTEST", "test\b TEST"),
        ("test\uffff\nTEST", "test\uffff TEST"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à"),
        ("\t\x01≈Ωlu≈•ouƒçk√Ω k≈Ø≈à\r\n", " \x01≈Ωlu≈•ouƒçk√Ω k≈Ø≈à  "),
        ("\t\x01≈Ωlu≈•ouƒçk√Ω k≈Ø≈à\n\r", " \x01≈Ωlu≈•ouƒçk√Ω k≈Ø≈à  "),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringUnifyWhitespaceFilter(replacement_whitespace="\t"),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("hello", "hello"),
        ("hello world", "hello\tworld"),
        ("hello\tworld", "hello\tworld"),
        ("hello\nworld", "hello\tworld"),
        ("hello\rworld", "hello\tworld"),
        ("hello  world", "hello\t\tworld"),
        ("hello\r\nworld", "hello\t\tworld"),
        ("hello\n\rworld", "hello\t\tworld"),
        ("hello\t\tworld", "hello\t\tworld"),
        ("hello\v\fworld", "hello\t\tworld"),
        ("hello\x1c\x1dworld", "hello\t\tworld"),
        ("hello\x1e\x85world", "hello\t\tworld"),
        ("hello\u2028\u2029world", "hello\t\tworld"),
        ("ü§çü§é", "ü§çü§é"),
        ("\x00test\x00", "\x00test\x00"),
        ("\x00\x00test\x00\x00", "\x00\x00test\x00\x00"),
        ("test\a\nTEST", "test\a\tTEST"),
        ("test\b\nTEST", "test\b\tTEST"),
        ("test\uffff\nTEST", "test\uffff\tTEST"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à", "≈Ωlu≈•ouƒçk√Ω\tk≈Ø≈à"),
        ("\t\x01≈Ωlu≈•ouƒçk√Ω k≈Ø≈à\r\n", "\t\x01≈Ωlu≈•ouƒçk√Ω\tk≈Ø≈à\t\t"),
        ("\t\x01≈Ωlu≈•ouƒçk√Ω k≈Ø≈à\n\r", "\t\x01≈Ωlu≈•ouƒçk√Ω\tk≈Ø≈à\t\t"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringUnifyWhitespaceFilter(replacement_whitespace="\n"),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("hello", "hello"),
        ("hello world", "hello\nworld"),
        ("hello\tworld", "hello\nworld"),
        ("hello\nworld", "hello\nworld"),
        ("hello\rworld", "hello\nworld"),
        ("hello  world", "hello\n\nworld"),
        ("hello\r\nworld", "hello\n\nworld"),
        ("hello\n\rworld", "hello\n\nworld"),
        ("hello\t\tworld", "hello\n\nworld"),
        ("hello\v\fworld", "hello\n\nworld"),
        ("hello\x1c\x1dworld", "hello\n\nworld"),
        ("hello\x1e\x85world", "hello\n\nworld"),
        ("hello\u2028\u2029world", "hello\n\nworld"),
        ("ü§çü§é", "ü§çü§é"),
        ("\x00test\x00", "\x00test\x00"),
        ("\x00\x00test\x00\x00", "\x00\x00test\x00\x00"),
        ("test\a\nTEST", "test\a\nTEST"),
        ("test\b\nTEST", "test\b\nTEST"),
        ("test\uffff\nTEST", "test\uffff\nTEST"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à", "≈Ωlu≈•ouƒçk√Ω\nk≈Ø≈à"),
        ("\t\x01≈Ωlu≈•ouƒçk√Ω k≈Ø≈à\r\n", "\n\x01≈Ωlu≈•ouƒçk√Ω\nk≈Ø≈à\n\n"),
        ("\t\x01≈Ωlu≈•ouƒçk√Ω k≈Ø≈à\n\r", "\n\x01≈Ωlu≈•ouƒçk√Ω\nk≈Ø≈à\n\n"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(StringUppercaseFilter(),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("12345\t\r\n\u2028", "12345\t\r\n\u2028"),
        ("ü§çü§é", "ü§çü§é"),
        ("hello", "HELLO"),
        ("Hello", "HELLO"),
        ("HELLO", "HELLO"),
        ("hELLO", "HELLO"),
        ("\x00hello", "\x00HELLO"),
        ("\x00Hello", "\x00HELLO"),
        ("\x00HELLO", "\x00HELLO"),
        ("\x00hELLO", "\x00HELLO"),
        ("hello world", "HELLO WORLD"),
        ("Hello World", "HELLO WORLD"),
        ("HELLO WORLD", "HELLO WORLD"),
        ("hELLO wORLD", "HELLO WORLD"),
        ("≈æ√°dn√°\n\t≈ôe≈ôicha", "≈Ω√ÅDN√Å\n\t≈òE≈òICHA"),
        ("≈Ω√°dn√°\n\t≈òe≈ôicha", "≈Ω√ÅDN√Å\n\t≈òE≈òICHA"),
        ("≈Ω√ÅDN√Å\n\t≈òE≈òICHA", "≈Ω√ÅDN√Å\n\t≈òE≈òICHA"),
        ("≈æ√ÅDN√Å\n\t≈ôE≈òICHA", "≈Ω√ÅDN√Å\n\t≈òE≈òICHA"),
        ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨"),
        (None, "NONE"),
        (True, "TRUE"),
        (False, "FALSE"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(UnixFilesystemPathAddTrailingSlashFilter(),)), (
        ("", "/"),
        ("!!!", "!!!/"),
        ("ü§çü§é", "ü§çü§é/"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à/"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à/", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à/"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à//", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à//"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à///", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à///"),
        ("testdir", "testdir/"),
        ("testdir/", "testdir/"),
        ("testdir//", "testdir//"),
        ("testdir///", "testdir///"),
        ("/home/test/.cache/testdir", "/home/test/.cache/testdir/"),
        ("/home/test/.cache/testdir/", "/home/test/.cache/testdir/"),
        ("/home/test/.cache/testdir//", "/home/test/.cache/testdir//"),
        ("/home/test/.cache/testdir///", "/home/test/.cache/testdir///"),
        ("\x00test\x00", "\x00test\x00/"),  # This doesn't work with UnixFilesystemPathBlueprint!
        ("\x00\x00test\x00\x00", "\x00\x00test\x00\x00/"),  # This doesn't work with UnixFilesystemPathBlueprint!
        (None, "None/"),
        (True, "True/"),
        (False, "False/"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(filters=(UnixFilesystemPathStripTrailingSlashesFilter(),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("ü§çü§é", "ü§çü§é"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à/", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à//", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à///", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à"),
        ("testdir", "testdir"),
        ("testdir/", "testdir"),
        ("testdir//", "testdir"),
        ("testdir///", "testdir"),
        ("/home/test/.cache/testdir", "/home/test/.cache/testdir"),
        ("/home/test/.cache/testdir/", "/home/test/.cache/testdir"),
        ("/home/test/.cache/testdir//", "/home/test/.cache/testdir"),
        ("/home/test/.cache/testdir///", "/home/test/.cache/testdir"),
        ("\x00test\x00", "\x00test\x00"),  # This doesn't work with UnixFilesystemPathBlueprint!
        ("\x00\x00test\x00\x00", "\x00\x00test\x00\x00"),  # This doesn't work with UnixFilesystemPathBlueprint!
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(SequenceIsNotEmptyValidator(negate=False),)), (  
        ("", DataValidationFailedExc),
        (" ", " "),
        ("\n", "\n"),
        ("\x00", "\x00"),
        ("hello", "hello"),
        ("hello world", "hello world"),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à", "≈Ωlu≈•ouƒçk√Ω k≈Ø≈à"),
        ("ü§çü§é", "ü§çü§é"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(SequenceIsNotEmptyValidator(negate=True),)), (  
        ("", ""),
        (" ", DataValidationFailedExc),
        ("\n", DataValidationFailedExc),
        ("\x00", DataValidationFailedExc),
        ("hello", DataValidationFailedExc),
        ("hello world", DataValidationFailedExc),
        ("≈Ωlu≈•ouƒçk√Ω k≈Ø≈à", DataValidationFailedExc),
        ("ü§çü§é", DataValidationFailedExc),
        (None, DataValidationFailedExc),
        (True, DataValidationFailedExc),
        (False, DataValidationFailedExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(SequenceMaximumLengthValidator(5),)), (
        ("", ""),
        ("x", "x"),
        ("keyb", "keyb"),
        ("keybo", "keybo"),
        ("keyboa", DataValidationFailedExc),
        ("keyboard", DataValidationFailedExc),
        ("≈æ", "≈æ"),
        ("≈ælu≈•", "≈ælu≈•"),
        ("≈ælu≈•o", "≈ælu≈•o"),
        ("≈ælu≈•ou", DataValidationFailedExc),
        ("≈ælu≈•ouƒçk√Ω", DataValidationFailedExc),
        ("ü§ç" * 4, "ü§çü§çü§çü§ç"),
        ("ü§ç" * 5, "ü§çü§çü§çü§çü§ç"),
        ("ü§ç" * 6, DataValidationFailedExc),
        ("ü§ç" * 100, DataValidationFailedExc),
        ("x" * 4, "xxxx"),
        ("x" * 5, "xxxxx"),
        ("x" * 6, DataValidationFailedExc),
        ("x" * 100, DataValidationFailedExc),
        (" " * 4, "    "),
        (" " * 5, "     "),
        (" " * 6, DataValidationFailedExc),
        (" " * 100, DataValidationFailedExc),
        ("\x00" * 4, "\x00\x00\x00\x00"),
        ("\x00" * 5, "\x00\x00\x00\x00\x00"),
        ("\x00" * 6, DataValidationFailedExc),
        ("\x00" * 100, DataValidationFailedExc),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(SequenceMinimumLengthValidator(5),)), (
        ("", DataValidationFailedExc),
        ("x", DataValidationFailedExc),
        ("keyb", DataValidationFailedExc),
        ("keybo", "keybo"),
        ("keyboa", "keyboa"),
        ("keyboard", "keyboard"),
        ("≈æ", DataValidationFailedExc),
        ("≈ælu≈•", DataValidationFailedExc),
        ("≈ælu≈•o", "≈ælu≈•o"),
        ("≈ælu≈•ou", "≈ælu≈•ou"),
        ("≈ælu≈•ouƒçk√Ω", "≈ælu≈•ouƒçk√Ω"),
        ("ü§ç" * 4, DataValidationFailedExc),
        ("ü§ç" * 5, "ü§çü§çü§çü§çü§ç"),
        ("ü§ç" * 6, "ü§çü§çü§çü§çü§çü§ç"),
        ("ü§ç" * 100, "ü§ç" * 100),
        ("x" * 4, DataValidationFailedExc),
        ("x" * 5, "xxxxx"),
        ("x" * 6, "xxxxxx"),
        ("x" * 100, "x" * 100),
        (" " * 4, DataValidationFailedExc),
        (" " * 5, "     "),
        (" " * 6, "      "),
        (" " * 100, " " * 100),
        ("\x00" * 4, DataValidationFailedExc),
        ("\x00" * 5, "\x00\x00\x00\x00\x00"),
        ("\x00" * 6, "\x00\x00\x00\x00\x00\x00"),
        ("\x00" * 100, "\x00" * 100),
        (None, DataValidationFailedExc),
        (True, DataValidationFailedExc),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(StringContainsNoControlOrSeparatorCharactersValidator(allowed_characters=" \r\n\t"),)), (
        ("", ""),
        ("hello", "hello"),
        ("hello world", "hello world"),
        ("k≈Ø≈à", "k≈Ø≈à"),
        ("≈ælu≈•ouƒçk√Ω k≈Ø≈à", "≈ælu≈•ouƒçk√Ω k≈Ø≈à"),
        ("≈ælu≈•ouƒçk√Ω k≈Ø≈à\n", "≈ælu≈•ouƒçk√Ω k≈Ø≈à\n"),
        ("≈ælu≈•ouƒçk√Ω k≈Ø≈à\x00", DataValidationFailedExc),
        ("\t\n\r ", "\t\n\r "),
        ("\x00", DataValidationFailedExc),
        ("\x00\x01", DataValidationFailedExc),
        ("\r\n\f", DataValidationFailedExc),
        ("ü§çü§é", "ü§çü§é"),
        ("ü§ç ü§é", "ü§ç ü§é"),
        ("ü§ç\x00ü§é", DataValidationFailedExc),
        ("ü§ç\nü§é", "ü§ç\nü§é"),
        ("test", "test"),
        ("test ", "test "),
        ("test\u00a0", DataValidationFailedExc),
        ("test\u3000", DataValidationFailedExc),
        ("test\u2028", DataValidationFailedExc),
        ("test\u2029", DataValidationFailedExc),
        ("test\x00", DataValidationFailedExc),
        ("test\x01", DataValidationFailedExc),
        ("test\x08", DataValidationFailedExc),
        ("test\x14", DataValidationFailedExc),
        ("test\x85", DataValidationFailedExc),
        ("test\x1d", DataValidationFailedExc),
        ("test\u009e", DataValidationFailedExc),
        ("test\u0092", DataValidationFailedExc),
        ("test\u00ad", DataValidationFailedExc),
        ("test\u200f", DataValidationFailedExc),
        ("test\u2069", DataValidationFailedExc),
        ("test\uffff", DataValidationFailedExc),
        ("test\ufffe", DataValidationFailedExc),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(StringContainsNoControlOrSeparatorCharactersValidator(allowed_characters=""),)), (
        ("", ""),
        ("hello", "hello"),
        ("hello world", DataValidationFailedExc),
        ("k≈Ø≈à", "k≈Ø≈à"),
        ("≈ælu≈•ouƒçk√Ω k≈Ø≈à", DataValidationFailedExc),
        ("≈ælu≈•ouƒçk√Ω k≈Ø≈à\n", DataValidationFailedExc),
        ("≈ælu≈•ouƒçk√Ω k≈Ø≈à\x00", DataValidationFailedExc),
        ("\t\n\r ", DataValidationFailedExc),
        ("\x00", DataValidationFailedExc),
        ("\x00\x01", DataValidationFailedExc),
        ("\r\n\f", DataValidationFailedExc),
        ("ü§çü§é", "ü§çü§é"),
        ("ü§ç ü§é", DataValidationFailedExc),
        ("ü§ç\x00ü§é", DataValidationFailedExc),
        ("ü§ç\nü§é", DataValidationFailedExc),
        ("test", "test"),
        ("test ", DataValidationFailedExc),
        ("test\u00a0", DataValidationFailedExc),
        ("test\u3000", DataValidationFailedExc),
        ("test\u2028", DataValidationFailedExc),
        ("test\u2029", DataValidationFailedExc),
        ("test\x00", DataValidationFailedExc),
        ("test\x01", DataValidationFailedExc),
        ("test\x08", DataValidationFailedExc),
        ("test\x14", DataValidationFailedExc),
        ("test\x85", DataValidationFailedExc),
        ("test\x1d", DataValidationFailedExc),
        ("test\u009e", DataValidationFailedExc),
        ("test\u0092", DataValidationFailedExc),
        ("test\u00ad", DataValidationFailedExc),
        ("test\u200f", DataValidationFailedExc),
        ("test\u2069", DataValidationFailedExc),
        ("test\uffff", DataValidationFailedExc),
        ("test\ufffe", DataValidationFailedExc),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(StringContainsNoControlOrSeparatorCharactersValidator(allowed_characters="\x00 "),)), (
        ("", ""),
        ("hello", "hello"),
        ("hello world", "hello world"),
        ("k≈Ø≈à", "k≈Ø≈à"),
        ("≈ælu≈•ouƒçk√Ω k≈Ø≈à", "≈ælu≈•ouƒçk√Ω k≈Ø≈à"),
        ("≈ælu≈•ouƒçk√Ω k≈Ø≈à\n", DataValidationFailedExc),
        ("≈ælu≈•ouƒçk√Ω k≈Ø≈à\x00", "≈ælu≈•ouƒçk√Ω k≈Ø≈à\x00"),
        ("\t\n\r ", DataValidationFailedExc),
        ("\x00", "\x00"),
        ("\x00\x01", DataValidationFailedExc),
        ("\r\n\f", DataValidationFailedExc),
        ("ü§çü§é", "ü§çü§é"),
        ("ü§ç ü§é", "ü§ç ü§é"),
        ("ü§ç\x00ü§é", "ü§ç\x00ü§é"),
        ("ü§ç\nü§é", DataValidationFailedExc),
        ("test", "test"),
        ("test ", "test "),
        ("test\u00a0", DataValidationFailedExc),
        ("test\u3000", DataValidationFailedExc),
        ("test\u2028", DataValidationFailedExc),
        ("test\u2029", DataValidationFailedExc),
        ("test\x00", "test\x00"),
        ("test\x01", DataValidationFailedExc),
        ("test\x08", DataValidationFailedExc),
        ("test\x14", DataValidationFailedExc),
        ("test\x85", DataValidationFailedExc),
        ("test\x1d", DataValidationFailedExc),
        ("test\u009e", DataValidationFailedExc),
        ("test\u0092", DataValidationFailedExc),
        ("test\u00ad", DataValidationFailedExc),
        ("test\u200f", DataValidationFailedExc),
        ("test\u2069", DataValidationFailedExc),
        ("test\uffff", DataValidationFailedExc),
        ("test\ufffe", DataValidationFailedExc),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(StringContainsSubstringValidator("ll", perform_check_case_sensitively=True, negate=False),)), (
        ("", DataValidationFailedExc),
        ("!!!", DataValidationFailedExc),
        ("\x00test\x00", DataValidationFailedExc),
        ("\x00\x00test\x00\x00", DataValidationFailedExc),
        ("test\r\n", DataValidationFailedExc),
        ("Test\r\n", DataValidationFailedExc),
        ("TEST\r\n", DataValidationFailedExc),
        ("tEST\r\n", DataValidationFailedExc),
        ("hello", "hello"),
        ("Hello", "Hello"),
        ("HELLO", DataValidationFailedExc),
        ("hELLO", DataValidationFailedExc),
        ("HeLlo", DataValidationFailedExc),
        ("HelLo", DataValidationFailedExc),
        ("hello world\t ", "hello world\t "),
        ("Hello World\t ", "Hello World\t "),
        ("HELLO WORLD\t ", DataValidationFailedExc),
        ("hELLO wORLD\t ", DataValidationFailedExc),
        ("HeLlo WorlD\t ", DataValidationFailedExc),
        ("HelLo WorLd\t ", DataValidationFailedExc),
        ("≈ælu≈•ouƒçk√Ω k≈Ø≈à", DataValidationFailedExc),
        ("≈Ωlu≈•ouƒçk√Ω K≈Ø≈à", DataValidationFailedExc),
        ("≈ΩLU≈§OUƒåK√ù K≈Æ≈á", DataValidationFailedExc),
        ("≈æLU≈§OUƒåK√ù k≈Æ≈á", DataValidationFailedExc),
        ("ü§çü§é", DataValidationFailedExc),
        ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", DataValidationFailedExc),
        (None, DataValidationFailedExc),
        (True, DataValidationFailedExc),
        (False, DataValidationFailedExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(StringContainsSubstringValidator("ll", perform_check_case_sensitively=False, negate=False),)), (
        ("", DataValidationFailedExc),
        ("!!!", DataValidationFailedExc),
        ("\x00test\x00", DataValidationFailedExc),
        ("\x00\x00test\x00\x00", DataValidationFailedExc),
        ("test\r\n", DataValidationFailedExc),
        ("Test\r\n", DataValidationFailedExc),
        ("TEST\r\n", DataValidationFailedExc),
        ("tEST\r\n", DataValidationFailedExc),
        ("hello", "hello"),
        ("Hello", "Hello"),
        ("HELLO", "HELLO"),
        ("hELLO", "hELLO"),
        ("HeLlo", "HeLlo"),
        ("HelLo", "HelLo"),
        ("hello world\t ", "hello world\t "),
        ("Hello World\t ", "Hello World\t "),
        ("HELLO WORLD\t ", "HELLO WORLD\t "),
        ("hELLO wORLD\t ", "hELLO wORLD\t "),
        ("HeLlo WorlD\t ", "HeLlo WorlD\t "),
        ("HelLo WorLd\t ", "HelLo WorLd\t "),
        ("≈ælu≈•ouƒçk√Ω k≈Ø≈à", DataValidationFailedExc),
        ("≈Ωlu≈•ouƒçk√Ω K≈Ø≈à", DataValidationFailedExc),
        ("≈ΩLU≈§OUƒåK√ù K≈Æ≈á", DataValidationFailedExc),
        ("≈æLU≈§OUƒåK√ù k≈Æ≈á", DataValidationFailedExc),
        ("ü§çü§é", DataValidationFailedExc),
        ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", DataValidationFailedExc),
        (None, DataValidationFailedExc),
        (True, DataValidationFailedExc),
        (False, DataValidationFailedExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(StringContainsSubstringValidator("ll", perform_check_case_sensitively=True, negate=True),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("\x00test\x00", "\x00test\x00"),
        ("\x00\x00test\x00\x00", "\x00\x00test\x00\x00"),
        ("test\r\n", "test\r\n"),
        ("Test\r\n", "Test\r\n"),
        ("TEST\r\n", "TEST\r\n"),
        ("tEST\r\n", "tEST\r\n"),
        ("hello", DataValidationFailedExc),
        ("Hello", DataValidationFailedExc),
        ("HELLO", "HELLO"),
        ("hELLO", "hELLO"),
        ("HeLlo", "HeLlo"),
        ("HelLo", "HelLo"),
        ("hello world\t ", DataValidationFailedExc),
        ("Hello World\t ", DataValidationFailedExc),
        ("HELLO WORLD\t ", "HELLO WORLD\t "),
        ("hELLO wORLD\t ", "hELLO wORLD\t "),
        ("HeLlo WorlD\t ", "HeLlo WorlD\t "),
        ("HelLo WorLd\t ", "HelLo WorLd\t "),
        ("≈ælu≈•ouƒçk√Ω k≈Ø≈à", "≈ælu≈•ouƒçk√Ω k≈Ø≈à"),
        ("≈Ωlu≈•ouƒçk√Ω K≈Ø≈à", "≈Ωlu≈•ouƒçk√Ω K≈Ø≈à"),
        ("≈ΩLU≈§OUƒåK√ù K≈Æ≈á", "≈ΩLU≈§OUƒåK√ù K≈Æ≈á"),
        ("≈æLU≈§OUƒåK√ù k≈Æ≈á", "≈æLU≈§OUƒåK√ù k≈Æ≈á"),
        ("ü§çü§é", "ü§çü§é"),
        ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(StringContainsSubstringValidator("ll", perform_check_case_sensitively=False, negate=True),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("\x00test\x00", "\x00test\x00"),
        ("\x00\x00test\x00\x00", "\x00\x00test\x00\x00"),
        ("test\r\n", "test\r\n"),
        ("Test\r\n", "Test\r\n"),
        ("TEST\r\n", "TEST\r\n"),
        ("tEST\r\n", "tEST\r\n"),
        ("hello", DataValidationFailedExc),
        ("Hello", DataValidationFailedExc),
        ("HELLO", DataValidationFailedExc),
        ("hELLO", DataValidationFailedExc),
        ("HeLlo", DataValidationFailedExc),
        ("HelLo", DataValidationFailedExc),
        ("hello world\t ", DataValidationFailedExc),
        ("Hello World\t ", DataValidationFailedExc),
        ("HELLO WORLD\t ", DataValidationFailedExc),
        ("hELLO wORLD\t ", DataValidationFailedExc),
        ("HeLlo WorlD\t ", DataValidationFailedExc),
        ("HelLo WorLd\t ", DataValidationFailedExc),
        ("≈ælu≈•ouƒçk√Ω k≈Ø≈à", "≈ælu≈•ouƒçk√Ω k≈Ø≈à"),
        ("≈Ωlu≈•ouƒçk√Ω K≈Ø≈à", "≈Ωlu≈•ouƒçk√Ω K≈Ø≈à"),
        ("≈ΩLU≈§OUƒåK√ù K≈Æ≈á", "≈ΩLU≈§OUƒåK√ù K≈Æ≈á"),
        ("≈æLU≈§OUƒåK√ù k≈Æ≈á", "≈æLU≈§OUƒåK√ù k≈Æ≈á"),
        ("ü§çü§é", "ü§çü§é"),
        ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(StringIsOnlySingleCharacterValidator(),)), (
        ("", DataValidationFailedExc),
        ("!", "!"),
        ("t", "t"),
        ("≈ô", "≈ô"),
        ("–∂", "–∂"),
        ("ü§ç", "ü§ç"),
        ("\x00", "\x00"),
        ("\u2028", "\u2028"),
        ("\uffff", "\uffff"),
        ("!!", DataValidationFailedExc),
        ("tt", DataValidationFailedExc),
        ("≈ô≈ô", DataValidationFailedExc),
        ("–∂–∂", DataValidationFailedExc),
        ("ü§çü§ç", DataValidationFailedExc),
        ("\x00\x00", DataValidationFailedExc),
        ("\u2028\u2028", DataValidationFailedExc),
        ("\uffff\uffff", DataValidationFailedExc),
        ("!" * 50, DataValidationFailedExc),
        ("t" * 50, DataValidationFailedExc),
        ("≈ô" * 50, DataValidationFailedExc),
        ("–∂" * 50, DataValidationFailedExc),
        ("ü§ç" * 50, DataValidationFailedExc),
        ("\x00" * 50, DataValidationFailedExc),
        ("\u2028" * 50, DataValidationFailedExc),
        ("\uffff" * 50, DataValidationFailedExc),
        (None, DataValidationFailedExc),
        (True, DataValidationFailedExc),
        (False, DataValidationFailedExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(StringIsOnlySingleLineValidator(),)), (
        ("", ""),
        ("123456", "123456"),
        ("!!!", "!!!"),
        (" ", " "),
        ("\t", "\t"),
        ("\uffff", "\uffff"),
        ("\x00", "\x00"),
        ("hello", "hello"),
        ("hello world", "hello world"),
        ("≈ælu≈•ouƒçk√Ω k≈Ø≈à", "≈ælu≈•ouƒçk√Ω k≈Ø≈à"),
        ("ü§çü§é", "ü§çü§é"),
        ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"),
        ("Nech≈• ji≈æ h≈ô√≠≈°n√© saxofony ƒè√°bl≈Ø rozezvuƒç√≠ s√≠≈à √∫dƒõsn√Ωmi t√≥ny waltzu, tanga a quickstepu.", "Nech≈• ji≈æ h≈ô√≠≈°n√© saxofony ƒè√°bl≈Ø rozezvuƒç√≠ s√≠≈à √∫dƒõsn√Ωmi t√≥ny waltzu, tanga a quickstepu."),
        ("\x00test\x00", "\x00test\x00"),
        ("\x00\x00test\x00\x00", "\x00\x00test\x00\x00"),
        (" \n", DataValidationFailedExc),
        ("\t\n", DataValidationFailedExc),
        ("\uffff\n", DataValidationFailedExc),
        ("\x00\n", DataValidationFailedExc),
        ("hello\n", DataValidationFailedExc),
        ("hello world\n", DataValidationFailedExc),
        ("≈ælu≈•ouƒçk√Ω k≈Ø≈à\n", DataValidationFailedExc),
        ("ü§çü§é\n", DataValidationFailedExc),
        ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n", DataValidationFailedExc),
        ("Nech≈• ji≈æ h≈ô√≠≈°n√© saxofony ƒè√°bl≈Ø rozezvuƒç√≠ s√≠≈à √∫dƒõsn√Ωmi t√≥ny waltzu, tanga a quickstepu.\n", DataValidationFailedExc),
        ("\x00test\x00\n", DataValidationFailedExc),
        ("\x00\x00test\x00\x00\n", DataValidationFailedExc),
        (" test", " test"),
        ("\ttest", "\ttest"),
        ("\atest", "\atest"),
        ("\btest", "\btest"),
        ("\x00test", "\x00test"),
        ("\x01test", "\x01test"),
        ("\r\ntest", DataValidationFailedExc),
        ("\n\rtest", DataValidationFailedExc),
        ("\ntest", DataValidationFailedExc),
        ("\rtest", DataValidationFailedExc),
        ("\n\ntest", DataValidationFailedExc),
        ("\r\rtest", DataValidationFailedExc),
        ("\vtest", DataValidationFailedExc),
        ("\ftest", DataValidationFailedExc),
        ("\x1ctest", DataValidationFailedExc),
        ("\x1dtest", DataValidationFailedExc),
        ("\x1etest", DataValidationFailedExc),
        ("\x85test", DataValidationFailedExc),
        ("\u2028test", DataValidationFailedExc),
        ("\u2029test", DataValidationFailedExc),
        ("\ufffetest", "\ufffetest"),
        ("\ufffftest", "\ufffftest"),
        ("\n", DataValidationFailedExc),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(StringIsOnlySingleWordValidator(),)), (
        ("", DataValidationFailedExc),
        ("!!!", DataValidationFailedExc),
        ("123456", "123456"),
        ("ü§çü§é", DataValidationFailedExc),
        ("hello123", "hello123"),
        ("hello_123", "hello_123"),
        ("hello-123", DataValidationFailedExc),
        ("hello's", DataValidationFailedExc),
        ("hello", "hello"),
        ("HELLO", "HELLO"),
        ("≈ælu≈•ouƒçk√Ω", "≈ælu≈•ouƒçk√Ω"),
        ("≈ΩLU≈§OUƒåK√ù", "≈ΩLU≈§OUƒåK√ù"),
        ("–î–æ–±—Ä–æ", "–î–æ–±—Ä–æ"),
        ("hello world", DataValidationFailedExc),
        ("HELLO WORLD", DataValidationFailedExc),
        ("≈ælu≈•ouƒçk√Ω k≈Ø≈à", DataValidationFailedExc),
        ("≈ΩLU≈§OUƒåK√ù K≈Æ≈á", DataValidationFailedExc),
        ("–î–æ–±—Ä–æ –î–æ–±—Ä–æ", DataValidationFailedExc),
        ("hello.", DataValidationFailedExc),
        ("HELLO.", DataValidationFailedExc),
        ("≈ælu≈•ouƒçk√Ω.", DataValidationFailedExc),
        ("≈ΩLU≈§OUƒåK√ù.", DataValidationFailedExc),
        ("–î–æ–±—Ä–æ.", DataValidationFailedExc),
        ("hello?", DataValidationFailedExc),
        ("HELLO?", DataValidationFailedExc),
        ("≈ælu≈•ouƒçk√Ω?", DataValidationFailedExc),
        ("≈ΩLU≈§OUƒåK√ù?", DataValidationFailedExc),
        ("–î–æ–±—Ä–æ?", DataValidationFailedExc),
        ("hello\n", DataValidationFailedExc),
        ("HELLO\n", DataValidationFailedExc),
        ("≈ælu≈•ouƒçk√Ω\n", DataValidationFailedExc),
        ("≈ΩLU≈§OUƒåK√ù\n", DataValidationFailedExc),
        ("–î–æ–±—Ä–æ\n", DataValidationFailedExc),
        ("hello\t", DataValidationFailedExc),
        ("HELLO\t", DataValidationFailedExc),
        ("≈ælu≈•ouƒçk√Ω\t", DataValidationFailedExc),
        ("≈ΩLU≈§OUƒåK√ù\t", DataValidationFailedExc),
        ("–î–æ–±—Ä–æ\t", DataValidationFailedExc),
        ("hello\x00", DataValidationFailedExc),
        ("HELLO\x00", DataValidationFailedExc),
        ("≈ælu≈•ouƒçk√Ω\x00", DataValidationFailedExc),
        ("≈ΩLU≈§OUƒåK√ù\x00", DataValidationFailedExc),
        ("–î–æ–±—Ä–æ\x00", DataValidationFailedExc),
        ("hello\uffff", DataValidationFailedExc),
        ("HELLO\uffff", DataValidationFailedExc),
        ("≈ælu≈•ouƒçk√Ω\uffff", DataValidationFailedExc),
        ("≈ΩLU≈§OUƒåK√ù\uffff", DataValidationFailedExc),
        ("–î–æ–±—Ä–æ\uffff", DataValidationFailedExc),
        ("x", "x"),
        ("xxxxx", "xxxxx"),
        ("x" * 50, "x" * 50),
        ("≈ò", "≈ò"),
        ("≈ò≈ò≈ò≈ò≈ò", "≈ò≈ò≈ò≈ò≈ò"),
        ("≈ò" * 50, "≈ò" * 50),
        (" ", DataValidationFailedExc),
        ("\n", DataValidationFailedExc),
        ("\x00", DataValidationFailedExc),
        ("testtest", "testtest"),
        ("test.test", DataValidationFailedExc),
        ("test,test", DataValidationFailedExc),
        ("test;test", DataValidationFailedExc),
        ("test=test", DataValidationFailedExc),
        ("test+test", DataValidationFailedExc),
        ("test%test", DataValidationFailedExc),
        ("test(test", DataValidationFailedExc),
        ("test[test", DataValidationFailedExc),
        ("test{test", DataValidationFailedExc),
        ("test test", DataValidationFailedExc),
        ("test\ntest", DataValidationFailedExc),
        ("test\x00test", DataValidationFailedExc),
        (123, "123"),
        (123.0, DataValidationFailedExc),
        (123.456, DataValidationFailedExc),
        (urllib.parse.urlparse("https://www.google.com/test?abc=def#f"), DataValidationFailedExc),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(StringMatchesRegexValidator(r'^[a-z]+\Z', regex_compile_flags=0, negate=False),)), (
        ("", DataValidationFailedExc),
        ("!!!", DataValidationFailedExc),
        ("12345", DataValidationFailedExc),
        ("hello", "hello"),
        ("HELLO", DataValidationFailedExc),
        ("Hello", DataValidationFailedExc),
        ("hELLO", DataValidationFailedExc),
        ("hello ", DataValidationFailedExc),
        ("hello\t", DataValidationFailedExc),
        ("hello\n", DataValidationFailedExc),
        ("hello\v", DataValidationFailedExc),
        ("hello\x1c", DataValidationFailedExc),
        ("hello\x00", DataValidationFailedExc),
        ("hello\uffff", DataValidationFailedExc),
        ("test", "test"),
        ("TEST", DataValidationFailedExc),
        ("Test", DataValidationFailedExc),
        ("tEST", DataValidationFailedExc),
        ("hello world", DataValidationFailedExc),
        ("HELLO WORLD", DataValidationFailedExc),
        ("hello.", DataValidationFailedExc),
        ("HELLO.", DataValidationFailedExc),
        ("abc", "abc"),
        ("ABC", DataValidationFailedExc),
        ("_abc", DataValidationFailedExc),
        ("_ABC", DataValidationFailedExc),
        ("≈ôe≈ôicha", DataValidationFailedExc),
        ("≈òE≈òICHA", DataValidationFailedExc),
        ("–î–æ–±—Ä–æ", DataValidationFailedExc),
        ("ü§çü§é", DataValidationFailedExc),
        ("t" * 20, "t" * 20),
        ("T" * 20, DataValidationFailedExc),
        (" ", DataValidationFailedExc),
        ("\n", DataValidationFailedExc),
        (123, DataValidationFailedExc),
        (123.456, DataValidationFailedExc),
        (float("inf"), "inf"),
        (float("-inf"), DataValidationFailedExc),
        (float("nan"), "nan"),
        (None, DataValidationFailedExc),
        (True, DataValidationFailedExc),
        (False, DataValidationFailedExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(StringMatchesRegexValidator(r'^[a-z]+\Z', regex_compile_flags=re.IGNORECASE, negate=False),)), (
        ("", DataValidationFailedExc),
        ("!!!", DataValidationFailedExc),
        ("12345", DataValidationFailedExc),
        ("hello", "hello"),
        ("HELLO", "HELLO"),
        ("Hello", "Hello"),
        ("hELLO", "hELLO"),
        ("hello ", DataValidationFailedExc),
        ("hello\t", DataValidationFailedExc),
        ("hello\n", DataValidationFailedExc),
        ("hello\v", DataValidationFailedExc),
        ("hello\x1c", DataValidationFailedExc),
        ("hello\x00", DataValidationFailedExc),
        ("hello\uffff", DataValidationFailedExc),
        ("test", "test"),
        ("TEST", "TEST"),
        ("Test", "Test"),
        ("tEST", "tEST"),
        ("hello world", DataValidationFailedExc),
        ("HELLO WORLD", DataValidationFailedExc),
        ("hello.", DataValidationFailedExc),
        ("HELLO.", DataValidationFailedExc),
        ("abc", "abc"),
        ("ABC", "ABC"),
        ("_abc", DataValidationFailedExc),
        ("_ABC", DataValidationFailedExc),
        ("≈ôe≈ôicha", DataValidationFailedExc),
        ("≈òE≈òICHA", DataValidationFailedExc),
        ("–î–æ–±—Ä–æ", DataValidationFailedExc),
        ("ü§çü§é", DataValidationFailedExc),
        ("t" * 20, "t" * 20),
        ("T" * 20, "T" * 20),
        (" ", DataValidationFailedExc),
        ("\n", DataValidationFailedExc),
        (123, DataValidationFailedExc),
        (123.456, DataValidationFailedExc),
        (float("inf"), "inf"),
        (float("-inf"), DataValidationFailedExc),
        (float("nan"), "nan"),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(StringMatchesRegexValidator(r'^[a-z]+\Z', regex_compile_flags=0, negate=True),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("12345", "12345"),
        ("hello", DataValidationFailedExc),
        ("HELLO", "HELLO"),
        ("Hello", "Hello"),
        ("hELLO", "hELLO"),
        ("hello ", "hello "),
        ("hello\t", "hello\t"),
        ("hello\n", "hello\n"),
        ("hello\v", "hello\v"),
        ("hello\x1c", "hello\x1c"),
        ("hello\x00", "hello\x00"),
        ("hello\uffff", "hello\uffff"),
        ("test", DataValidationFailedExc),
        ("TEST", "TEST"),
        ("Test", "Test"),
        ("tEST", "tEST"),
        ("hello world", "hello world"),
        ("HELLO WORLD", "HELLO WORLD"),
        ("hello.", "hello."),
        ("HELLO.", "HELLO."),
        ("abc", DataValidationFailedExc),
        ("ABC", "ABC"),
        ("_abc", "_abc"),
        ("_ABC", "_ABC"),
        ("≈ôe≈ôicha", "≈ôe≈ôicha"),
        ("≈òE≈òICHA", "≈òE≈òICHA"),
        ("–î–æ–±—Ä–æ", "–î–æ–±—Ä–æ"),
        ("ü§çü§é", "ü§çü§é"),
        ("t" * 20, DataValidationFailedExc),
        ("T" * 20, "T" * 20),
        (" ", " "),
        ("\n", "\n"),
        (123, "123"),
        (123.456, "123.456"),
        (float("inf"), DataValidationFailedExc),
        (float("-inf"), "-inf"),
        (float("nan"), DataValidationFailedExc),
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(StringMatchesRegexValidator(r'^[a-z]+\Z', regex_compile_flags=re.IGNORECASE, negate=True),)), (
        ("", ""),
        ("!!!", "!!!"),
        ("12345", "12345"),
        ("hello", DataValidationFailedExc),
        ("HELLO", DataValidationFailedExc),
        ("Hello", DataValidationFailedExc),
        ("hELLO", DataValidationFailedExc),
        ("hello ", "hello "),
        ("hello\t", "hello\t"),
        ("hello\n", "hello\n"),
        ("hello\v", "hello\v"),
        ("hello\x1c", "hello\x1c"),
        ("hello\x00", "hello\x00"),
        ("hello\uffff", "hello\uffff"),
        ("test", DataValidationFailedExc),
        ("TEST", DataValidationFailedExc),
        ("Test", DataValidationFailedExc),
        ("tEST", DataValidationFailedExc),
        ("hello world", "hello world"),
        ("HELLO WORLD", "HELLO WORLD"),
        ("hello.", "hello."),
        ("HELLO.", "HELLO."),
        ("abc", DataValidationFailedExc),
        ("ABC", DataValidationFailedExc),
        ("_abc", "_abc"),
        ("_ABC", "_ABC"),
        ("≈ôe≈ôicha", "≈ôe≈ôicha"),
        ("≈òE≈òICHA", "≈òE≈òICHA"),
        ("–î–æ–±—Ä–æ", "–î–æ–±—Ä–æ"),
        ("ü§çü§é", "ü§çü§é"),
        ("t" * 20, DataValidationFailedExc),
        ("T" * 20, DataValidationFailedExc),
        (" ", " "),
        ("\n", "\n"),
        (123, "123"),
        (123.456, "123.456"),
        (float("inf"), DataValidationFailedExc),
        (float("-inf"), "-inf"),
        (float("nan"), DataValidationFailedExc),
        (None, DataValidationFailedExc),
        (True, DataValidationFailedExc),
        (False, DataValidationFailedExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(UnixFilesystemPathContainsOnlyFilenameValidator(),)), (
        ("", ""),  # This doesn't work with UnixFilesystemPathBlueprint!
        ("!!!", "!!!"),
        ("12345", "12345"),
        ("test", "test"),
        ("ü§çü§é", "ü§çü§é"),
        ("test.txt", "test.txt"),
        ("TEST.txt", "TEST.txt"),
        ("testdir", "testdir"),
        ("testdir/", DataValidationFailedExc),
        ("testdir//", DataValidationFailedExc),
        ("testdir///", DataValidationFailedExc),
        ("≈ôe≈ôicha", "≈ôe≈ôicha"),
        ("≈ôe≈ôicha/", DataValidationFailedExc),
        ("hello world", "hello world"),
        ("hello world/", DataValidationFailedExc),
        ("P≈ô√≠li≈° ≈ælu≈•ouƒçk√Ω k≈Ø≈à.txt", "P≈ô√≠li≈° ≈ælu≈•ouƒçk√Ω k≈Ø≈à.txt"),
        ("P≈ô√≠li≈° ≈ælu≈•ouƒçk√Ω k≈Ø≈à.txt/", DataValidationFailedExc),
        ("/", DataValidationFailedExc),
        ("/home", DataValidationFailedExc),
        ("/home/", DataValidationFailedExc),
        ("/home/test", DataValidationFailedExc),
        ("/home/test/", DataValidationFailedExc),
        ("/home/test/file.txt", DataValidationFailedExc),
        (" / ", DataValidationFailedExc),
        (" /home ", DataValidationFailedExc),
        ("somedir", "somedir"),
        ("somedir/", DataValidationFailedExc),
        ("somedir/somefile", DataValidationFailedExc),
        ("somedir/somefile.txt", DataValidationFailedExc),
        (" somedir ", " somedir "),
        (" somedir/ ", DataValidationFailedExc),
        (" ", " "),
        ("\t", "\t"),
        ("\n", "\n"),
        ("\uffff", "\uffff"),
        ("\x00", "\x00"),  # This doesn't work with UnixFilesystemPathBlueprint!
        ("\x00test\x00", "\x00test\x00"),  # This doesn't work with UnixFilesystemPathBlueprint!
        ("\x00\x00test\x00\x00", "\x00\x00test\x00\x00"),  # This doesn't work with UnixFilesystemPathBlueprint!
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(UnixFilesystemPathIsAbsoluteValidator(),)), (
        ("", DataValidationFailedExc),  # This doesn't work with UnixFilesystemPathBlueprint!
        ("12345", DataValidationFailedExc),
        ("!!!", DataValidationFailedExc),
        ("ü§çü§é", DataValidationFailedExc),
        ("/", "/"),
        ("/12345", "/12345"),
        ("/!!!", "/!!!"),
        ("/ü§çü§é", "/ü§çü§é"),
        ("test", DataValidationFailedExc),
        ("test.txt", DataValidationFailedExc),
        ("somefile.txt", DataValidationFailedExc),
        ("somedir/test.txt", DataValidationFailedExc),
        ("somedir/somefile.txt", DataValidationFailedExc),
        ("somedir/", DataValidationFailedExc),
        ("somedir/testdir", DataValidationFailedExc),
        ("somedir/testdir/", DataValidationFailedExc),
        ("/home", "/home"),
        ("/home/", "/home/"),
        ("/home/test/Downloads", "/home/test/Downloads"),
        ("/home/test/Downloads/", "/home/test/Downloads/"),
        ("/home/test/Downloads/test", "/home/test/Downloads/test"),
        ("/home/test/Downloads/test.txt", "/home/test/Downloads/test.txt"),
        ("/home/test/Downloads/helloworld.jpg", "/home/test/Downloads/helloworld.jpg"),
        (" ", DataValidationFailedExc),
        ("\t", DataValidationFailedExc),
        ("\n", DataValidationFailedExc),
        ("\uffff", DataValidationFailedExc),
        ("\x00", DataValidationFailedExc),  # This doesn't work with UnixFilesystemPathBlueprint!
        ("\x00test\x00", DataValidationFailedExc),  # This doesn't work with UnixFilesystemPathBlueprint!
        ("\x00\x00test\x00\x00", DataValidationFailedExc),  # This doesn't work with UnixFilesystemPathBlueprint!
        (None, DataValidationFailedExc),
        (True, DataValidationFailedExc),
        (False, DataValidationFailedExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(validators=(UnixFilesystemPathIsRelativeValidator(),)), (
        ("", ""),  # This doesn't work with UnixFilesystemPathBlueprint!
        ("12345", "12345"),
        ("!!!", "!!!"),
        ("ü§çü§é", "ü§çü§é"),
        ("/", DataValidationFailedExc),
        ("/12345", DataValidationFailedExc),
        ("/!!!", DataValidationFailedExc),
        ("/ü§çü§é", DataValidationFailedExc),
        ("test", "test"),
        ("test.txt", "test.txt"),
        ("somefile.txt", "somefile.txt"),
        ("somedir/test.txt", "somedir/test.txt"),
        ("somedir/somefile.txt", "somedir/somefile.txt"),
        ("somedir/", "somedir/"),
        ("somedir/testdir", "somedir/testdir"),
        ("somedir/testdir/", "somedir/testdir/"),
        ("/home", DataValidationFailedExc),
        ("/home/", DataValidationFailedExc),
        ("/home/test/Downloads", DataValidationFailedExc),
        ("/home/test/Downloads/", DataValidationFailedExc),
        ("/home/test/Downloads/test", DataValidationFailedExc),
        ("/home/test/Downloads/test.txt", DataValidationFailedExc),
        ("/home/test/Downloads/helloworld.jpg", DataValidationFailedExc),
        (" ", " "),
        ("\t", "\t"),
        ("\n", "\n"),
        ("\uffff", "\uffff"),
        ("\x00", "\x00"),  # This doesn't work with UnixFilesystemPathBlueprint!
        ("\x00test\x00", "\x00test\x00"),  # This doesn't work with UnixFilesystemPathBlueprint!
        ("\x00\x00test\x00\x00", "\x00\x00test\x00\x00"),  # This doesn't work with UnixFilesystemPathBlueprint!
        (None, "None"),
        (True, "True"),
        (False, "False"),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(
        # Real use case simulation - parsing, filtering and validating a person's name received from a client
        filters=(
            StringStripFilter(),
            StringUnicodeNormalizeFilter(normal_form="NFKC"),
            StringCapitalizeFilter()
        ),
        validators=(
            SequenceIsNotEmptyValidator(),
            SequenceMaximumLengthValidator(50),
            StringContainsNoControlOrSeparatorCharactersValidator(allowed_characters=""),
            StringIsOnlySingleWordValidator(),
            StringMatchesRegexValidator(r'\d|_', negate=True)
        ),
        parsing_mode=ParsingMode.MODE_STRICT
    ), (
        ("  \v\v\f\r\n  John  \n\r\t", "John"),
        ("\t≈Ωaneta  \r\r\n", "≈Ωaneta"),
        ("  \v\v\f\r\n  john  \n\r\t", "John"),
        ("\t≈æaneta  \r\r\n", "≈Ωaneta"),
        ("  \v\v\f\r\n  JOHN  \n\r\t", "John"),
        ("\t≈ΩANETA  \r\r\n", "≈Ωaneta"),
        ("  \v\v\f\r\n  jOHN  \n\r\t", "John"),
        ("\t≈æANETA  \r\r\n", "≈Ωaneta"),
        (b'\xc5\xbe\xc3\xa1dn\xc3\xbd'.decode("utf-8"), b'\xc5\xbd\xc3\xa1dn\xc3\xbd'.decode("utf-8")),
        (b'z\xcc\x8ca\xcc\x81dny\xcc\x81'.decode("utf-8"), b'\xc5\xbd\xc3\xa1dn\xc3\xbd'.decode("utf-8")),
        (b'\xc5\xbd\xc3\x81\xef\xbc\xa4\xef\xbc\xae\xc3\x9d'.decode("utf-8"), b'\xc5\xbd\xc3\xa1dn\xc3\xbd'.decode("utf-8")),
        (b'Z\xcc\x8cA\xcc\x81\xef\xbc\xa4\xef\xbc\xaeY\xcc\x81'.decode("utf-8"), b'\xc5\xbd\xc3\xa1dn\xc3\xbd'.decode("utf-8")),
        ("John", "John"),
        ("≈Ωaneta", "≈Ωaneta"),
        ("john", "John"),
        ("≈æaneta", "≈Ωaneta"),
        ("JOHN", "John"),
        ("≈ΩANETA", "≈Ωaneta"),
        ("jOHN", "John"),
        ("≈æANETA", "≈Ωaneta"),
        ("", DataValidationFailedExc),
        (" ", DataValidationFailedExc),
        (" " * 10, DataValidationFailedExc),
        ("\t", DataValidationFailedExc),
        ("\n", DataValidationFailedExc),
        ("x", "X"),
        ("xxxxx", "Xxxxx"),
        ("x" * 49, "X" + ("x" * 48)),
        ("x" * 50, "X" + ("x" * 49)),
        ("x" * 51, DataValidationFailedExc),
        ("x" * 100, DataValidationFailedExc),
        ("≈ô", "≈ò"),
        ("≈ô≈ô≈ô≈ô≈ô", "≈ò≈ô≈ô≈ô≈ô"),
        ("≈ô" * 49, "≈ò" + ("≈ô" * 48)),
        ("≈ô" * 50, "≈ò" + ("≈ô" * 49)),
        ("≈ô" * 51, DataValidationFailedExc),
        ("≈ô" * 100, DataValidationFailedExc),
        (" john", "John"),
        ("jo hn", DataValidationFailedExc),
        ("john ", "John"),
        ("\u202fjohn", "John"),
        ("jo\u202fhn", DataValidationFailedExc),
        ("john\u202f", "John"),
        ("\u2028john", "John"),
        ("jo\u2028hn", DataValidationFailedExc),
        ("john\u2028", "John"),
        ("\u2029john", "John"),
        ("jo\u2029hn", DataValidationFailedExc),
        ("john\u2029", "John"),
        ("\x00john", DataValidationFailedExc),
        ("jo\x00hn", DataValidationFailedExc),
        ("john\x00", DataValidationFailedExc),
        ("\ajohn", DataValidationFailedExc),
        ("jo\ahn", DataValidationFailedExc),
        ("john\a", DataValidationFailedExc),
        ("\bjohn", DataValidationFailedExc),
        ("jo\bhn", DataValidationFailedExc),
        ("john\b", DataValidationFailedExc),
        ("\r\njohn", "John"),
        ("jo\r\nhn", DataValidationFailedExc),
        ("john\r\n", "John"),
        ("\n\rjohn", "John"),
        ("jo\n\rhn", DataValidationFailedExc),
        ("john\n\r", "John"),
        ("\njohn", "John"),
        ("jo\nhn", DataValidationFailedExc),
        ("john\n", "John"),
        ("\rjohn", "John"),
        ("jo\rhn", DataValidationFailedExc),
        ("john\r", "John"),
        ("\vjohn", "John"),
        ("jo\vhn", DataValidationFailedExc),
        ("john\v", "John"),
        ("\x1djohn", "John"),
        ("jo\x1dhn", DataValidationFailedExc),
        ("john\x1d", "John"),
        ("\x85john", "John"),
        ("jo\x85hn", DataValidationFailedExc),
        ("john\x85", "John"),
        ("\u2060john", DataValidationFailedExc),
        ("jo\u2060hn", DataValidationFailedExc),
        ("john\u2060", DataValidationFailedExc),
        ("\ufeffjohn", DataValidationFailedExc),
        ("jo\ufeffhn", DataValidationFailedExc),
        ("john\ufeff", DataValidationFailedExc),
        ("\ufffejohn", DataValidationFailedExc),
        ("jo\ufffehn", DataValidationFailedExc),
        ("john\ufffe", DataValidationFailedExc),
        ("\uffffjohn", DataValidationFailedExc),
        ("jo\uffffhn", DataValidationFailedExc),
        ("john\uffff", DataValidationFailedExc),
        ("john smith", DataValidationFailedExc),
        ("john\nsmith", DataValidationFailedExc),
        ("john\x00smith", DataValidationFailedExc),
        ("john\fsmith", DataValidationFailedExc),
        ("john.smith", DataValidationFailedExc),
        ("john-smith", DataValidationFailedExc),
        ("john?smith", DataValidationFailedExc),
        ("john'smith", DataValidationFailedExc),
        ("john(smith", DataValidationFailedExc),
        ("john[smith", DataValidationFailedExc),
        ("john{smith", DataValidationFailedExc),
        ("john<smith", DataValidationFailedExc),
        ("john@smith", DataValidationFailedExc),
        ("john#smith", DataValidationFailedExc),
        ("john&smith", DataValidationFailedExc),
        ("john+smith", DataValidationFailedExc),
        ("john/smith", DataValidationFailedExc),
        ("john*smith", DataValidationFailedExc),
        ("john^smith", DataValidationFailedExc),
        ("john%smith", DataValidationFailedExc),
        ("john:smith", DataValidationFailedExc),
        ("john,smith", DataValidationFailedExc),
        ("≈ΩANETA NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA\nNOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA\x00NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA\fNOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA.NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA-NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA?NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA'NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA(NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA[NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA{NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA<NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA@NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA#NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA&NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA+NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA/NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA*NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA^NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA%NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA:NOV√ÅKOV√Å", DataValidationFailedExc),
        ("≈ΩANETA,NOV√ÅKOV√Å", DataValidationFailedExc),
        ("john_smith", DataValidationFailedExc),
        ("≈æaneta_nov√°kov√°", DataValidationFailedExc),
        ("0john", DataValidationFailedExc),
        ("jo0hn", DataValidationFailedExc),
        ("john0", DataValidationFailedExc),
        ("8≈Ωaneta", DataValidationFailedExc),
        ("≈Ωan8eta", DataValidationFailedExc),
        ("≈Ωaneta8", DataValidationFailedExc),
        ("john1smith", DataValidationFailedExc),
        ("≈æaneta5nov√°kov√°", DataValidationFailedExc),
        ("john_1smith", DataValidationFailedExc),
        ("≈æaneta_5nov√°kov√°", DataValidationFailedExc),
        ("john1smi_th", DataValidationFailedExc),
        ("≈æaneta5nov√°_kov√°", DataValidationFailedExc),
        ("John.", DataValidationFailedExc),
        ("≈Ωaneta.", DataValidationFailedExc),
        ("The quick brown fox jumps over the lazy dog", DataValidationFailedExc),
        ("P≈ô√≠li≈° ≈ælu≈•ouƒçk√Ω k≈Ø≈à √∫pƒõl ƒè√°belsk√© √≥dy", DataValidationFailedExc),
        (None, InputDataTypeNotInAllowlistExc),
        (True, InputDataTypeNotInAllowlistExc),
        (123, InputDataTypeNotInAllowlistExc),
        (123.456, InputDataTypeNotInAllowlistExc),
        (float("nan"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_address("127.0.0.1"), InputDataTypeNotInAllowlistExc),
        (["hello"], InputDataTypeNotInAllowlistExc),
        ({"abc": "def"}, InputDataTypeNotInAllowlistExc),
        (str, InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
        ((" " * 60) + "JOHN" + (" " * 60), "John"),
        (("\n" * 60) + "JOHN" + ("\n" * 60), "John"),
        ("john", "John"),
        ("≈æaneta", "≈Ωaneta"),
        ("–≤–ª–∞–î–∏–º–∏—Ä", "–í–ª–∞–¥–∏–º–∏—Ä"),
        ("–¥–º–∏—Ç—Ä–∏–π", "–î–º–∏—Ç—Ä–∏–π"),
        ("È©¨", "È©¨"),
    ))
)


@pytest.mark.parametrize(("blueprint", "input_", "output"), theoretical_testutils.test_function_parameter_generator(__STRING_BLUEPRINT_TEST_SUITE))
def test_string_blueprint(blueprint, input_, output):
    theoretical_testutils.perform_test(blueprint, input_, output)


def test_string_blueprint_default_parsing_mode():
    assert StringBlueprint().get_parsing_mode() == ParsingMode.MODE_RATIONAL


def test_string_blueprint_default_bytes_encoding():
    assert StringBlueprint().get_bytes_encoding() == "utf-8"


def test_string_blueprint_bytes_encoding():
    assert StringBlueprint(bytes_encoding="ascii").get_bytes_encoding() == "ascii"


def test_string_blueprint_default_format_strings():
    bp = StringBlueprint()
    assert (bp.get_datetime_string_format() is None) and (bp.get_date_string_format() is None) and (bp.get_time_string_format() is None)


def test_string_blueprint_format_strings():
    bp = StringBlueprint(datetime_string_format="%Y-%m-%d %H:%M:%S", date_string_format="%Y-%m-%d", time_string_format="%H:%M:%S")
    assert (bp.get_datetime_string_format() == "%Y-%m-%d %H:%M:%S") and (bp.get_date_string_format() == "%Y-%m-%d") and (bp.get_time_string_format() == "%H:%M:%S")


def test_string_blueprint_filter_and_validator_sequences():
    filter_seq = (
        StringAlwaysEmptyFilter(),
        StringCapitalizeFilter(),
        StringControlAndSeparatorCharacterFilter(),
        StringDeduplicateWhitespaceFilter(),
        StringLowercaseFilter(),
        StringRegexReplaceFilter(r'[0-9]+', ''),
        StringReplaceFilter("abc", "ABC"),
        StringStripFilter(),
        StringUnicodeNormalizeFilter(),
        StringUnifyNewlinesFilter(),
        StringUnifyWhitespaceFilter(),
        StringUppercaseFilter(),
        UnixFilesystemPathAddTrailingSlashFilter(),
        UnixFilesystemPathStripTrailingSlashesFilter()
    )
    validator_seq = (
        SequenceIsNotEmptyValidator(),
        SequenceMaximumLengthValidator(10),
        SequenceMinimumLengthValidator(5),
        StringContainsNoControlOrSeparatorCharactersValidator(),
        StringContainsSubstringValidator("abc"),
        StringIsOnlySingleCharacterValidator(),
        StringIsOnlySingleLineValidator(),
        StringIsOnlySingleWordValidator(),
        StringMatchesRegexValidator(r'^[0-9]+\Z'),
        UnixFilesystemPathContainsOnlyFilenameValidator(),
        UnixFilesystemPathIsAbsoluteValidator(),
        UnixFilesystemPathIsRelativeValidator()
    )
    bp = StringBlueprint(filters=filter_seq, validators=validator_seq)

    assert (bp.get_filters() == filter_seq) and (bp.get_validators() == validator_seq)


def test_string_control_and_separator_character_filter_default_allowed_characters():
    assert StringControlAndSeparatorCharacterFilter().get_allowed_characters() == " \r\n\t"


@pytest.mark.parametrize("characters", ("", " ", "\r\n", " \r\n\t\v\f\x00\x01\x02\u2028\u2029", "\x00"))
def test_string_control_and_separator_character_filter_allowed_characters(characters):
    assert StringControlAndSeparatorCharacterFilter(allowed_characters=characters).get_allowed_characters() == characters


def test_string_regex_replace_filter_default_instance_attributes():
    filter_ = StringRegexReplaceFilter(r'[0-9]+', '')
    assert (filter_.get_max_replacement_count() == 0) and (filter_.get_regex_compile_flags() == 0)


def test_string_regex_replace_filter_instance_attributes():
    filter_ = StringRegexReplaceFilter(r'[A-Za-z]+', '', max_replacement_count=1, regex_compile_flags=re.MULTILINE)
    assert (filter_.get_regex_pattern() == r'[A-Za-z]+') and (filter_.get_replacement() == '') and (filter_.get_max_replacement_count() == 1) and (filter_.get_regex_compile_flags() == re.MULTILINE)


@pytest.mark.parametrize("count", (-100_000_000_000, -1000, -10, -1))
def test_string_regex_replace_filter_invalid_max_replacement_count(count):
    with pytest.raises(InvalidFilterConfigError):
        StringRegexReplaceFilter(r'[0-9]+', '', max_replacement_count=count)


@pytest.mark.parametrize("pattern", ("[", "[]", "[]+"))
def test_string_regex_replace_filter_invalid_regex_pattern(pattern):
    with pytest.raises(RegexCompilationFailedInFilterError):
        StringRegexReplaceFilter(pattern, '')


@pytest.mark.parametrize("flags", (-1, 2**32, 2**64, 2**128))
def test_string_regex_replace_filter_invalid_regex_compile_flags(flags):
    with pytest.raises(RegexCompilationFailedInFilterError):
        StringRegexReplaceFilter('[0-9]+', '', regex_compile_flags=flags)


def test_string_replace_filter_default_instance_attributes():
    assert StringReplaceFilter("abc", "ABC").get_max_replacement_count() == -1


@pytest.mark.parametrize("count", (-1, 1, 10, 1000, 100_000_000_000))
def test_string_replace_filter_instance_attributes(count):
    filter_ = StringReplaceFilter("\n", "|EOL|", max_replacement_count=count)
    assert (filter_.get_old_substring() == "\n") and (filter_.get_new_substring() == "|EOL|") and (filter_.get_max_replacement_count() == count)


def test_string_replace_filter_invalid_old_substring():
    with pytest.raises(InvalidFilterConfigError):
        StringReplaceFilter("", "ABC")


@pytest.mark.parametrize("count", (-100_000_000_000, -1000, -10, -2, 0))
def test_string_replace_filter_invalid_max_replacement_count(count):
    with pytest.raises(InvalidFilterConfigError):
        StringReplaceFilter("abc", "ABC", max_replacement_count=count)


def test_string_strip_filter_default_instance_attributes():
    filter_ = StringStripFilter()
    assert (filter_.is_left_strip_performed() is True) and (filter_.is_right_strip_performed() is True) and (filter_.get_stripped_characters() is None)


def test_string_strip_filter_instance_attributes():
    filter_ = StringStripFilter(do_left_strip=False, do_right_strip=True, stripped_characters="0123456789")
    assert (filter_.is_left_strip_performed() is False) and (filter_.is_right_strip_performed() is True) and (filter_.get_stripped_characters() == "0123456789")


def test_string_strip_filter_invalid_strip_directions():
    with pytest.raises(InvalidFilterConfigError):
        StringStripFilter(do_left_strip=False, do_right_strip=False)


def test_string_strip_filter_invalid_stripped_characters():
    with pytest.raises(InvalidFilterConfigError):
        StringStripFilter(stripped_characters="")


def test_string_unicode_normalize_filter_default_normal_form():
    assert StringUnicodeNormalizeFilter().get_normal_form() == "NFC"


def test_string_unicode_normalize_filter_normal_form():
    assert StringUnicodeNormalizeFilter(normal_form="NFKD").get_normal_form() == "NFKD"


@pytest.mark.parametrize("form", ("", "abc", "INVALID"))
def test_string_unicode_normalize_filter_invalid_normal_form(form):
    with pytest.raises(InvalidFilterConfigError):
        StringUnicodeNormalizeFilter(form)


def test_string_unify_newlines_filter_default_replacement_newline():
    assert StringUnifyNewlinesFilter().get_replacement_newline() == "\n"


@pytest.mark.parametrize("newline", ("\n", "\r", "\r\n", "\u2028", "\u2029", "\f", "\v", "\x85"))
def test_string_unify_newlines_filter_replacement_newline(newline):
    assert StringUnifyNewlinesFilter(replacement_newline=newline).get_replacement_newline() == newline


@pytest.mark.parametrize("newline", ("", "a", "zzz", "\n\r", "\x00", "a\r\n", "\r\na", "a\n", "\na"))
def test_string_unify_newlines_filter_invalid_replacement_newline(newline):
    with pytest.raises(InvalidFilterConfigError):
        StringUnifyNewlinesFilter(replacement_newline=newline)


def test_string_unify_whitespace_filter_default_replacement_whitespace():
    assert StringUnifyWhitespaceFilter().get_replacement_whitespace() == " "


@pytest.mark.parametrize("whitespace", (" ", "\t", "\n", "\r", "\v", "\f", "\u2028"))
def test_string_unify_whitespace_filter_replacement_whitespace(whitespace):
    assert StringUnifyWhitespaceFilter(replacement_whitespace=whitespace).get_replacement_whitespace() == whitespace


@pytest.mark.parametrize("whitespace", ("", "  ", "\a", "\b", "\r\n", "\n\r", "\n\n", "\r\r", "\t\t", "a", "aa", "x", "xx", "≈ô", "≈ô≈ô", "0", "12"))
def test_string_unify_whitespace_filter_invalid_replacement_whitespace(whitespace):
    with pytest.raises(InvalidFilterConfigError):
        StringUnifyWhitespaceFilter(replacement_whitespace=whitespace)


def test_sequence_is_not_empty_validator_default_negation():
    assert SequenceIsNotEmptyValidator().is_negated() is False


def test_string_contains_no_control_or_separator_characters_validator_default_allowed_characters():
    assert StringContainsNoControlOrSeparatorCharactersValidator().get_allowed_characters() == " \r\n\t"


@pytest.mark.parametrize("characters", ("", " ", "\r\n", " \r\n\t\v\f\x00\x01\x02\u2028\u2029", "\x00"))
def test_string_contains_no_control_or_separator_characters_validator_allowed_characters(characters):
    assert StringContainsNoControlOrSeparatorCharactersValidator(allowed_characters=characters).get_allowed_characters() == characters


def test_string_contains_substring_validator_default_negation():
    assert StringContainsSubstringValidator("abc").is_negated() is False


def test_string_contains_substring_validator_default_instance_attributes():
    assert StringContainsSubstringValidator("abc").is_check_performed_case_sensitively() is True


def test_string_contains_substring_validator_instance_attributes():
    validator_ = StringContainsSubstringValidator("hello world!", perform_check_case_sensitively=False)
    assert (validator_.get_checked_substring() == "hello world!") and (validator_.is_check_performed_case_sensitively() is False)


def test_string_contains_substring_validator_invalid_checked_substring():
    with pytest.raises(InvalidValidatorConfigError):
        StringContainsSubstringValidator("")


def test_string_matches_regex_validator_default_negation():
    assert StringMatchesRegexValidator(r'[0-9]+').is_negated() is False


def test_string_matches_regex_validator_instance_attributes():
    validator_ = StringMatchesRegexValidator(r'^[A-Za-z_]+$', regex_compile_flags=re.MULTILINE)
    assert (validator_.get_regex_pattern() == r'^[A-Za-z_]+$') and (validator_.get_regex_compile_flags() == re.MULTILINE)


@pytest.mark.parametrize("pattern", ("[", "[]", "[]+"))
def test_string_matches_regex_validator_invalid_regex_pattern(pattern):
    with pytest.raises(RegexCompilationFailedInValidatorError):
        StringMatchesRegexValidator(pattern)


@pytest.mark.parametrize("flags", (-1, 2**32, 2**64, 2**128))
def test_string_matches_regex_validator_invalid_regex_compile_flags(flags):
    with pytest.raises(RegexCompilationFailedInValidatorError):
        StringMatchesRegexValidator(r'[0-9]+', regex_compile_flags=flags)
