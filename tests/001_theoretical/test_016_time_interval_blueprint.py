#!/bin/false

# Copyright (c) 2022 VÃ­t Labuda. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
# following conditions are met:
#  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
#     disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
#     following disclaimer in the documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
#     products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


import os
import os.path
import sys
if "DATALIDATOR_TESTS_AUTOPATH" in os.environ:
    __TESTS_DIR = os.path.dirname(os.path.realpath(__file__))
    __MODULE_DIR = os.path.realpath(os.path.join(__TESTS_DIR, "../.."))
    if __TESTS_DIR not in sys.path:
        sys.path.insert(0, __TESTS_DIR)
    if __MODULE_DIR not in sys.path:
        sys.path.insert(0, __MODULE_DIR)

import theoretical_testutils
import pytest
import datetime
import ipaddress
import urllib.parse
import uuid
from test_006_float_blueprint import FloatableObject, ExceptionRaisingFloatableObject, expected_output_float_value
from test_014_string_blueprint import StringableObject, ExceptionRaisingStringableObject
from datalidator.blueprints.impl.TimeIntervalBlueprint import TimeIntervalBlueprint
from datalidator.blueprints.exc.InvalidInputDataExc import InvalidInputDataExc
from datalidator.blueprints.exc.InputDataTypeNotInAllowlistExc import InputDataTypeNotInAllowlistExc
from datalidator.filters.impl.NumberMaximumClampFilter import NumberMaximumClampFilter
from datalidator.filters.impl.NumberMinimumClampFilter import NumberMinimumClampFilter
from datalidator.filters.impl.NumberRoundFilter import NumberRoundFilter
from datalidator.validators.impl.NumberMaximumValueValidator import NumberMaximumValueValidator
from datalidator.validators.impl.NumberMinimumValueValidator import NumberMinimumValueValidator
from datalidator.validators.exc.DataValidationFailedExc import DataValidationFailedExc


__TIME_INTERVAL_BLUEPRINT_TEST_SUITE = (
    (TimeIntervalBlueprint(), (
        (-10**9, InvalidInputDataExc),
        (-100, InvalidInputDataExc),
        (-1, InvalidInputDataExc),
        (0, expected_output_float_value("0.0")),
        (1, expected_output_float_value("1.0")),
        (100, expected_output_float_value("100.0")),
        (10**9, expected_output_float_value("1000000000.0")),
        (-1e9, InvalidInputDataExc),
        (-10.123, InvalidInputDataExc),
        (-10.0, InvalidInputDataExc),
        (-1.0, InvalidInputDataExc),
        (-0.5, InvalidInputDataExc),
        (-0.0, expected_output_float_value("0.0")),
        (0.0, expected_output_float_value("0.0")),
        (0.5, expected_output_float_value("0.5")),
        (1.0, expected_output_float_value("1.0")),
        (10.0, expected_output_float_value("10.0")),
        (10.123, expected_output_float_value("10.123")),
        (1e9, expected_output_float_value("1000000000.0")),
        (float("inf"), InvalidInputDataExc),
        (float("-inf"), InvalidInputDataExc),
        (float("nan"), InvalidInputDataExc),
        ("-1_000_000_000", InvalidInputDataExc),
        ("-100", InvalidInputDataExc),
        ("-000100", InvalidInputDataExc),
        ("-000_100", InvalidInputDataExc),
        ("\n\t  -000_100\r\r", InvalidInputDataExc),
        ("-1", InvalidInputDataExc),
        ("0", expected_output_float_value("0.0")),
        ("1", expected_output_float_value("1.0")),
        ("100", expected_output_float_value("100.0")),
        ("000100", expected_output_float_value("100.0")),
        ("000_100", expected_output_float_value("100.0")),
        ("   \r\n000_100 \v\t\f", expected_output_float_value("100.0")),
        ("1_000_000_000", expected_output_float_value("1000000000.0")),
        ("-1e9", InvalidInputDataExc),
        ("-10.123", InvalidInputDataExc),
        ("-00010.123", InvalidInputDataExc),
        ("-000_10.123", InvalidInputDataExc),
        ("\t\f\v -000_10.123    ", InvalidInputDataExc),
        ("\t\f\v -000_10,123    ", InvalidInputDataExc),
        ("-10.0", InvalidInputDataExc),
        ("-1.0", InvalidInputDataExc),
        ("-0.5", InvalidInputDataExc),
        ("-0.0", expected_output_float_value("0.0")),
        ("0.0", expected_output_float_value("0.0")),
        ("0.5", expected_output_float_value("0.5")),
        ("1.0", expected_output_float_value("1.0")),
        ("10.0", expected_output_float_value("10.0")),
        ("10.123", expected_output_float_value("10.123")),
        ("00010.123", expected_output_float_value("10.123")),
        ("000_10.123", expected_output_float_value("10.123")),
        ("\t\v      000_10.123\n", expected_output_float_value("10.123")),
        ("\t\v      000_10,123\n", InvalidInputDataExc),
        ("1e9", expected_output_float_value("1000000000.0")),
        ("inf", InvalidInputDataExc),
        ("-inf", InvalidInputDataExc),
        ("nan", InvalidInputDataExc),
        ("\n\r\t    nan   \x85\u2029   ", InvalidInputDataExc),
        ("1y 7d 23h 10min 1s 50ms", expected_output_float_value("32224201.05")),
        ("1year 7days 23hours 10minutes 1second 50milliseconds", expected_output_float_value("32224201.05")),
        ("10min", expected_output_float_value("600.0")),
        ("10min 15s", expected_output_float_value("615.0")),
        ("0s", expected_output_float_value("0.0")),
        ("23h 500ms", expected_output_float_value("82800.5")),
        ("10s 155ms", expected_output_float_value("10.155")),
        ("155ms 10s", InvalidInputDataExc),
        ("10s 10s 155ms", InvalidInputDataExc),
        ("10s 155ms 10s", InvalidInputDataExc),
        ("10s 5s 155ms", InvalidInputDataExc),
        ("10s 155ms 5s", InvalidInputDataExc),
        ("1year 2days 3hours 4minutes 5seconds 6milliseconds", expected_output_float_value("31719845.006")),
        ("1year 2days 3hours 4minutes 5seconds 6milliseconds 7seconds", InvalidInputDataExc),
        ("1year 2days 3hours 4minutes 5seconds 6milliseconds 7years", InvalidInputDataExc),
        ("1year 2days 3hours 4minutes 5seconds 6milliseconds 7hours", InvalidInputDataExc),
        ("6milliseconds 5seconds 4minutes 3hours 2days 1year", InvalidInputDataExc),
        ("1year 2years 2days 3hours 4minutes 5seconds 6milliseconds", InvalidInputDataExc),
        ("1year 2YEARS 2days 3hours 4minutes 5seconds 6milliseconds", InvalidInputDataExc),
        ("1year 2days 2years 3hours 4minutes 5seconds 6milliseconds", InvalidInputDataExc),
        ("1year 2days 4minutes 3hours 5seconds 6milliseconds", InvalidInputDataExc),
        ("1y 100ms", expected_output_float_value("31536000.1")),
        ("1y 2y 100ms", InvalidInputDataExc),
        ("1d 2y 100ms", InvalidInputDataExc),
        ("100ms 1y", InvalidInputDataExc),
        ("-10000ms", InvalidInputDataExc),
        ("-100ms", InvalidInputDataExc),
        ("-1ms", InvalidInputDataExc),
        ("-0ms", InvalidInputDataExc),
        ("0ms", expected_output_float_value("0.0")),
        ("1ms", expected_output_float_value("0.001")),
        ("50ms", expected_output_float_value("0.05")),
        ("999ms", expected_output_float_value("0.999")),
        ("1000ms", InvalidInputDataExc),
        ("1001ms", InvalidInputDataExc),
        ("10000ms", InvalidInputDataExc),
        ("-100s", InvalidInputDataExc),
        ("-1s", InvalidInputDataExc),
        ("-0s", InvalidInputDataExc),
        ("0s", expected_output_float_value("0.0")),
        ("1s", expected_output_float_value("1.0")),
        ("30s", expected_output_float_value("30.0")),
        ("59s", expected_output_float_value("59.0")),
        ("60s", InvalidInputDataExc),
        ("61s", InvalidInputDataExc),
        ("100s", InvalidInputDataExc),
        ("-100min", InvalidInputDataExc),
        ("-1min", InvalidInputDataExc),
        ("-0min", InvalidInputDataExc),
        ("0min", expected_output_float_value("0.0")),
        ("1min", expected_output_float_value("60.0")),
        ("30min", expected_output_float_value("1800.0")),
        ("59min", expected_output_float_value("3540.0")),
        ("60min", InvalidInputDataExc),
        ("61min", InvalidInputDataExc),
        ("100min", InvalidInputDataExc),
        ("-100h", InvalidInputDataExc),
        ("-1h", InvalidInputDataExc),
        ("-0h", InvalidInputDataExc),
        ("0h", expected_output_float_value("0.0")),
        ("1h", expected_output_float_value("3600.0")),
        ("11h", expected_output_float_value("39600.0")),
        ("23h", expected_output_float_value("82800.0")),
        ("24h", InvalidInputDataExc),
        ("25h", InvalidInputDataExc),
        ("100h", InvalidInputDataExc),
        ("-1000d", InvalidInputDataExc),
        ("-100d", InvalidInputDataExc),
        ("-1d", InvalidInputDataExc),
        ("-0d", InvalidInputDataExc),
        ("0d", expected_output_float_value("0.0")),
        ("1d", expected_output_float_value("86400.0")),
        ("120d", expected_output_float_value("10368000.0")),
        ("364d", expected_output_float_value("31449600.0")),
        ("365d", InvalidInputDataExc),
        ("366d", InvalidInputDataExc),
        ("1000d", InvalidInputDataExc),
        ("-100000y", InvalidInputDataExc),
        ("-100y", InvalidInputDataExc),
        ("-1y", InvalidInputDataExc),
        ("-0y", InvalidInputDataExc),
        ("0y", expected_output_float_value("0.0")),
        ("1y", expected_output_float_value("31536000.0")),
        ("10y", expected_output_float_value("315360000.0")),
        ("150y", expected_output_float_value("4730400000.0")),
        ("899y", expected_output_float_value("28350864000.0")),
        ("1505y", expected_output_float_value("47461680000.0")),
        ("16123y", expected_output_float_value("508454928000.0")),
        ("100000y", expected_output_float_value("3153600000000.0")),
        ("1234567890y", expected_output_float_value("3.893333297904e+16")),
        ("999ms", expected_output_float_value("0.999")),
        ("999MS", expected_output_float_value("0.999")),
        ("999millisecond", expected_output_float_value("0.999")),
        ("999milliseconds", expected_output_float_value("0.999")),
        ("999Milliseconds", expected_output_float_value("0.999")),
        ("59s", expected_output_float_value("59.0")),
        ("59S", expected_output_float_value("59.0")),
        ("59second", expected_output_float_value("59.0")),
        ("59seconds", expected_output_float_value("59.0")),
        ("59Seconds", expected_output_float_value("59.0")),
        ("59min", expected_output_float_value("3540.0")),
        ("59MIN", expected_output_float_value("3540.0")),
        ("59minute", expected_output_float_value("3540.0")),
        ("59minutes", expected_output_float_value("3540.0")),
        ("59Minutes", expected_output_float_value("3540.0")),
        ("23h", expected_output_float_value("82800.0")),
        ("23H", expected_output_float_value("82800.0")),
        ("23hour", expected_output_float_value("82800.0")),
        ("23hours", expected_output_float_value("82800.0")),
        ("23Hours", expected_output_float_value("82800.0")),
        ("364d", expected_output_float_value("31449600.0")),
        ("364D", expected_output_float_value("31449600.0")),
        ("364day", expected_output_float_value("31449600.0")),
        ("364days", expected_output_float_value("31449600.0")),
        ("364Days", expected_output_float_value("31449600.0")),
        ("12345y", expected_output_float_value("389311920000.0")),
        ("12345Y", expected_output_float_value("389311920000.0")),
        ("12345year", expected_output_float_value("389311920000.0")),
        ("12345years", expected_output_float_value("389311920000.0")),
        ("12345Years", expected_output_float_value("389311920000.0")),
        ("12345YEARS 364DAYS 23HOURS 59MINUTES 59SECONDS 999MILLISECONDS", expected_output_float_value("389343455999.999")),
        ("8second", expected_output_float_value("8.0")),
        ("8minute 480millisecond", expected_output_float_value("480.48")),
        ("0y 0d 0h 0min 0s 0ms", expected_output_float_value("0.0")),
        ("0y 0d 0h 0min 0s 0ms 0ms", InvalidInputDataExc),
        ("0y 0d 0h 0min 0s 0ms 0s", InvalidInputDataExc),
        ("0y 0d 0h 0min 0min 0s 0ms", InvalidInputDataExc),
        ("0y 0d 0h 0min 0s 0min 0ms", InvalidInputDataExc),
        ("0y 0d 0h 5min 0s 0ms", expected_output_float_value("300.0")),
        ("0y 0d 0h 5min 0s 990ms", expected_output_float_value("300.99")),
        ("000y 000d 000h 005min 000s 0000000000990ms", expected_output_float_value("300.99")),
        ("0001year 0002days 0003hours 0004minutes 00005seconds 000006milliseconds", expected_output_float_value("31719845.006")),
        ("\t 0001year\n\r0002days\n0003hours\f\v0004minutes   \x85\u2029\x1c\x1e     00005seconds \v000006milliseconds", expected_output_float_value("31719845.006")),
        ("\t\t   1year\r\n\t    2days \v\v\f 3hours\x85\u2028\x1d 4minutes\n5seconds\r\n\t6milliseconds           \v", expected_output_float_value("31719845.006")),
        ("   1year               2days  3hours    4minutes      5seconds    6milliseconds   ", expected_output_float_value("31719845.006")),
        ("0001year    0002days    0003hours         0004minutes  00005seconds    000006milliseconds   ", expected_output_float_value("31719845.006")),
        ("0001year    0002days    0003 hours         0004minutes  00005seconds    000006milliseconds   ", InvalidInputDataExc),
        ("1year 2 days 3hours 4minutes 5seconds 6milliseconds", InvalidInputDataExc),
        ("1year 2days 3hours 4minutes 5 seconds 6milliseconds", InvalidInputDataExc),
        ("1year 2days 3hours 4minutes 5\nseconds 6milliseconds", InvalidInputDataExc),
        ("1year 2days 3hours 4minutes 5\u2029seconds 6milliseconds", InvalidInputDataExc),
        ("1year 2days 3.0hours 4minutes 5seconds 6milliseconds", InvalidInputDataExc),
        ("1year 2days 3,0hours 4minutes 5seconds 6milliseconds", InvalidInputDataExc),
        ("1year 2days 3.hours 4minutes 5seconds 6milliseconds", InvalidInputDataExc),
        ("1year 2days 3. hours 4minutes 5seconds 6milliseconds", InvalidInputDataExc),
        ("1year 2days 3.0 hours 4minutes 5seconds 6milliseconds", InvalidInputDataExc),
        ("1year 2days 3hours 4.5minutes 5seconds 6milliseconds", InvalidInputDataExc),
        ("1year 2days 3hours 4,5minutes 5seconds 6milliseconds", InvalidInputDataExc),
        ("1year 2days 3hours 4.minutes 5seconds 6milliseconds", InvalidInputDataExc),
        ("1year 2days 3hours 4. minutes 5seconds 6milliseconds", InvalidInputDataExc),
        ("1year 2days 3hours 4.5 minutes 5seconds 6milliseconds", InvalidInputDataExc),
        ("\x001year 2days 3hours 4minutes 5seconds 6milliseconds", InvalidInputDataExc),
        ("\x00 1year 2days 3hours 4minutes 5seconds 6milliseconds", InvalidInputDataExc),
        ("1year 2days 3hours 4minutes\x005seconds 6milliseconds", InvalidInputDataExc),
        ("1year 2days 3hours 4minutes \x00 5seconds 6milliseconds", InvalidInputDataExc),
        ("1year 2days 3hours 4minutes 5seconds 6milliseconds\x00", InvalidInputDataExc),
        ("1year 2days 3hours 4minutes 5seconds 6milliseconds \x00", InvalidInputDataExc),
        ("", InvalidInputDataExc),
        (" ", InvalidInputDataExc),
        ("\n", InvalidInputDataExc),
        ("\r   \t\t\v\n \f   ", InvalidInputDataExc),
        ("10min 15s 200ms", expected_output_float_value("615.2")),
        ("10min 15s  200ms", expected_output_float_value("615.2")),
        ("10min ,15s 200ms", InvalidInputDataExc),
        ("10min .15s 200ms", InvalidInputDataExc),
        ("10min !15s 200ms", InvalidInputDataExc),
        ("10min 15s, 200ms", InvalidInputDataExc),
        ("10min 15s. 200ms", InvalidInputDataExc),
        ("10min 15s! 200ms", InvalidInputDataExc),
        ("10min 15. 200ms", InvalidInputDataExc),
        ("10min 15, 200ms", InvalidInputDataExc),
        ("10min 15! 200ms", InvalidInputDataExc),
        ("10min s15 200ms", InvalidInputDataExc),
        ("10min 15s15s 200ms", InvalidInputDataExc),
        ("10min 15s15 200ms", InvalidInputDataExc),
        ("10min s15s15 200ms", InvalidInputDataExc),
        ("10min s15s15s 200ms", InvalidInputDataExc),
        ("10min 15 200ms", InvalidInputDataExc),
        ("10min |15s 200ms", InvalidInputDataExc),
        ("10min 15s| 200ms", InvalidInputDataExc),
        ("10min |15|s 200ms", InvalidInputDataExc),
        ("10min 15Å 200ms", InvalidInputDataExc),
        ("10min 15Å 200ms", InvalidInputDataExc),
        ("10min 15ð¤ 200ms", InvalidInputDataExc),
        ("10min 15\x00 200ms", InvalidInputDataExc),
        ("10min s 200ms", InvalidInputDataExc),
        ("10min second 200ms", InvalidInputDataExc),
        ("10min seconds 200ms", InvalidInputDataExc),
        ("10min min 200ms", InvalidInputDataExc),
        ("10min minute 200ms", InvalidInputDataExc),
        ("10min minutes 200ms", InvalidInputDataExc),
        ("10min Å 200ms", InvalidInputDataExc),
        ("10min Å 200ms", InvalidInputDataExc),
        ("10min ð¤ 200ms", InvalidInputDataExc),
        ("10min \x00 200ms", InvalidInputDataExc),
        ("10min 15ss 200ms", InvalidInputDataExc),
        ("10min 15t 200ms", InvalidInputDataExc),
        ("10min 15x 200ms", InvalidInputDataExc),
        ("10min 15a 200ms", InvalidInputDataExc),
        ("10min 15abc 200ms", InvalidInputDataExc),
        ("10min 15xyz 200ms", InvalidInputDataExc),
        ("10min 15mn 200ms", InvalidInputDataExc),
        ("10min 15mins 200ms", InvalidInputDataExc),
        ("10min 15minutess 200ms", InvalidInputDataExc),
        ("10min 15mÃ­n 200ms", InvalidInputDataExc),
        ("10min 15sec 200ms", InvalidInputDataExc),
        ("10min 15secs 200ms", InvalidInputDataExc),
        ("10min 15secconds 200ms", InvalidInputDataExc),
        ("10min 15sÃ©conds 200ms", InvalidInputDataExc),
        ("10min 60s 200ms", InvalidInputDataExc),
        ("hello", InvalidInputDataExc),
        ("HELLO", InvalidInputDataExc),
        ("hello world", InvalidInputDataExc),
        ("\r\n   hello\tworld\f\f   ", InvalidInputDataExc),
        ("Ä Å¡Ä ÄÄ+ Å¡Ä+Ä\vÅ¡Äm+Ä Å¡Ä+\r\n+Ä ÄÅ¡Ä +Å¡Ä +ÄÅ¡   ", InvalidInputDataExc),
        ("\x00", InvalidInputDataExc),
        ("\x00\x00\x00\x00", InvalidInputDataExc),
        (".", InvalidInputDataExc),
        ("!", InvalidInputDataExc),
        ("s", InvalidInputDataExc),
        ("ÄÅ¡ÄÅÅ¾Ã½Ã¡Ã­Ã©", InvalidInputDataExc),
        ("1a 2b 3d 4d 5e 6f", InvalidInputDataExc),
        ("ð¤", InvalidInputDataExc),
        (True, expected_output_float_value("1.0")),  # For historic reasons, 'bool' is a subclass of 'int'.
        (False, expected_output_float_value("0.0")),  # For historic reasons, 'bool' is a subclass of 'int'.
        (None, InputDataTypeNotInAllowlistExc),
        (123+12j, InputDataTypeNotInAllowlistExc),
        (b'', InputDataTypeNotInAllowlistExc),
        (b'\x00', InputDataTypeNotInAllowlistExc),
        (b'\x01', InputDataTypeNotInAllowlistExc),
        (b'123', InputDataTypeNotInAllowlistExc),
        (b'123.0', InputDataTypeNotInAllowlistExc),
        (b'10min 15s', InputDataTypeNotInAllowlistExc),
        (bytearray(b''), InputDataTypeNotInAllowlistExc),
        (bytearray(b'\x00'), InputDataTypeNotInAllowlistExc),
        (bytearray(b'\x01'), InputDataTypeNotInAllowlistExc),
        (bytearray(b'123'), InputDataTypeNotInAllowlistExc),
        (bytearray(b'123.0'), InputDataTypeNotInAllowlistExc),
        (bytearray(b'10min 15s'), InputDataTypeNotInAllowlistExc),
        ([], InputDataTypeNotInAllowlistExc),
        ([10, 15], InputDataTypeNotInAllowlistExc),
        (["10min 15s"], InputDataTypeNotInAllowlistExc),
        ({}, InputDataTypeNotInAllowlistExc),
        ({10: 15}, InputDataTypeNotInAllowlistExc),
        ({"10min": "15s"}, InputDataTypeNotInAllowlistExc),
        (float, InputDataTypeNotInAllowlistExc),
        (str, InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject, InputDataTypeNotInAllowlistExc),
        (datetime.datetime.now(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime.now().date(), InputDataTypeNotInAllowlistExc),
        (datetime.datetime.now().time(), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_address("127.1.2.3"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_address("::1"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_network("127.0.0.0/16"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_network("2001:db8::/96"), InputDataTypeNotInAllowlistExc),
        (urllib.parse.urlparse("https://www.google.com/test?abc=xyz"), InputDataTypeNotInAllowlistExc),
        (uuid.UUID('{12345678-1234-5678-1234-567812345678}'), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.TestException(), InputDataTypeNotInAllowlistExc),
        (object(), InputDataTypeNotInAllowlistExc),
        (FloatableObject(123.456), InputDataTypeNotInAllowlistExc),
        (FloatableObject("10min 15s"), InputDataTypeNotInAllowlistExc),
        (FloatableObject(None), InputDataTypeNotInAllowlistExc),
        (FloatableObject(theoretical_testutils.EmptyObject()), InputDataTypeNotInAllowlistExc),
        (ExceptionRaisingFloatableObject(), InputDataTypeNotInAllowlistExc),
        (StringableObject(123.456), InputDataTypeNotInAllowlistExc),
        (StringableObject("10min 15s"), InputDataTypeNotInAllowlistExc),
        (StringableObject(None), InputDataTypeNotInAllowlistExc),
        (StringableObject(theoretical_testutils.EmptyObject()), InputDataTypeNotInAllowlistExc),
        (ExceptionRaisingStringableObject(), InputDataTypeNotInAllowlistExc),
    )),
    (TimeIntervalBlueprint(filters=(NumberMaximumClampFilter(65.0),)), (
        ("0s", expected_output_float_value("0.0")),
        ("1min", expected_output_float_value("60.0")),
        ("1min 4s 999ms", expected_output_float_value("64.999")),
        ("1min 5s", expected_output_float_value("65.0")),
        ("1min 5s 1ms", expected_output_float_value("65.0")),
        ("1min 30s", expected_output_float_value("65.0")),
        ("2min", expected_output_float_value("65.0")),
        ("123years", expected_output_float_value("65.0")),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (TimeIntervalBlueprint(filters=(NumberMinimumClampFilter(45.5),)), (
        ("0s", expected_output_float_value("45.5")),
        ("100ms", expected_output_float_value("45.5")),
        ("30s", expected_output_float_value("45.5")),
        ("45s 499ms", expected_output_float_value("45.5")),
        ("45s 500ms", expected_output_float_value("45.5")),
        ("45s 501ms", expected_output_float_value("45.501")),
        ("55s", expected_output_float_value("55.0")),
        ("55min", expected_output_float_value("3300.0")),
        ("123years", expected_output_float_value("3878928000.0")),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (TimeIntervalBlueprint(filters=(NumberRoundFilter(0),)), (
        ("0s", expected_output_float_value("0.0")),
        ("0s 499ms", expected_output_float_value("0.0")),
        ("0s 501ms", expected_output_float_value("1.0")),
        ("1s", expected_output_float_value("1.0")),
        ("35s", expected_output_float_value("35.0")),
        ("35s 400ms", expected_output_float_value("35.0")),
        ("35s 600ms", expected_output_float_value("36.0")),
        ("36s", expected_output_float_value("36.0")),
        ("10hours", expected_output_float_value("36000.0")),
        ("10hours 10ms", expected_output_float_value("36000.0")),
        ("10hours 990ms", expected_output_float_value("36001.0")),
        ("10hours 1s", expected_output_float_value("36001.0")),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (TimeIntervalBlueprint(validators=(NumberMaximumValueValidator(65.0),)), (
        ("0s", expected_output_float_value("0.0")),
        ("1min", expected_output_float_value("60.0")),
        ("1min 4s 999ms", expected_output_float_value("64.999")),
        ("1min 5s", expected_output_float_value("65.0")),
        ("1min 5s 1ms", DataValidationFailedExc),
        ("1min 30s", DataValidationFailedExc),
        ("2min", DataValidationFailedExc),
        ("123years", DataValidationFailedExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (TimeIntervalBlueprint(validators=(NumberMinimumValueValidator(45.5),)), (
        ("0s", DataValidationFailedExc),
        ("100ms", DataValidationFailedExc),
        ("30s", DataValidationFailedExc),
        ("45s 499ms", DataValidationFailedExc),
        ("45s 500ms", expected_output_float_value("45.5")),
        ("45s 501ms", expected_output_float_value("45.501")),
        ("55s", expected_output_float_value("55.0")),
        ("55min", expected_output_float_value("3300.0")),
        ("123years", expected_output_float_value("3878928000.0")),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
)


@pytest.mark.parametrize(("blueprint", "input_", "output"), theoretical_testutils.test_function_parameter_generator(__TIME_INTERVAL_BLUEPRINT_TEST_SUITE))
def test_time_interval_blueprint(blueprint, input_, output):
    theoretical_testutils.perform_test(blueprint, input_, output)


def test_time_interval_blueprint_filter_and_validator_sequences():
    filter_seq = (
        NumberMaximumClampFilter(10.0),
        NumberMinimumClampFilter(5.0),
        NumberRoundFilter(3)
    )
    validator_seq = (
        NumberMaximumValueValidator(12.5),
        NumberMinimumValueValidator(2.5)
    )
    bp = TimeIntervalBlueprint(filters=filter_seq, validators=validator_seq)

    assert (bp.get_filters() == filter_seq) and (bp.get_validators() == validator_seq)
