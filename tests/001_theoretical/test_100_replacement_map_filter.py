#!/bin/false

# Copyright (c) 2022 Vít Labuda. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
# following conditions are met:
#  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
#     disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
#     following disclaimer in the documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
#     products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


import os
import os.path
import sys
if "DATALIDATOR_TESTS_AUTOPATH" in os.environ:
    __TESTS_DIR = os.path.dirname(os.path.realpath(__file__))
    __MODULE_DIR = os.path.realpath(os.path.join(__TESTS_DIR, "../.."))
    if __TESTS_DIR not in sys.path:
        sys.path.insert(0, __TESTS_DIR)
    if __MODULE_DIR not in sys.path:
        sys.path.insert(0, __MODULE_DIR)

import theoretical_testutils
import pytest
import datetime
import zoneinfo
import ipaddress
import urllib.parse
import uuid
from test_006_float_blueprint import expected_output_float_value
from datalidator.filters.impl.ReplacementMapFilter import ReplacementMapFilter
from datalidator.filters.impl.StringStripFilter import StringStripFilter
from datalidator.filters.exc.err.InvalidFilterConfigError import InvalidFilterConfigError
from datalidator.blueprints.ParsingMode import ParsingMode
from datalidator.blueprints.impl.StringBlueprint import StringBlueprint
from datalidator.blueprints.impl.IntegerBlueprint import IntegerBlueprint
from datalidator.blueprints.impl.FloatBlueprint import FloatBlueprint
from datalidator.blueprints.impl.ListBlueprint import ListBlueprint
from datalidator.blueprints.impl.GenericBlueprint import GenericBlueprint
from datalidator.blueprints.exc.InvalidInputDataExc import InvalidInputDataExc
from datalidator.blueprints.exc.InputDataTypeNotInAllowlistExc import InputDataTypeNotInAllowlistExc


__REPLACEMENT_MAP_FILTER_TEST_SUITE = (
    (StringBlueprint(
        filters=(ReplacementMapFilter(replacement_map=[  
            ("", "<empty string>"),
            ("\r\n", "\n"),
            ("\x00", ""),
            ("hello", "HELLO!"),
            ("test", "<test string>"),
            ("123", "one two three"),
            ("True", "TRUE"),
            ("None", "NULL"),
            ("127.0.0.1", "localhost"),
            ("::1", "localhost"),
            ("🤍", "I 🤍 You!"),
            ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n", "The quick brown fox jumps over the lazy dog.\n"),
        ]),),
        parsing_mode=ParsingMode.MODE_RATIONAL
    ), (
        ("", "<empty string>"),
        ("".join([]), "<empty string>"),
        ("<empty string>", "<empty string>"),
        ("\r\n", "\n"),
        ("\r \n", "\r \n"),
        ("\r\n ", "\r\n "),
        (" \r\n", " \r\n"),
        ("something\r\n", "something\r\n"),
        ("\r\nsomething", "\r\nsomething"),
        ("some\r\nthing", "some\r\nthing"),
        ("\n", "\n"),
        ("\x00", ""),
        ("\t\x00", "\t\x00"),
        ("\x00\t", "\x00\t"),
        ("\x00\x00", "\x00\x00"),
        ("something\x00", "something\x00"),
        ("\x00something", "\x00something"),
        ("some\x00thing", "some\x00thing"),
        ("hello", "HELLO!"),
        ("he_llo", "he_llo"),
        ("Hello", "Hello"),
        ("HELLO", "HELLO"),
        ("hello ", "hello "),
        ("\u2028hello\n", "\u2028hello\n"),
        ("hello\x00", "hello\x00"),
        ("hello world", "hello world"),
        ("HELLO!", "HELLO!"),
        ("HELLO! ", "HELLO! "),
        ("\u2028HELLO!\n", "\u2028HELLO!\n"),
        ("test", "<test string>"),
        ("test ", "test "),
        ("\u2028test\n", "\u2028test\n"),
        ("test\x00", "test\x00"),
        ("test 123", "test 123"),
        ("TEST", "TEST"),
        ("TEST 123", "TEST 123"),
        (123, "one two three"),
        (-123, "-123"),
        (124, "124"),
        (-124, "-124"),
        ("123", "one two three"),
        ("123 ", "123 "),
        ("\u2028123\n", "\u2028123\n"),
        ("123\x00", "123\x00"),
        ("123 of something", "123 of something"),
        ("123 of SOMETHING", "123 of SOMETHING"),
        (True, "TRUE"),
        (False, "False"),
        ("True", "TRUE"),
        ("True ", "True "),
        ("\u2028True\n", "\u2028True\n"),
        ("True\x00", "True\x00"),
        ("true", "true"),
        ("TRUE", "TRUE"),
        ("True thing", "True thing"),
        ("True thing ", "True thing "),
        ("\u2028True thing\n", "\u2028True thing\n"),
        ("True thing\x00", "True thing\x00"),
        (None, "NULL"),
        ("None", "NULL"),
        ("None ", "None "),
        ("\u2028None\n", "\u2028None\n"),
        ("None\x00", "None\x00"),
        ("none", "none"),
        ("NONE", "NONE"),
        ("NULL", "NULL"),
        ("Null", "Null"),
        ("null", "null"),
        ("None of them", "None of them"),
        ("None of them ", "None of them "),
        ("\u2028None of them\n", "\u2028None of them\n"),
        ("None of them\x00", "None of them\x00"),
        (ipaddress.ip_address("127.0.0.1"), "localhost"),
        (ipaddress.ip_address(2130706433), "localhost"),
        (ipaddress.ip_address("127.0.0.2"), "127.0.0.2"),
        (ipaddress.ip_address(2130706434), "127.0.0.2"),
        ("127.0.0.1", "localhost"),
        ("127.0.0.1 ", "127.0.0.1 "),
        ("\u2028127.0.0.1\n", "\u2028127.0.0.1\n"),
        ("127.0.0.1\x00", "127.0.0.1\x00"),
        ("localhost", "localhost"),
        ("Localhost", "Localhost"),
        ("LOCALHOST", "LOCALHOST"),
        ("127.0.0.2", "127.0.0.2"),
        ("127.0.0.2 ", "127.0.0.2 "),
        ("\u2028127.0.0.2\n", "\u2028127.0.0.2\n"),
        ("127.0.0.2\x00", "127.0.0.2\x00"),
        (ipaddress.ip_address("::1"), "localhost"),
        (ipaddress.ip_address("0000:0000:0000:0000:0000:0000:0000:0001"), "localhost"),
        (ipaddress.ip_address("2001:db8::1234"), "2001:db8::1234"),
        (ipaddress.ip_address("2001:0db8:0000:0000:0000:0000:0000:1234"), "2001:db8::1234"),
        ("::1", "localhost"),
        ("::1 ", "::1 "),
        ("\u2028::1\n", "\u2028::1\n"),
        ("::1\x00", "::1\x00"),
        ("0000:0000:0000:0000:0000:0000:0000:0001", "0000:0000:0000:0000:0000:0000:0000:0001"),
        ("0000:0000:0000:0000:0000:0000:0000:0001 ", "0000:0000:0000:0000:0000:0000:0000:0001 "),
        ("\u20280000:0000:0000:0000:0000:0000:0000:0001\n", "\u20280000:0000:0000:0000:0000:0000:0000:0001\n"),
        ("0000:0000:0000:0000:0000:0000:0000:0001\x00", "0000:0000:0000:0000:0000:0000:0000:0001\x00"),
        ("2001:db8::1234", "2001:db8::1234"),
        ("2001:db8::1234 ", "2001:db8::1234 "),
        ("\u20282001:db8::1234\n", "\u20282001:db8::1234\n"),
        ("2001:db8::1234\x00", "2001:db8::1234\x00"),
        ("🤍", "I 🤍 You!"),
        ("🤍 ", "🤍 "),
        ("\u2028🤍\n", "\u2028🤍\n"),
        ("🤍\x00", "🤍\x00"),
        ("This\tis\ran\femoji: 🤍", "This\tis\ran\femoji: 🤍"),
        ("This\tis\ran\femoji: 🤍 ", "This\tis\ran\femoji: 🤍 "),
        ("\u2028This\tis\ran\femoji: 🤍\n", "\u2028This\tis\ran\femoji: 🤍\n"),
        ("This\tis\ran\femoji: 🤍\x00", "This\tis\ran\femoji: 🤍\x00"),
        ("I 🤍 You!", "I 🤍 You!"),
        ("I 🤍 You! ", "I 🤍 You! "),
        ("\u2028I 🤍 You!\n", "\u2028I 🤍 You!\n"),
        ("I 🤍 You!\x00", "I 🤍 You!\x00"),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.", "Příliš žluťoučký kůň úpěl ďábelské ódy."),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy. ", "Příliš žluťoučký kůň úpěl ďábelské ódy. "),
        ("\u2028Příliš žluťoučký kůň úpěl ďábelské ódy.\n", "\u2028Příliš žluťoučký kůň úpěl ďábelské ódy.\n"),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\x00", "Příliš žluťoučký kůň úpěl ďábelské ódy.\x00"),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n", "The quick brown fox jumps over the lazy dog.\n"),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n ", "Příliš žluťoučký kůň úpěl ďábelské ódy.\n "),
        ("\u2028Příliš žluťoučký kůň úpěl ďábelské ódy.\n\n", "\u2028Příliš žluťoučký kůň úpěl ďábelské ódy.\n\n"),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n\x00", "Příliš žluťoučký kůň úpěl ďábelské ódy.\n\x00"),
        (urllib.parse.urlparse("https://www.google.com/test?abc=def"), "https://www.google.com/test?abc=def"),
        (urllib.parse.urlparse(b"https://www.google.com/test?abc=def"), InputDataTypeNotInAllowlistExc),
        (str, InputDataTypeNotInAllowlistExc),
        (object(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(
        filters=(StringStripFilter(), ReplacementMapFilter(replacement_map=[  
            ("", "<empty string>"),
            ("\r\n", "\n"),
            ("\x00", ""),
            ("hello", "HELLO!"),
            ("test", "<test string>"),
            ("123", "one two three"),
            ("True", "TRUE"),
            ("None", "NULL"),
            ("127.0.0.1", "localhost"),
            ("::1", "localhost"),
            ("🤍", "I 🤍 You!"),
            ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n", "The quick brown fox jumps over the lazy dog.\n"),
        ]),),
        parsing_mode=ParsingMode.MODE_RATIONAL
    ), (
        ("", "<empty string>"),
        ("".join([]), "<empty string>"),
        ("<empty string>", "<empty string>"),
        ("\r\n", "<empty string>"),
        ("\r \n", "<empty string>"),
        ("\r\n ", "<empty string>"),
        (" \r\n", "<empty string>"),
        ("something\r\n", "something"),
        ("\r\nsomething", "something"),
        ("some\r\nthing", "some\r\nthing"),
        ("\n", "<empty string>"),
        ("\x00", ""),
        ("\t\x00", ""),
        ("\x00\t", ""),
        ("\x00\x00", "\x00\x00"),
        ("something\x00", "something\x00"),
        ("\x00something", "\x00something"),
        ("some\x00thing", "some\x00thing"),
        ("hello", "HELLO!"),
        ("he_llo", "he_llo"),
        ("Hello", "Hello"),
        ("HELLO", "HELLO"),
        ("hello ", "HELLO!"),
        ("\u2028hello\n", "HELLO!"),
        ("hello\x00", "hello\x00"),
        ("hello world", "hello world"),
        ("HELLO!", "HELLO!"),
        ("HELLO! ", "HELLO!"),
        ("\u2028HELLO!\n", "HELLO!"),
        ("test", "<test string>"),
        ("test ", "<test string>"),
        ("\u2028test\n", "<test string>"),
        ("test\x00", "test\x00"),
        ("test 123", "test 123"),
        ("TEST", "TEST"),
        ("TEST 123", "TEST 123"),
        (123, "one two three"),
        (-123, "-123"),
        (124, "124"),
        (-124, "-124"),
        ("123", "one two three"),
        ("123 ", "one two three"),
        ("\u2028123\n", "one two three"),
        ("123\x00", "123\x00"),
        ("123 of something", "123 of something"),
        ("123 of SOMETHING", "123 of SOMETHING"),
        (True, "TRUE"),
        (False, "False"),
        ("True", "TRUE"),
        ("True ", "TRUE"),
        ("\u2028True\n", "TRUE"),
        ("True\x00", "True\x00"),
        ("true", "true"),
        ("TRUE", "TRUE"),
        ("True thing", "True thing"),
        ("True thing ", "True thing"),
        ("\u2028True thing\n", "True thing"),
        ("True thing\x00", "True thing\x00"),
        (None, "NULL"),
        ("None", "NULL"),
        ("None ", "NULL"),
        ("\u2028None\n", "NULL"),
        ("None\x00", "None\x00"),
        ("none", "none"),
        ("NONE", "NONE"),
        ("NULL", "NULL"),
        ("Null", "Null"),
        ("null", "null"),
        ("None of them", "None of them"),
        ("None of them ", "None of them"),
        ("\u2028None of them\n", "None of them"),
        ("None of them\x00", "None of them\x00"),
        (ipaddress.ip_address("127.0.0.1"), "localhost"),
        (ipaddress.ip_address(2130706433), "localhost"),
        (ipaddress.ip_address("127.0.0.2"), "127.0.0.2"),
        (ipaddress.ip_address(2130706434), "127.0.0.2"),
        ("127.0.0.1", "localhost"),
        ("127.0.0.1 ", "localhost"),
        ("\u2028127.0.0.1\n", "localhost"),
        ("127.0.0.1\x00", "127.0.0.1\x00"),
        ("localhost", "localhost"),
        ("Localhost", "Localhost"),
        ("LOCALHOST", "LOCALHOST"),
        ("127.0.0.2", "127.0.0.2"),
        ("127.0.0.2 ", "127.0.0.2"),
        ("\u2028127.0.0.2\n", "127.0.0.2"),
        ("127.0.0.2\x00", "127.0.0.2\x00"),
        (ipaddress.ip_address("::1"), "localhost"),
        (ipaddress.ip_address("0000:0000:0000:0000:0000:0000:0000:0001"), "localhost"),
        (ipaddress.ip_address("2001:db8::1234"), "2001:db8::1234"),
        (ipaddress.ip_address("2001:0db8:0000:0000:0000:0000:0000:1234"), "2001:db8::1234"),
        ("::1", "localhost"),
        ("::1 ", "localhost"),
        ("\u2028::1\n", "localhost"),
        ("::1\x00", "::1\x00"),
        ("0000:0000:0000:0000:0000:0000:0000:0001", "0000:0000:0000:0000:0000:0000:0000:0001"),
        ("0000:0000:0000:0000:0000:0000:0000:0001 ", "0000:0000:0000:0000:0000:0000:0000:0001"),
        ("\u20280000:0000:0000:0000:0000:0000:0000:0001\n", "0000:0000:0000:0000:0000:0000:0000:0001"),
        ("0000:0000:0000:0000:0000:0000:0000:0001\x00", "0000:0000:0000:0000:0000:0000:0000:0001\x00"),
        ("2001:db8::1234", "2001:db8::1234"),
        ("2001:db8::1234 ", "2001:db8::1234"),
        ("\u20282001:db8::1234\n", "2001:db8::1234"),
        ("2001:db8::1234\x00", "2001:db8::1234\x00"),
        ("🤍", "I 🤍 You!"),
        ("🤍 ", "I 🤍 You!"),
        ("\u2028🤍\n", "I 🤍 You!"),
        ("🤍\x00", "🤍\x00"),
        ("This\tis\ran\femoji: 🤍", "This\tis\ran\femoji: 🤍"),
        ("This\tis\ran\femoji: 🤍 ", "This\tis\ran\femoji: 🤍"),
        ("\u2028This\tis\ran\femoji: 🤍\n", "This\tis\ran\femoji: 🤍"),
        ("This\tis\ran\femoji: 🤍\x00", "This\tis\ran\femoji: 🤍\x00"),
        ("I 🤍 You!", "I 🤍 You!"),
        ("I 🤍 You! ", "I 🤍 You!"),
        ("\u2028I 🤍 You!\n", "I 🤍 You!"),
        ("I 🤍 You!\x00", "I 🤍 You!\x00"),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.", "Příliš žluťoučký kůň úpěl ďábelské ódy."),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy. ", "Příliš žluťoučký kůň úpěl ďábelské ódy."),
        ("\u2028Příliš žluťoučký kůň úpěl ďábelské ódy.\n", "Příliš žluťoučký kůň úpěl ďábelské ódy."),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\x00", "Příliš žluťoučký kůň úpěl ďábelské ódy.\x00"),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n", "Příliš žluťoučký kůň úpěl ďábelské ódy."),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n ", "Příliš žluťoučký kůň úpěl ďábelské ódy."),
        ("\u2028Příliš žluťoučký kůň úpěl ďábelské ódy.\n\n", "Příliš žluťoučký kůň úpěl ďábelské ódy."),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n\x00", "Příliš žluťoučký kůň úpěl ďábelské ódy.\n\x00"),
        (urllib.parse.urlparse("https://www.google.com/test?abc=def"), "https://www.google.com/test?abc=def"),
        (urllib.parse.urlparse(b"https://www.google.com/test?abc=def"), InputDataTypeNotInAllowlistExc),
        (str, InputDataTypeNotInAllowlistExc),
        (object(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (FloatBlueprint(
        filters=(ReplacementMapFilter(replacement_map=[
            (0.0, 123.456),
            (888.543, 888.111),
            (-777.222, -777.999),
            (float("inf"), 5.0),
            (float("-inf"), -5.0),
            (float("nan"), 1234.5678),
        ]),),
        parsing_mode=ParsingMode.MODE_RATIONAL,
        allow_ieee754_special_values=False
    ), (
        (0.0, expected_output_float_value("123.456")),
        (-0.0, expected_output_float_value("123.456")),  # -0.0 == 0.0
        (0, expected_output_float_value("123.456")),
        (False, expected_output_float_value("123.456")),
        ("0.0", expected_output_float_value("123.456")),
        ("\r\n000_000_0.0   \t\f\u2029", expected_output_float_value("123.456")),
        (0.1, expected_output_float_value("0.1")),
        ("\n\r  0.1  \f\t", expected_output_float_value("0.1")),
        (True, expected_output_float_value("1.0")),
        (1, expected_output_float_value("1.0")),
        (1.0, expected_output_float_value("1.0")),
        ("   1.0   \r\n", expected_output_float_value("1.0")),
        (888.543, expected_output_float_value("888.111")),
        ("\t\t  888.543   \n\n", expected_output_float_value("888.111")),
        (888.111, expected_output_float_value("888.111")),
        ("\t\t  888.111   \n\n", expected_output_float_value("888.111")),
        (888.542, expected_output_float_value("888.542")),
        ("\t\t  888.542   \n\n", expected_output_float_value("888.542")),
        (888.544, expected_output_float_value("888.544")),
        ("\t\t  888.544   \n\n", expected_output_float_value("888.544")),
        (888.0, expected_output_float_value("888.0")),
        (888, expected_output_float_value("888.0")),
        ("\t\t  888   \n\n", expected_output_float_value("888.0")),
        (-888.543, expected_output_float_value("-888.543")),
        ("\t\t  -888.543   \n\n", expected_output_float_value("-888.543")),
        (-777.222, expected_output_float_value("-777.999")),
        ("\n\n-000_000_777.222_000_000    ", expected_output_float_value("-777.999")),
        (-777.999, expected_output_float_value("-777.999")),
        ("\n\n-000_000_777.999_000_000    ", expected_output_float_value("-777.999")),
        (-777.221, expected_output_float_value("-777.221")),
        ("\n\n-000_000_777.221_000_000    ", expected_output_float_value("-777.221")),
        (-777.223, expected_output_float_value("-777.223")),
        ("\n\n-000_000_777.223_000_000    ", expected_output_float_value("-777.223")),
        (-777.0, expected_output_float_value("-777.0")),
        (-777, expected_output_float_value("-777.0")),
        ("\n\n-000_000_777    ", expected_output_float_value("-777.0")),
        (777.222, expected_output_float_value("777.222")),
        ("\n\n000_000_777.222_000_000    ", expected_output_float_value("777.222")),
        (float("inf"), InvalidInputDataExc),
        ("\t\t   inf  \f\u2029\n", InvalidInputDataExc),
        (float("-inf"), InvalidInputDataExc),
        ("\t\t   -inf  \f\u2029\n", InvalidInputDataExc),
        (float("nan"), InvalidInputDataExc),
        ("\t\t   nan  \f\u2029\n", InvalidInputDataExc),
        (None, InputDataTypeNotInAllowlistExc),
        ([], InputDataTypeNotInAllowlistExc),
        (float, InputDataTypeNotInAllowlistExc),
        (object(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (FloatBlueprint(
        filters=(ReplacementMapFilter(replacement_map=[
            (0.0, 123.456),
            (888.543, 888.111),
            (-777.222, -777.999),
            (float("inf"), 5.0),
            (float("-inf"), -5.0),
            (float("nan"), 1234.5678),
        ]),),
        parsing_mode=ParsingMode.MODE_RATIONAL,
        allow_ieee754_special_values=True
    ), (
        (0.0, expected_output_float_value("123.456")),
        (-0.0, expected_output_float_value("123.456")),  # -0.0 == 0.0
        (0, expected_output_float_value("123.456")),
        (False, expected_output_float_value("123.456")),
        ("0.0", expected_output_float_value("123.456")),
        ("\r\n000_000_0.0   \t\f\u2029", expected_output_float_value("123.456")),
        (0.1, expected_output_float_value("0.1")),
        ("\n\r  0.1  \f\t", expected_output_float_value("0.1")),
        (True, expected_output_float_value("1.0")),
        (1, expected_output_float_value("1.0")),
        (1.0, expected_output_float_value("1.0")),
        ("   1.0   \r\n", expected_output_float_value("1.0")),
        (888.543, expected_output_float_value("888.111")),
        ("\t\t  888.543   \n\n", expected_output_float_value("888.111")),
        (888.111, expected_output_float_value("888.111")),
        ("\t\t  888.111   \n\n", expected_output_float_value("888.111")),
        (888.542, expected_output_float_value("888.542")),
        ("\t\t  888.542   \n\n", expected_output_float_value("888.542")),
        (888.544, expected_output_float_value("888.544")),
        ("\t\t  888.544   \n\n", expected_output_float_value("888.544")),
        (888.0, expected_output_float_value("888.0")),
        (888, expected_output_float_value("888.0")),
        ("\t\t  888   \n\n", expected_output_float_value("888.0")),
        (-888.543, expected_output_float_value("-888.543")),
        ("\t\t  -888.543   \n\n", expected_output_float_value("-888.543")),
        (-777.222, expected_output_float_value("-777.999")),
        ("\n\n-000_000_777.222_000_000    ", expected_output_float_value("-777.999")),
        (-777.999, expected_output_float_value("-777.999")),
        ("\n\n-000_000_777.999_000_000    ", expected_output_float_value("-777.999")),
        (-777.221, expected_output_float_value("-777.221")),
        ("\n\n-000_000_777.221_000_000    ", expected_output_float_value("-777.221")),
        (-777.223, expected_output_float_value("-777.223")),
        ("\n\n-000_000_777.223_000_000    ", expected_output_float_value("-777.223")),
        (-777.0, expected_output_float_value("-777.0")),
        (-777, expected_output_float_value("-777.0")),
        ("\n\n-000_000_777    ", expected_output_float_value("-777.0")),
        (777.222, expected_output_float_value("777.222")),
        ("\n\n000_000_777.222_000_000    ", expected_output_float_value("777.222")),
        (float("inf"), expected_output_float_value("5.0")),
        ("\t\t   inf  \f\u2029\n", expected_output_float_value("5.0")),
        (float("-inf"), expected_output_float_value("-5.0")),
        ("\t\t   -inf  \f\u2029\n", expected_output_float_value("-5.0")),
        (float("nan"), expected_output_float_value("nan")),  # Python considers float("nan") != float("nan")
        ("\t\t   nan  \f\u2029\n", expected_output_float_value("nan")),  # Python considers float("nan") != float("nan")
        (None, InputDataTypeNotInAllowlistExc),
        ([], InputDataTypeNotInAllowlistExc),
        (float, InputDataTypeNotInAllowlistExc),
        (object(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (ListBlueprint(
        item_blueprint=IntegerBlueprint(  
            filters=(ReplacementMapFilter(replacement_map=[
                (0, 1),
                (123, 999),
                (-123, -999),
            ]),),
            parsing_mode=ParsingMode.MODE_STRICT
        ),
        filters=(ReplacementMapFilter(replacement_map=[
            # Keep in mind that the lists might be mutated after they get returned from the blueprint to the user (and there is probably no universal and "sane" way of tackling this problem).
            ([], [-9, -8, -7]),
            ([-999, 999, 1], [123456789]),
            ([0, 1, 2, 3], [10, 11, 12, 13, 14, 15]),
            ([1, 2, 3], [3, 2, 1]),
        ]),),
        parsing_mode=ParsingMode.MODE_STRICT
    ), (
        ([], [-9, -8, -7]),
        ([-9, -8, -7], [-9, -8, -7]),
        ([1], [1]),
        ([1, 2], [1, 2]),
        ([-999, 999, 1], [123456789]),
        ([-999, 1], [-999, 1]),
        ([-999, 999], [-999, 999]),
        ([1, -999, 999], [1, -999, 999]),
        ([1, 999, -999], [1, 999, -999]),
        ([999, -999, 1], [999, -999, 1]),
        ([-999, -999, 1], [-999, -999, 1]),
        ([-999, 999, 2], [-999, 999, 2]),
        ([-999, 1000, 1], [-999, 1000, 1]),
        ([0, 1, 2, 3], [1, 1, 2, 3]),
        ([0, 1, 2, -3], [1, 1, 2, -3]),
        ([1, 1, 2, 3], [1, 1, 2, 3]),
        ([0, 1, 2], [1, 1, 2]),
        ([1, 2], [1, 2]),
        ([0, 0, 0, 0], [1, 1, 1, 1]),
        ([1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1]),
        ([1, 0, 1, 0, -1, 0], [1, 1, 1, 1, -1, 1]),
        ([1, 2, 3], [3, 2, 1]),
        ([1, 3, 2], [1, 3, 2]),
        ([3, 2, 1], [3, 2, 1]),
        ([1, -2, 3], [1, -2, 3]),
        ([-1, 2, -3], [-1, 2, -3]),
        ([-1, -2, -3], [-1, -2, -3]),
        ([1, 2, 3, 4], [1, 2, 3, 4]),
        ([1, 2], [1, 2]),
        ([2, 3], [2, 3]),
        ([-123, 123, 0], [123456789]),
        ([-123, 0, 123], [-999, 1, 999]),
        ([0, 123, -123], [1, 999, -999]),
        ([-123, 123], [-999, 999]),
        ([123, 0], [999, 1]),
        ([-123, 0], [-999, 1]),
        ([-123], [-999]),
        ([123], [999]),
        ([0], [1]),
        ([1], [1]),
        ([0, 123, 123, -123, 0, -123], [1, 999, 999, -999, 1, -999]),
        ([0, 123, 123, -123, 777, 0, -123], [1, 999, 999, -999, 777, 1, -999]),
        ([1234567890, 0, 123, 123, -123, 777, 0, -123], [1234567890, 1, 999, 999, -999, 777, 1, -999]),
        ([5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14]),
        (tuple(), [-9, -8, -7]),
        (tuple([-9, -8, -7]), [-9, -8, -7]),
        (tuple([1]), [1]),
        (tuple([1, 2]), [1, 2]),
        (tuple([-999, 999, 1]), [123456789]),
        (tuple([-999, 1]), [-999, 1]),
        (tuple([-999, 999]), [-999, 999]),
        (tuple([1, -999, 999]), [1, -999, 999]),
        (tuple([1, 999, -999]), [1, 999, -999]),
        (tuple([999, -999, 1]), [999, -999, 1]),
        (tuple([-999, -999, 1]), [-999, -999, 1]),
        (tuple([-999, 999, 2]), [-999, 999, 2]),
        (tuple([-999, 1000, 1]), [-999, 1000, 1]),
        (tuple([0, 1, 2, 3]), [1, 1, 2, 3]),
        (tuple([0, 1, 2, -3]), [1, 1, 2, -3]),
        (tuple([1, 1, 2, 3]), [1, 1, 2, 3]),
        (tuple([0, 1, 2]), [1, 1, 2]),
        (tuple([1, 2]), [1, 2]),
        (tuple([0, 0, 0, 0]), [1, 1, 1, 1]),
        (tuple([1, 0, 1, 0, 1, 0]), [1, 1, 1, 1, 1, 1]),
        (tuple([1, 0, 1, 0, -1, 0]), [1, 1, 1, 1, -1, 1]),
        (tuple([1, 2, 3]), [3, 2, 1]),
        (tuple([1, 3, 2]), [1, 3, 2]),
        (tuple([3, 2, 1]), [3, 2, 1]),
        (tuple([1, -2, 3]), [1, -2, 3]),
        (tuple([-1, 2, -3]), [-1, 2, -3]),
        (tuple([-1, -2, -3]), [-1, -2, -3]),
        (tuple([1, 2, 3, 4]), [1, 2, 3, 4]),
        (tuple([1, 2]), [1, 2]),
        (tuple([2, 3]), [2, 3]),
        (tuple([-123, 123, 0]), [123456789]),
        (tuple([-123, 0, 123]), [-999, 1, 999]),
        (tuple([0, 123, -123]), [1, 999, -999]),
        (tuple([-123, 123]), [-999, 999]),
        (tuple([123, 0]), [999, 1]),
        (tuple([-123, 0]), [-999, 1]),
        (tuple([-123]), [-999]),
        (tuple([123]), [999]),
        (tuple([0]), [1]),
        (tuple([1]), [1]),
        (tuple([0, 123, 123, -123, 0, -123]), [1, 999, 999, -999, 1, -999]),
        (tuple([0, 123, 123, -123, 777, 0, -123]), [1, 999, 999, -999, 777, 1, -999]),
        (tuple([1234567890, 0, 123, 123, -123, 777, 0, -123]), [1234567890, 1, 999, 999, -999, 777, 1, -999]),
        (tuple([5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), [5, 6, 7, 8, 9, 10, 11, 12, 13, 14]),
        (set(), [-9, -8, -7]),
        (frozenset(), [-9, -8, -7]),
        ([5, "6", 7], InputDataTypeNotInAllowlistExc),
        ([5, 6.0, 7], InputDataTypeNotInAllowlistExc),
        ([5, None, 7], InputDataTypeNotInAllowlistExc),
        ([5, theoretical_testutils.EmptyObject(), 7], InputDataTypeNotInAllowlistExc),
        ([1, "2", 3], InputDataTypeNotInAllowlistExc),
        ([1, 2.0, 3], InputDataTypeNotInAllowlistExc),
        ([1, None, 3], InputDataTypeNotInAllowlistExc),
        ([1, theoretical_testutils.EmptyObject(), 3], InputDataTypeNotInAllowlistExc),
        (dict(), InputDataTypeNotInAllowlistExc),
        ("123", InputDataTypeNotInAllowlistExc),
        (123, InputDataTypeNotInAllowlistExc),
        (None, InputDataTypeNotInAllowlistExc),
        (list, InputDataTypeNotInAllowlistExc),
        (int, InputDataTypeNotInAllowlistExc),
        (object(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (GenericBlueprint(filters=(ReplacementMapFilter(replacement_map=[
        (True, ipaddress.ip_address("8.9.10.11")),
        (b'Hello World', "Hello World (using bytes)"),
        (datetime.datetime(2021, 1, 1, 8, 50, 51), datetime.datetime(2022, 2, 2, 9, 51, 52)),
        (456, bytearray(b"four five six\r\n")),
        ({8: "hello", 4: "world!"}, [8, "hello", 4, "WORLD"]),
        (ipaddress.ip_network("1.1.1.0/24"), uuid.UUID('{12345678-1234-5678-1234-5678123456ff}')),
        (urllib.parse.urlparse("https://www.google.com/testurl?key=value"), False),
        (str, int),
        (object, float("inf")),
        (theoretical_testutils.EmptyObject(), "\t\t EmptyObject detected on input! \t\t"),
    ]),)), (
        (None, None),
        (True, ipaddress.ip_address("8.9.10.11")),
        (False, False),
        (b'Hello World', "Hello World (using bytes)"),
        (b'Hello\tWorld', b'Hello\tWorld'),
        (b'Hello World!', b'Hello World!'),
        (b'Hello world', b'Hello world'),
        (b'hello World', b'hello World'),
        (b'Hello World ', b'Hello World '),
        (b'Hello World\n', b'Hello World\n'),
        (b'Hello Worldd', b'Hello Worldd'),
        (b'Hello Worl', b'Hello Worl'),
        (b'', b''),
        (datetime.datetime(2021, 1, 1, 8, 50, 51), datetime.datetime(2022, 2, 2, 9, 51, 52)),
        (datetime.datetime(2021, 1, 1, 8, 50, 51, 1), datetime.datetime(2021, 1, 1, 8, 50, 51, 1)),
        (datetime.datetime(2021, 1, 1, 8, 50, 52), datetime.datetime(2021, 1, 1, 8, 50, 52)),
        (datetime.datetime(2021, 1, 1, 8, 50, 50), datetime.datetime(2021, 1, 1, 8, 50, 50)),
        (datetime.datetime(2021, 1, 1, 8, 50, 51, tzinfo=datetime.timezone.utc), datetime.datetime(2021, 1, 1, 8, 50, 51, tzinfo=datetime.timezone.utc)),
        (datetime.datetime(2021, 1, 1, 8, 50, 51, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), datetime.datetime(2021, 1, 1, 8, 50, 51, tzinfo=zoneinfo.ZoneInfo("Europe/Prague"))),
        (456, bytearray(b"four five six\r\n")),
        (456.0, bytearray(b"four five six\r\n")),  # 456 == 456.0
        (456.1, 456.1),
        (455, 455),
        (457, 457),
        (-456, -456),
        (-456.0, -456.0),
        (0, 0),
        (0.0, 0.0),
        ({8: "hello", 4: "world!"}, [8, "hello", 4, "WORLD"]),
        ({4: "world!", 8: "hello"}, [8, "hello", 4, "WORLD"]),
        ({8: "hello ", 4: "world!"}, {8: "hello ", 4: "world!"}),
        ({8: "hello", 4: " world!"}, {8: "hello", 4: " world!"}),
        ({8: "Hello", 4: "world!"}, {8: "Hello", 4: "world!"}),
        ({8: "hello", 4: "World!"}, {8: "hello", 4: "World!"}),
        ({8: "hello", 4: "world"}, {8: "hello", 4: "world"}),
        ({8: "hello"}, {8: "hello"}),
        ({4: "world!"}, {4: "world!"}),
        (ipaddress.ip_network("1.1.1.0/24"), uuid.UUID('{12345678-1234-5678-1234-5678123456ff}')),
        (ipaddress.ip_network("1.1.1.0/25"), ipaddress.ip_network("1.1.1.0/25")),
        (ipaddress.ip_network("1.1.1.0/32"), ipaddress.ip_network("1.1.1.0/32")),
        (ipaddress.ip_network("1.1.2.0/24"), ipaddress.ip_network("1.1.2.0/24")),
        (ipaddress.ip_network("2.1.1.0/24"), ipaddress.ip_network("2.1.1.0/24")),
        (ipaddress.ip_network("0.0.0.0/0"), ipaddress.ip_network("0.0.0.0/0")),
        (ipaddress.ip_network("255.255.255.255/32"), ipaddress.ip_network("255.255.255.255/32")),
        (ipaddress.ip_address("1.1.1.0"), ipaddress.ip_address("1.1.1.0")),
        (ipaddress.ip_address("1.1.1.1"), ipaddress.ip_address("1.1.1.1")),
        (urllib.parse.urlparse("https://www.google.com/testurl?key=value"), False),
        (urllib.parse.urlparse("https://www.google.com/testurl?key=value#test"), urllib.parse.urlparse("https://www.google.com/testurl?key=value#test")),
        (urllib.parse.urlparse("https://www.google.com/testurl?key=valu"), urllib.parse.urlparse("https://www.google.com/testurl?key=valu")),
        (urllib.parse.urlparse("https://www.google.com/testurl4?key=value"), urllib.parse.urlparse("https://www.google.com/testurl4?key=value")),
        (urllib.parse.urlparse("https://www.google.cz/testurl?key=value"), urllib.parse.urlparse("https://www.google.cz/testurl?key=value")),
        (urllib.parse.urlparse("ftp://www.google.com/testurl?key=value"), urllib.parse.urlparse("ftp://www.google.com/testurl?key=value")),
        (object, float("inf")),
        (str, int),
        (int, int),
        (complex, complex),
        (list, list),
        (ipaddress.IPv4Network, ipaddress.IPv4Network),
        (datetime.time, datetime.time),
        (theoretical_testutils.EmptyObject, theoretical_testutils.EmptyObject),
        (theoretical_testutils.EmptyObject(), "\t\t EmptyObject detected on input! \t\t"),
    )),
)


@pytest.mark.parametrize(("blueprint", "input_", "output"), theoretical_testutils.test_function_parameter_generator(__REPLACEMENT_MAP_FILTER_TEST_SUITE))
def test_replacement_map_filter(blueprint, input_, output):
    theoretical_testutils.perform_test(blueprint, input_, output)


@pytest.mark.parametrize("map_", (tuple(), []))
def test_replacement_map_filter_empty_replacement_map(map_):
    with pytest.raises(InvalidFilterConfigError):
        ReplacementMapFilter(replacement_map=map_)


@pytest.mark.parametrize("map_", (
    [("abc", "xyz")],
    [("abc", "xyz"), ("řeřicha", "ŘEŘICHA")],
    [("abc", "xyz"), ("řeřicha", "ŘEŘICHA"), ("\r\n", "\n")],
    [("abc", "xyz"), ("řeřicha", "ŘEŘICHA"), ("\r\n", "\n"), ("\x00\x00", "\x00")],
    [("abc", "xyz"), ("řeřicha", "ŘEŘICHA"), ("\r\n", "\n"), ("\x00\x00", "\x00"), ("", " ")],
    [("abc", "xyz"), ("řeřicha", "ŘEŘICHA"), ("\r\n", "\n"), ("\x00\x00", "\x00"), ("", " "), ("🤍", "🤍🤍")],
))
def test_replacement_map_filter_replacement_map(map_):
    assert ReplacementMapFilter(replacement_map=map_).get_replacement_map() == tuple(map_)
