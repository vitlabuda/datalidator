#!/bin/false

# Copyright (c) 2022 Vít Labuda. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
# following conditions are met:
#  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
#     disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
#     following disclaimer in the documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
#     products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


import os.path
import sys
__TESTS_DIR = os.path.dirname(os.path.realpath(__file__))  
__MODULE_DIR = os.path.realpath(os.path.join(__TESTS_DIR, "../.."))  
if __TESTS_DIR not in sys.path:  
    sys.path.insert(0, __TESTS_DIR)  
if __MODULE_DIR not in sys.path:  
    sys.path.insert(0, __MODULE_DIR)  

import theoretical_testutils
import pytest
import datetime
import zoneinfo
import ipaddress
import urllib.parse
import uuid
from test_006_float_blueprint import expected_output_float_value
from datalidator.validators.impl.AllowlistValidator import AllowlistValidator
from datalidator.validators.exc.DataValidationFailedExc import DataValidationFailedExc
from datalidator.validators.exc.err.InvalidValidatorConfigError import InvalidValidatorConfigError
from datalidator.blueprints.ParsingMode import ParsingMode
from datalidator.blueprints.impl.StringBlueprint import StringBlueprint
from datalidator.blueprints.impl.IntegerBlueprint import IntegerBlueprint
from datalidator.blueprints.impl.FloatBlueprint import FloatBlueprint
from datalidator.blueprints.impl.ListBlueprint import ListBlueprint
from datalidator.blueprints.impl.GenericBlueprint import GenericBlueprint
from datalidator.blueprints.exc.InvalidInputDataExc import InvalidInputDataExc
from datalidator.blueprints.exc.InputDataNotConvertibleExc import InputDataNotConvertibleExc
from datalidator.blueprints.exc.InputDataTypeNotInAllowlistExc import InputDataTypeNotInAllowlistExc
from datalidator.filters.impl.StringStripFilter import StringStripFilter


__ALLOWLIST_VALIDATOR_TEST_SUITE = (
    (StringBlueprint(
        validators=(AllowlistValidator(allowlist=[
            "",
            "abc",
            "\r\n",
            "\x00",
            "🤍",
            "řeřicha",
            "Příliš žluťoučký kůň úpěl ďábelské ódy.\n",
            "123",
            "True",
            "None",
            "127.0.0.1",
            "::1",
        ]),),
        parsing_mode=ParsingMode.MODE_RATIONAL
    ), (
        ("", ""),
        ("".join([]), ""),
        (" ", DataValidationFailedExc),
        ("\u2029\x85", DataValidationFailedExc),
        ("X", DataValidationFailedExc),
        ("abc", "abc"),
        ("abc ", DataValidationFailedExc),
        ("\u2029abc\x85", DataValidationFailedExc),
        ("abc\x00", DataValidationFailedExc),
        ("abcX", DataValidationFailedExc),
        ("ABC", DataValidationFailedExc),
        ("Abc", DataValidationFailedExc),
        ("abc something", DataValidationFailedExc),
        ("abc something!", DataValidationFailedExc),
        ("\r\n", "\r\n"),
        ("\r\n ", DataValidationFailedExc),
        ("\u2029\r\n\x85", DataValidationFailedExc),
        ("\r\n\x00", DataValidationFailedExc),
        ("\r\nX", DataValidationFailedExc),
        ("\n", DataValidationFailedExc),
        ("\r", DataValidationFailedExc),
        ("\n\r", DataValidationFailedExc),
        ("\r\n\n", DataValidationFailedExc),
        ("\r\n\r", DataValidationFailedExc),
        ("\x00", "\x00"),
        ("\x00 ", DataValidationFailedExc),
        ("\u2029\x00\x85", DataValidationFailedExc),
        ("\x00\x00", DataValidationFailedExc),
        ("\x00X", DataValidationFailedExc),
        ("\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", DataValidationFailedExc),
        ("\x01", DataValidationFailedExc),
        ("🤍", "🤍"),
        ("🤍 ", DataValidationFailedExc),
        ("\u2029🤍\x85", DataValidationFailedExc),
        ("🤍\x00", DataValidationFailedExc),
        ("🤍X", DataValidationFailedExc),
        ("řeřicha", "řeřicha"),
        ("řeřicha ", DataValidationFailedExc),
        ("\u2029řeřicha\x85", DataValidationFailedExc),
        ("řeřicha\x00", DataValidationFailedExc),
        ("řeřichaX", DataValidationFailedExc),
        ("ŘEŘICHA", DataValidationFailedExc),
        ("Řeřicha", DataValidationFailedExc),
        ("řeřicha květina", DataValidationFailedExc),
        ("řeřicha květina!", DataValidationFailedExc),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n", "Příliš žluťoučký kůň úpěl ďábelské ódy.\n"),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n ", DataValidationFailedExc),
        ("\u2028Příliš žluťoučký kůň úpěl ďábelské ódy.\n\x85", DataValidationFailedExc),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n\x00", DataValidationFailedExc),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\nX", DataValidationFailedExc),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.", DataValidationFailedExc),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\r", DataValidationFailedExc),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy\n", DataValidationFailedExc),
        ("PŘíliš žluťoučký kůň úpěl ďábelské ódy.\n", DataValidationFailedExc),
        ("Příliš\tžluťoučký kůň úpěl ďábelské ódy.\n", DataValidationFailedExc),
        ("Příliš žluťoučký kůň  úpěl ďábelské ódy.\n", DataValidationFailedExc),
        ("PŘÍLIŠ ŽLUŤOUČKÝ KŮŇ ÚPĚL ĎÁBELSKÉ ÓDY.\n", DataValidationFailedExc),
        (123, "123"),
        ("123", "123"),
        ("123\x00", DataValidationFailedExc),
        ("123X", DataValidationFailedExc),
        ("\r\n   123  \x1d\u2028", DataValidationFailedExc),
        (123.0, DataValidationFailedExc),
        ("123.0", DataValidationFailedExc),
        ("123.0\x00", DataValidationFailedExc),
        ("123.0X", DataValidationFailedExc),
        ("\r\n   123.0  \x1d\u2028", DataValidationFailedExc),
        (123.9, DataValidationFailedExc),
        ("123.9", DataValidationFailedExc),
        ("123.9\x00", DataValidationFailedExc),
        ("123.9X", DataValidationFailedExc),
        ("\r\n   123.9  \x1d\u2028", DataValidationFailedExc),
        (122, DataValidationFailedExc),
        ("122", DataValidationFailedExc),
        ("122\x00", DataValidationFailedExc),
        ("122X", DataValidationFailedExc),
        ("\r\n   122  \x1d\u2028", DataValidationFailedExc),
        (124, DataValidationFailedExc),
        ("124", DataValidationFailedExc),
        ("124\x00", DataValidationFailedExc),
        ("124X", DataValidationFailedExc),
        ("\r\n   124  \x1d\u2028", DataValidationFailedExc),
        (True, "True"),
        ("True", "True"),
        ("True ", DataValidationFailedExc),
        ("\u2029True\x85", DataValidationFailedExc),
        ("True\x00", DataValidationFailedExc),
        ("TrueX", DataValidationFailedExc),
        ("TRUE", DataValidationFailedExc),
        ("true", DataValidationFailedExc),
        ("TruE", DataValidationFailedExc),
        ("This is True", DataValidationFailedExc),
        ("This is True!", DataValidationFailedExc),
        (False, DataValidationFailedExc),
        ("False", DataValidationFailedExc),
        ("FalseX", DataValidationFailedExc),
        (None, "None"),
        ("None", "None"),
        ("None ", DataValidationFailedExc),
        ("\u2029None\x85", DataValidationFailedExc),
        ("None\x00", DataValidationFailedExc),
        ("NoneX", DataValidationFailedExc),
        ("NONE", DataValidationFailedExc),
        ("none", DataValidationFailedExc),
        ("NonE", DataValidationFailedExc),
        ("This is None", DataValidationFailedExc),
        ("This is None!", DataValidationFailedExc),
        (ipaddress.ip_address("127.0.0.1"), "127.0.0.1"),
        ("127.0.0.1", "127.0.0.1"),
        ("127.0.0.1 ", DataValidationFailedExc),
        ("\u2029127.0.0.1\x85", DataValidationFailedExc),
        ("127.0.0.1\x00", DataValidationFailedExc),
        ("127.0.0.1X", DataValidationFailedExc),
        (ipaddress.ip_address("127.0.0.2"), DataValidationFailedExc),
        ("127.0.0.2", DataValidationFailedExc),
        (ipaddress.ip_address("8.8.8.8"), DataValidationFailedExc),
        ("8.8.8.8", DataValidationFailedExc),
        (ipaddress.ip_address("::1"), "::1"),
        (ipaddress.ip_address("0000:0000:0000:0000:0000:0000:0000:0001"), "::1"),
        ("::1", "::1"),
        ("0000:0000:0000:0000:0000:0000:0000:0001", DataValidationFailedExc),
        ("::1 ", DataValidationFailedExc),
        ("0000:0000:0000:0000:0000:0000:0000:0001 ", DataValidationFailedExc),
        ("\u2029::1\x85", DataValidationFailedExc),
        ("\u20290000:0000:0000:0000:0000:0000:0000:0001\x85", DataValidationFailedExc),
        ("::1\x00", DataValidationFailedExc),
        ("0000:0000:0000:0000:0000:0000:0000:0001\x00", DataValidationFailedExc),
        ("::1X", DataValidationFailedExc),
        ("0000:0000:0000:0000:0000:0000:0000:0001X", DataValidationFailedExc),
        (ipaddress.ip_address("2001:db8::ffff"), DataValidationFailedExc),
        (ipaddress.ip_address("2001:0db8:0000:0000:0000:0000:0000:ffff"), DataValidationFailedExc),
        ("2001:db8::ffff", DataValidationFailedExc),
        ("2001:0db8:0000:0000:0000:0000:0000:ffff", DataValidationFailedExc),
        (float("-inf"), DataValidationFailedExc),
        (float("nan"), DataValidationFailedExc),
        (urllib.parse.urlparse("https://www.google.com/thisisatest?key=value&key2=value2"), DataValidationFailedExc),
        (urllib.parse.urlparse(b"https://www.google.com/thisisatest?key=value&key2=value2"), InputDataTypeNotInAllowlistExc),
        (str, InputDataTypeNotInAllowlistExc),
        (object(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(
        filters=(StringStripFilter(),),
        validators=(AllowlistValidator(allowlist=[
            "",
            "abc",
            "\r\n",
            "\x00",
            "🤍",
            "řeřicha",
            "Příliš žluťoučký kůň úpěl ďábelské ódy.\n",
            "123",
            "True",
            "None",
            "127.0.0.1",
            "::1",
        ]),),
        parsing_mode=ParsingMode.MODE_RATIONAL
    ), (
        ("", ""),
        ("".join([]), ""),
        (" ", ""),
        ("\u2029\x85", ""),
        ("X", DataValidationFailedExc),
        ("abc", "abc"),
        ("abc ", "abc"),
        ("\u2029abc\x85", "abc"),
        ("abc\x00", DataValidationFailedExc),
        ("abcX", DataValidationFailedExc),
        ("ABC", DataValidationFailedExc),
        ("Abc", DataValidationFailedExc),
        ("abc something", DataValidationFailedExc),
        ("abc something!", DataValidationFailedExc),
        ("\r\n", ""),
        ("\r\n ", ""),
        ("\u2029\r\n\x85", ""),
        ("\r\n\x00", "\x00"),
        ("\r\nX", DataValidationFailedExc),
        ("\n", ""),
        ("\r", ""),
        ("\n\r", ""),
        ("\r\n\n", ""),
        ("\r\n\r", ""),
        ("\x00", "\x00"),
        ("\x00 ", "\x00"),
        ("\u2029\x00\x85", "\x00"),
        ("\x00\x00", DataValidationFailedExc),
        ("\x00X", DataValidationFailedExc),
        ("\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", DataValidationFailedExc),
        ("\x01", DataValidationFailedExc),
        ("🤍", "🤍"),
        ("🤍 ", "🤍"),
        ("\u2029🤍\x85", "🤍"),
        ("🤍\x00", DataValidationFailedExc),
        ("🤍X", DataValidationFailedExc),
        ("řeřicha", "řeřicha"),
        ("řeřicha ", "řeřicha"),
        ("\u2029řeřicha\x85", "řeřicha"),
        ("řeřicha\x00", DataValidationFailedExc),
        ("řeřichaX", DataValidationFailedExc),
        ("ŘEŘICHA", DataValidationFailedExc),
        ("Řeřicha", DataValidationFailedExc),
        ("řeřicha květina", DataValidationFailedExc),
        ("řeřicha květina!", DataValidationFailedExc),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n", DataValidationFailedExc),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n ", DataValidationFailedExc),
        ("\u2028Příliš žluťoučký kůň úpěl ďábelské ódy.\n\x85", DataValidationFailedExc),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n\x00", DataValidationFailedExc),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\nX", DataValidationFailedExc),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.", DataValidationFailedExc),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\r", DataValidationFailedExc),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy\n", DataValidationFailedExc),
        ("PŘíliš žluťoučký kůň úpěl ďábelské ódy.\n", DataValidationFailedExc),
        ("Příliš\tžluťoučký kůň úpěl ďábelské ódy.\n", DataValidationFailedExc),
        ("Příliš žluťoučký kůň  úpěl ďábelské ódy.\n", DataValidationFailedExc),
        ("PŘÍLIŠ ŽLUŤOUČKÝ KŮŇ ÚPĚL ĎÁBELSKÉ ÓDY.\n", DataValidationFailedExc),
        (123, "123"),
        ("123", "123"),
        ("123\x00", DataValidationFailedExc),
        ("123X", DataValidationFailedExc),
        ("\r\n   123  \x1d\u2028", "123"),
        (123.0, DataValidationFailedExc),
        ("123.0", DataValidationFailedExc),
        ("123.0\x00", DataValidationFailedExc),
        ("123.0X", DataValidationFailedExc),
        ("\r\n   123.0  \x1d\u2028", DataValidationFailedExc),
        (123.9, DataValidationFailedExc),
        ("123.9", DataValidationFailedExc),
        ("123.9\x00", DataValidationFailedExc),
        ("123.9X", DataValidationFailedExc),
        ("\r\n   123.9  \x1d\u2028", DataValidationFailedExc),
        (122, DataValidationFailedExc),
        ("122", DataValidationFailedExc),
        ("122\x00", DataValidationFailedExc),
        ("122X", DataValidationFailedExc),
        ("\r\n   122  \x1d\u2028", DataValidationFailedExc),
        (124, DataValidationFailedExc),
        ("124", DataValidationFailedExc),
        ("124\x00", DataValidationFailedExc),
        ("124X", DataValidationFailedExc),
        ("\r\n   124  \x1d\u2028", DataValidationFailedExc),
        (True, "True"),
        ("True", "True"),
        ("True ", "True"),
        ("\u2029True\x85", "True"),
        ("True\x00", DataValidationFailedExc),
        ("TrueX", DataValidationFailedExc),
        ("TRUE", DataValidationFailedExc),
        ("true", DataValidationFailedExc),
        ("TruE", DataValidationFailedExc),
        ("This is True", DataValidationFailedExc),
        ("This is True!", DataValidationFailedExc),
        (False, DataValidationFailedExc),
        ("False", DataValidationFailedExc),
        ("FalseX", DataValidationFailedExc),
        (None, "None"),
        ("None", "None"),
        ("None ", "None"),
        ("\u2029None\x85", "None"),
        ("None\x00", DataValidationFailedExc),
        ("NoneX", DataValidationFailedExc),
        ("NONE", DataValidationFailedExc),
        ("none", DataValidationFailedExc),
        ("NonE", DataValidationFailedExc),
        ("This is None", DataValidationFailedExc),
        ("This is None!", DataValidationFailedExc),
        (ipaddress.ip_address("127.0.0.1"), "127.0.0.1"),
        ("127.0.0.1", "127.0.0.1"),
        ("127.0.0.1 ", "127.0.0.1"),
        ("\u2029127.0.0.1\x85", "127.0.0.1"),
        ("127.0.0.1\x00", DataValidationFailedExc),
        ("127.0.0.1X", DataValidationFailedExc),
        (ipaddress.ip_address("127.0.0.2"), DataValidationFailedExc),
        ("127.0.0.2", DataValidationFailedExc),
        (ipaddress.ip_address("8.8.8.8"), DataValidationFailedExc),
        ("8.8.8.8", DataValidationFailedExc),
        (ipaddress.ip_address("::1"), "::1"),
        (ipaddress.ip_address("0000:0000:0000:0000:0000:0000:0000:0001"), "::1"),
        ("::1", "::1"),
        ("0000:0000:0000:0000:0000:0000:0000:0001", DataValidationFailedExc),
        ("::1 ", "::1"),
        ("0000:0000:0000:0000:0000:0000:0000:0001 ", DataValidationFailedExc),
        ("\u2029::1\x85", "::1"),
        ("\u20290000:0000:0000:0000:0000:0000:0000:0001\x85", DataValidationFailedExc),
        ("::1\x00", DataValidationFailedExc),
        ("0000:0000:0000:0000:0000:0000:0000:0001\x00", DataValidationFailedExc),
        ("::1X", DataValidationFailedExc),
        ("0000:0000:0000:0000:0000:0000:0000:0001X", DataValidationFailedExc),
        (ipaddress.ip_address("2001:db8::ffff"), DataValidationFailedExc),
        (ipaddress.ip_address("2001:0db8:0000:0000:0000:0000:0000:ffff"), DataValidationFailedExc),
        ("2001:db8::ffff", DataValidationFailedExc),
        ("2001:0db8:0000:0000:0000:0000:0000:ffff", DataValidationFailedExc),
        (float("-inf"), DataValidationFailedExc),
        (float("nan"), DataValidationFailedExc),
        (urllib.parse.urlparse("https://www.google.com/thisisatest?key=value&key2=value2"), DataValidationFailedExc),
        (urllib.parse.urlparse(b"https://www.google.com/thisisatest?key=value&key2=value2"), InputDataTypeNotInAllowlistExc),
        (str, InputDataTypeNotInAllowlistExc),
        (object(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (FloatBlueprint(
        validators=(AllowlistValidator(allowlist=[
            0.0,
            888.555,
            -777.111,
            float("inf"),
            float("nan")
        ]),),
        parsing_mode=ParsingMode.MODE_RATIONAL,
        allow_ieee754_special_values=False
    ), (
        (0.0, expected_output_float_value("0.0")),
        (-0.0, expected_output_float_value("0.0")),
        (0, expected_output_float_value("0.0")),
        (False, expected_output_float_value("0.0")),
        ("\r\n\t  000_0.00000  \x85\u2028", expected_output_float_value("0.0")),
        (0.1, DataValidationFailedExc),
        ("\r\n\t  000_0.10000  \x85\u2028", DataValidationFailedExc),
        (1.0, DataValidationFailedExc),
        (1, DataValidationFailedExc),
        (True, DataValidationFailedExc),
        ("\r\n\t  1  \x85\u2028", DataValidationFailedExc),
        (888.555, expected_output_float_value("888.555")),
        ("\r\n\t  888.555  \x85\u2028", expected_output_float_value("888.555")),
        (888.554, DataValidationFailedExc),
        ("\r\n\t  888.554  \x85\u2028", DataValidationFailedExc),
        (888.556, DataValidationFailedExc),
        ("\r\n\t  888.556  \x85\u2028", DataValidationFailedExc),
        (888.5555, DataValidationFailedExc),
        ("\r\n\t  888.5555  \x85\u2028", DataValidationFailedExc),
        (-888.555, DataValidationFailedExc),
        ("\r\n\t  -888.555  \x85\u2028", DataValidationFailedExc),
        (888.0, DataValidationFailedExc),
        (888, DataValidationFailedExc),
        ("\r\n\t  888.0  \x85\u2028", DataValidationFailedExc),
        (-777.111, expected_output_float_value("-777.111")),
        ("\r\n\t  -777.111  \x85\u2028", expected_output_float_value("-777.111")),
        (-777.110, DataValidationFailedExc),
        ("\r\n\t  -777.110  \x85\u2028", DataValidationFailedExc),
        (-777.112, DataValidationFailedExc),
        ("\r\n\t  -777.112  \x85\u2028", DataValidationFailedExc),
        (-777.1111, DataValidationFailedExc),
        ("\r\n\t  -777.1111  \x85\u2028", DataValidationFailedExc),
        (777.111, DataValidationFailedExc),
        ("\r\n\t  777.111  \x85\u2028", DataValidationFailedExc),
        (-777.0, DataValidationFailedExc),
        (-777, DataValidationFailedExc),
        ("\r\n\t  -777.0  \x85\u2028", DataValidationFailedExc),
        (float("inf"), InvalidInputDataExc),
        ("\r\n\t  inf  \x85\u2028", InvalidInputDataExc),
        (float("-inf"), InvalidInputDataExc),
        ("\r\n\t  -inf  \x85\u2028", InvalidInputDataExc),
        (float("nan"), InvalidInputDataExc),
        ("\r\n\t  nan  \x85\u2028", InvalidInputDataExc),
        ("", InputDataNotConvertibleExc),
        ("\n", InputDataNotConvertibleExc),
        ("hello", InputDataNotConvertibleExc),
        (None, InputDataTypeNotInAllowlistExc),
        ([], InputDataTypeNotInAllowlistExc),
        (float, InputDataTypeNotInAllowlistExc),
        (object(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (FloatBlueprint(
        validators=(AllowlistValidator(allowlist=[
            0.0,
            888.555,
            -777.111,
            float("inf"),
            float("nan")
        ]),),
        parsing_mode=ParsingMode.MODE_RATIONAL,
        allow_ieee754_special_values=True
    ), (
        (0.0, expected_output_float_value("0.0")),
        (-0.0, expected_output_float_value("-0.0")),  # 0.0 == -0.0
        (0, expected_output_float_value("0.0")),
        (False, expected_output_float_value("0.0")),
        ("\r\n\t  000_0.00000  \x85\u2028", expected_output_float_value("0.0")),
        (0.1, DataValidationFailedExc),
        ("\r\n\t  000_0.10000  \x85\u2028", DataValidationFailedExc),
        (1.0, DataValidationFailedExc),
        (1, DataValidationFailedExc),
        (True, DataValidationFailedExc),
        ("\r\n\t  1  \x85\u2028", DataValidationFailedExc),
        (888.555, expected_output_float_value("888.555")),
        ("\r\n\t  888.555  \x85\u2028", expected_output_float_value("888.555")),
        (888.554, DataValidationFailedExc),
        ("\r\n\t  888.554  \x85\u2028", DataValidationFailedExc),
        (888.556, DataValidationFailedExc),
        ("\r\n\t  888.556  \x85\u2028", DataValidationFailedExc),
        (888.5555, DataValidationFailedExc),
        ("\r\n\t  888.5555  \x85\u2028", DataValidationFailedExc),
        (-888.555, DataValidationFailedExc),
        ("\r\n\t  -888.555  \x85\u2028", DataValidationFailedExc),
        (888.0, DataValidationFailedExc),
        (888, DataValidationFailedExc),
        ("\r\n\t  888.0  \x85\u2028", DataValidationFailedExc),
        (-777.111, expected_output_float_value("-777.111")),
        ("\r\n\t  -777.111  \x85\u2028", expected_output_float_value("-777.111")),
        (-777.110, DataValidationFailedExc),
        ("\r\n\t  -777.110  \x85\u2028", DataValidationFailedExc),
        (-777.112, DataValidationFailedExc),
        ("\r\n\t  -777.112  \x85\u2028", DataValidationFailedExc),
        (-777.1111, DataValidationFailedExc),
        ("\r\n\t  -777.1111  \x85\u2028", DataValidationFailedExc),
        (777.111, DataValidationFailedExc),
        ("\r\n\t  777.111  \x85\u2028", DataValidationFailedExc),
        (-777.0, DataValidationFailedExc),
        (-777, DataValidationFailedExc),
        ("\r\n\t  -777.0  \x85\u2028", DataValidationFailedExc),
        (float("inf"), expected_output_float_value("inf")),
        ("\r\n\t  inf  \x85\u2028", expected_output_float_value("inf")),
        (float("-inf"), DataValidationFailedExc),
        ("\r\n\t  -inf  \x85\u2028", DataValidationFailedExc),
        (float("nan"), DataValidationFailedExc),  # Python considers float("nan") != float("nan")
        ("\r\n\t  nan  \x85\u2028", DataValidationFailedExc),  # Python considers float("nan") != float("nan")
        ("", InputDataNotConvertibleExc),
        ("\n", InputDataNotConvertibleExc),
        ("hello", InputDataNotConvertibleExc),
        (None, InputDataTypeNotInAllowlistExc),
        ([], InputDataTypeNotInAllowlistExc),
        (float, InputDataTypeNotInAllowlistExc),
        (object(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (ListBlueprint(
        item_blueprint=IntegerBlueprint(  
            validators=(AllowlistValidator(allowlist=[
                1,
                333,
                -333
            ]),),
            parsing_mode=ParsingMode.MODE_STRICT
        ),
        validators=(AllowlistValidator(allowlist=[
            [],
            [1],
            [-333, 1, 333],
            [-333, 2, 333],
            [5, 6, 7]
        ]),),
        parsing_mode=ParsingMode.MODE_STRICT
    ), (
        ([], []),
        ([1], [1]),
        ([2], DataValidationFailedExc),
        ([-1], DataValidationFailedExc),
        ([0], DataValidationFailedExc),
        ([-333, 1, 333], [-333, 1, 333]),
        ([333, 1, -333], DataValidationFailedExc),
        ([-333, 333, 1], DataValidationFailedExc),
        ([1, -333, 333], DataValidationFailedExc),
        ([1, 333, -333], DataValidationFailedExc),
        ([-333, 1], DataValidationFailedExc),
        ([333, 1], DataValidationFailedExc),
        ([1, 333], DataValidationFailedExc),
        ([1, -333], DataValidationFailedExc),
        ([333], DataValidationFailedExc),
        ([-333], DataValidationFailedExc),
        ([-333, 1, 1, 333], DataValidationFailedExc),
        ([-333, 1, 333, 333], DataValidationFailedExc),
        ([-333, -333, 1, 333], DataValidationFailedExc),
        ([-333, 1, 333, 1], DataValidationFailedExc),
        ([-333, 1, 333, 1, 333, 333, -333, 333, 1, 1, 1], DataValidationFailedExc),
        ([1, 1, 1, 1, -333, 1, 333, 1, 333, 333, -333, 333, 1, 1, 1], DataValidationFailedExc),
        ([-333, 2, 333], DataValidationFailedExc),
        ([333, 2, -333], DataValidationFailedExc),
        ([-333, 333, 2], DataValidationFailedExc),
        ([2, -333, 333], DataValidationFailedExc),
        ([2, 333, -333], DataValidationFailedExc),
        ([-333, 2], DataValidationFailedExc),
        ([333, 2], DataValidationFailedExc),
        ([2, 333], DataValidationFailedExc),
        ([2, -333], DataValidationFailedExc),
        ([333], DataValidationFailedExc),
        ([-333], DataValidationFailedExc),
        ([-333, 2, 2, 333], DataValidationFailedExc),
        ([-333, 2, 333, 333], DataValidationFailedExc),
        ([-333, -333, 2, 333], DataValidationFailedExc),
        ([-333, 2, 333, 2], DataValidationFailedExc),
        ([-333, 2, 333, 2, 333, 333, -333, 333, 2, 2, 2], DataValidationFailedExc),
        ([2, 2, 2, 2, -333, 2, 333, 2, 333, 333, -333, 333, 2, 2, 2], DataValidationFailedExc),
        ([5, 6, 7], DataValidationFailedExc),
        ([7, 6, 5], DataValidationFailedExc),
        ([6, 5], DataValidationFailedExc),
        ([5, 6], DataValidationFailedExc),
        ([6, 7], DataValidationFailedExc),
        ([5], DataValidationFailedExc),
        ([6], DataValidationFailedExc),
        ([7], DataValidationFailedExc),
        ([5, 6, 7, 5], DataValidationFailedExc),
        ([5, 6, 6, 7], DataValidationFailedExc),
        ([5, 6, 6, 7, 6, 7, 5, 6, 7, 5, 5, 5, 5], DataValidationFailedExc),
        ([-333, 1, 2, 333], DataValidationFailedExc),
        ([-333, 5, 1, 333], DataValidationFailedExc),
        ([-333, 1, 333, 6], DataValidationFailedExc),
        ([7, -333, 1, 333], DataValidationFailedExc),
        ([-333, -1, 333], DataValidationFailedExc),
        ([333, -1, -333], DataValidationFailedExc),
        (tuple(), []),
        (tuple([1]), [1]),
        (tuple([2]), DataValidationFailedExc),
        (tuple([-1]), DataValidationFailedExc),
        (tuple([0]), DataValidationFailedExc),
        (tuple([-333, 1, 333]), [-333, 1, 333]),
        (tuple([333, 1, -333]), DataValidationFailedExc),
        (tuple([-333, 333, 1]), DataValidationFailedExc),
        (tuple([1, -333, 333]), DataValidationFailedExc),
        (tuple([1, 333, -333]), DataValidationFailedExc),
        (tuple([-333, 1]), DataValidationFailedExc),
        (tuple([333, 1]), DataValidationFailedExc),
        (tuple([1, 333]), DataValidationFailedExc),
        (tuple([1, -333]), DataValidationFailedExc),
        (tuple([333]), DataValidationFailedExc),
        (tuple([-333]), DataValidationFailedExc),
        (tuple([-333, 1, 1, 333]), DataValidationFailedExc),
        (tuple([-333, 1, 333, 333]), DataValidationFailedExc),
        (tuple([-333, -333, 1, 333]), DataValidationFailedExc),
        (tuple([-333, 1, 333, 1]), DataValidationFailedExc),
        (tuple([-333, 1, 333, 1, 333, 333, -333, 333, 1, 1, 1]), DataValidationFailedExc),
        (tuple([1, 1, 1, 1, -333, 1, 333, 1, 333, 333, -333, 333, 1, 1, 1]), DataValidationFailedExc),
        (tuple([-333, 2, 333]), DataValidationFailedExc),
        (tuple([333, 2, -333]), DataValidationFailedExc),
        (tuple([-333, 333, 2]), DataValidationFailedExc),
        (tuple([2, -333, 333]), DataValidationFailedExc),
        (tuple([2, 333, -333]), DataValidationFailedExc),
        (tuple([-333, 2]), DataValidationFailedExc),
        (tuple([333, 2]), DataValidationFailedExc),
        (tuple([2, 333]), DataValidationFailedExc),
        (tuple([2, -333]), DataValidationFailedExc),
        (tuple([333]), DataValidationFailedExc),
        (tuple([-333]), DataValidationFailedExc),
        (tuple([-333, 2, 2, 333]), DataValidationFailedExc),
        (tuple([-333, 2, 333, 333]), DataValidationFailedExc),
        (tuple([-333, -333, 2, 333]), DataValidationFailedExc),
        (tuple([-333, 2, 333, 2]), DataValidationFailedExc),
        (tuple([-333, 2, 333, 2, 333, 333, -333, 333, 2, 2, 2]), DataValidationFailedExc),
        (tuple([2, 2, 2, 2, -333, 2, 333, 2, 333, 333, -333, 333, 2, 2, 2]), DataValidationFailedExc),
        (tuple([5, 6, 7]), DataValidationFailedExc),
        (tuple([7, 6, 5]), DataValidationFailedExc),
        (tuple([6, 5]), DataValidationFailedExc),
        (tuple([5, 6]), DataValidationFailedExc),
        (tuple([6, 7]), DataValidationFailedExc),
        (tuple([5]), DataValidationFailedExc),
        (tuple([6]), DataValidationFailedExc),
        (tuple([7]), DataValidationFailedExc),
        (tuple([5, 6, 7, 5]), DataValidationFailedExc),
        (tuple([5, 6, 6, 7]), DataValidationFailedExc),
        (tuple([5, 6, 6, 7, 6, 7, 5, 6, 7, 5, 5, 5, 5]), DataValidationFailedExc),
        (tuple([-333, 1, 2, 333]), DataValidationFailedExc),
        (tuple([-333, 5, 1, 333]), DataValidationFailedExc),
        (tuple([-333, 1, 333, 6]), DataValidationFailedExc),
        (tuple([7, -333, 1, 333]), DataValidationFailedExc),
        (tuple([-333, -1, 333]), DataValidationFailedExc),
        (tuple([333, -1, -333]), DataValidationFailedExc),
        (set(), []),
        (frozenset(), []),
        ([-333, "1", 333], InputDataTypeNotInAllowlistExc),
        ([-333, 1.0, 333], InputDataTypeNotInAllowlistExc),
        ([-333, None, 333], InputDataTypeNotInAllowlistExc),
        ([-333, theoretical_testutils.EmptyObject(), 333], InputDataTypeNotInAllowlistExc),
        ([5, "6", 7], DataValidationFailedExc),
        ([5, 6.0, 7], DataValidationFailedExc),
        ([5, None, 7], DataValidationFailedExc),
        ([5, theoretical_testutils.EmptyObject(), 7], DataValidationFailedExc),
        (["5", 6, 7], InputDataTypeNotInAllowlistExc),
        ([5.0, 6, 7], InputDataTypeNotInAllowlistExc),
        ([None, 6, 7], InputDataTypeNotInAllowlistExc),
        ([theoretical_testutils.EmptyObject(), 6, 7], InputDataTypeNotInAllowlistExc),
        (dict(), InputDataTypeNotInAllowlistExc),
        ("", InputDataTypeNotInAllowlistExc),
        ("333", InputDataTypeNotInAllowlistExc),
        (b"", InputDataTypeNotInAllowlistExc),
        (b"333", InputDataTypeNotInAllowlistExc),
        (333, InputDataTypeNotInAllowlistExc),
        (333.5, InputDataTypeNotInAllowlistExc),
        (True, InputDataTypeNotInAllowlistExc),
        (None, InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_address("127.0.0.1"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_network("8.8.8.0/24"), InputDataTypeNotInAllowlistExc),
        (list, InputDataTypeNotInAllowlistExc),
        (int, InputDataTypeNotInAllowlistExc),
        (object(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (GenericBlueprint(
        validators=(AllowlistValidator(allowlist=[  
            True,
            b'hello world',
            "řeřicha\x00\r\n",
            datetime.datetime(2021, 1, 1, 8, 50, 51, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")),
            456,
            float("inf"),
            [1, "test", 2, "string 🤍"],
            {8: "hello", 4: "world"},
            ipaddress.ip_address("2a01::"),
            ipaddress.ip_network("127.127.0.0/24"),
            urllib.parse.urlparse("https://www.example.com/listtest?key=value#frag"),
            uuid.UUID('{12345678-1234-5678-1234-56781234abcd}'),
            str,
            object,
            theoretical_testutils.EmptyObject()
        ]),)
    ), (
        (True, True),
        (False, DataValidationFailedExc),
        (None, DataValidationFailedExc),
        (b'hello world', b'hello world'),
        (b'Hello world', DataValidationFailedExc),
        (b'hello World', DataValidationFailedExc),
        (b'Hello World', DataValidationFailedExc),
        (b'HELLO WORLD', DataValidationFailedExc),
        (b'hello world ', DataValidationFailedExc),
        (b'hello world\n', DataValidationFailedExc),
        (b'hello world\x00', DataValidationFailedExc),
        (b'hello', DataValidationFailedExc),
        (b'world', DataValidationFailedExc),
        (b'', DataValidationFailedExc),
        ("řeřicha\x00\r\n", "řeřicha\x00\r\n"),
        ("Řeřicha\x00\r\n", DataValidationFailedExc),
        ("ŘEŘICHA\x00\r\n", DataValidationFailedExc),
        ("řeřicha\x00\r", DataValidationFailedExc),
        ("řeřicha\x00\n", DataValidationFailedExc),
        ("řeřicha\x00\n\r", DataValidationFailedExc),
        ("řeřicha\x00", DataValidationFailedExc),
        ("řeřicha\r\n", DataValidationFailedExc),
        ("řeřicha\n", DataValidationFailedExc),
        ("řeřicha\r", DataValidationFailedExc),
        ("řeřicha\n\r", DataValidationFailedExc),
        ("řeřicha", DataValidationFailedExc),
        ("Řeřicha", DataValidationFailedExc),
        ("ŘEŘICHA", DataValidationFailedExc),
        ("", DataValidationFailedExc),
        (" ", DataValidationFailedExc),
        ("\r\n", DataValidationFailedExc),
        ("\x00", DataValidationFailedExc),
        ("\x00\x00", DataValidationFailedExc),
        ("hello", DataValidationFailedExc),
        ("test", DataValidationFailedExc),
        (datetime.datetime(2021, 1, 1, 8, 50, 51, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), datetime.datetime(2021, 1, 1, 8, 50, 51, tzinfo=zoneinfo.ZoneInfo("Europe/Prague"))),
        (datetime.datetime(2021, 1, 1, 8, 50, 51, tzinfo=zoneinfo.ZoneInfo("America/New_York")), DataValidationFailedExc),
        (datetime.datetime(2021, 1, 1, 8, 50, 51, tzinfo=datetime.timezone.utc), DataValidationFailedExc),
        (datetime.datetime(2021, 1, 1, 8, 50, 51), DataValidationFailedExc),
        (datetime.datetime(2021, 1, 1, 8, 50, 50, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), DataValidationFailedExc),
        (datetime.datetime(2021, 1, 1, 8, 50, 52, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), DataValidationFailedExc),
        (datetime.datetime(2021, 1, 1, 8, 50, 51, 1, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), DataValidationFailedExc),
        (datetime.datetime(2021, 1, 1, 8, 50, 51, 999999, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), DataValidationFailedExc),
        (456, 456),
        (456.0, 456.0),  # 456 == 456.0
        (456.1, DataValidationFailedExc),
        (455, DataValidationFailedExc),
        (457, DataValidationFailedExc),
        (-456, DataValidationFailedExc),
        (-456.0, DataValidationFailedExc),
        (0, DataValidationFailedExc),
        (0.0, DataValidationFailedExc),
        (float("inf"), float("inf")),
        (float("-inf"), DataValidationFailedExc),
        (1e100, DataValidationFailedExc),
        (-1e100, DataValidationFailedExc),
        ([1, "test", 2, "string 🤍"], [1, "test", 2, "string 🤍"]),
        ([2, "test", 2, "string 🤍"], DataValidationFailedExc),
        ([-1, "test", 2, "string 🤍"], DataValidationFailedExc),
        ([0, "test", 2, "string 🤍"], DataValidationFailedExc),
        ([1, "test ", 2, "string 🤍"], DataValidationFailedExc),
        ([1, "test\x00", 2, "string 🤍"], DataValidationFailedExc),
        ([1, "hello world", 2, "string 🤍"], DataValidationFailedExc),
        ([1, "test", 3, "string 🤍"], DataValidationFailedExc),
        ([1, "test", -2, "string 🤍"], DataValidationFailedExc),
        ([1, "test", 1, "string 🤍"], DataValidationFailedExc),
        ([1, "test", 0, "string 🤍"], DataValidationFailedExc),
        ([1, "test", 2, "string🤍"], DataValidationFailedExc),
        ([1, "test", 2, "String 🤍"], DataValidationFailedExc),
        ([1, "test", 2, "STRING 🤍"], DataValidationFailedExc),
        ([1, "test", 2, "string\t🤍"], DataValidationFailedExc),
        ([1, "test", 2, "string 🤍 "], DataValidationFailedExc),
        ([1, "test", 2, "string 🤍\x00"], DataValidationFailedExc),
        ([1, "test", 2, "string 🤍 something"], DataValidationFailedExc),
        ([1, "test", 2, "hello world"], DataValidationFailedExc),
        (["x", 1, "test", 2, "string 🤍"], DataValidationFailedExc),
        ([1, "test", "x", 2, "string 🤍"], DataValidationFailedExc),
        ([1, "test", 2, "string 🤍", 3], DataValidationFailedExc),
        ([1, "test", 2, "string 🤍", 3, 4, 5, 6, 7, 8, 9], DataValidationFailedExc),
        (["test", 2, "string 🤍"], DataValidationFailedExc),
        ([1, 2, "string 🤍"], DataValidationFailedExc),
        ([1, "test", 2], DataValidationFailedExc),
        ([1], DataValidationFailedExc),
        (["test"], DataValidationFailedExc),
        ([2], DataValidationFailedExc),
        (["string 🤍"], DataValidationFailedExc),
        (["string 🤍", 2, "test", 1], DataValidationFailedExc),
        ([1, "test", "string 🤍", 2], DataValidationFailedExc),
        (["test", 1, 2, "string 🤍"], DataValidationFailedExc),
        ([2, "test", 1, "string 🤍"], DataValidationFailedExc),
        ([], DataValidationFailedExc),
        ([None], DataValidationFailedExc),
        ([None, True, False], DataValidationFailedExc),
        ({8: "hello", 4: "world"}, {8: "hello", 4: "world"}),
        ({4: "world", 8: "hello"}, {8: "hello", 4: "world"}),
        ({8: "hello ", 4: "world"}, DataValidationFailedExc),
        ({8: "hello\x00", 4: "world"}, DataValidationFailedExc),
        ({8: "hello!", 4: "world"}, DataValidationFailedExc),
        ({8: "hello", 4: "world "}, DataValidationFailedExc),
        ({8: "hello", 4: "world\x00"}, DataValidationFailedExc),
        ({8: "hello", 4: "world!"}, DataValidationFailedExc),
        ({8: "hello", 4: "World"}, DataValidationFailedExc),
        ({8: "hello", 4: "WORLD"}, DataValidationFailedExc),
        ({1: "x", 8: "hello", 4: "world"}, DataValidationFailedExc),
        ({8: "hello", 1: "x", 4: "world"}, DataValidationFailedExc),
        ({8: "hello", 4: "world", 1: "x"}, DataValidationFailedExc),
        ({8: "hello", 4: "world", 1: "x", 2: "y", 3: "z"}, DataValidationFailedExc),
        ({8: "hello"}, DataValidationFailedExc),
        ({4: "world"}, DataValidationFailedExc),
        (dict(), DataValidationFailedExc),
        ({None: "hello"}, DataValidationFailedExc),
        ({None: "hello", True: "world"}, DataValidationFailedExc),
        ({None: "hello", True: "world", False: "test"}, DataValidationFailedExc),
        (ipaddress.ip_address("2a01::"), ipaddress.ip_address("2a01::")),
        (ipaddress.ip_address("2a01:0000:0000:0000:0000:0000:0000:0000"), ipaddress.ip_address("2a01::")),
        (ipaddress.ip_address("2a01::1"), DataValidationFailedExc),
        (ipaddress.ip_address("2a01:0000:0000:0000:0000:0000:0000:0001"), DataValidationFailedExc),
        (ipaddress.ip_address("2a01::ffff"), DataValidationFailedExc),
        (ipaddress.ip_address("2a01:0000:0000:0000:0000:0000:0000:ffff"), DataValidationFailedExc),
        (ipaddress.ip_address("2a02::"), DataValidationFailedExc),
        (ipaddress.ip_address("2a02:0000:0000:0000:0000:0000:0000:0000"), DataValidationFailedExc),
        (ipaddress.ip_address("127.0.0.1"), DataValidationFailedExc),
        (ipaddress.ip_address("8.8.8.8"), DataValidationFailedExc),
        (ipaddress.ip_address("0.0.0.0"), DataValidationFailedExc),
        (ipaddress.ip_network("127.127.0.0/24"), ipaddress.ip_network("127.127.0.0/24")),
        (ipaddress.ip_network("127.127.0.0/23"), DataValidationFailedExc),
        (ipaddress.ip_network("127.127.0.0/25"), DataValidationFailedExc),
        (ipaddress.ip_network("127.127.0.0/32"), DataValidationFailedExc),
        (ipaddress.ip_network("127.127.1.0/24"), DataValidationFailedExc),
        (ipaddress.ip_network("127.127.255.0/24"), DataValidationFailedExc),
        (ipaddress.ip_network("128.127.0.0/24"), DataValidationFailedExc),
        (ipaddress.ip_network("0.0.0.0/24"), DataValidationFailedExc),
        (ipaddress.ip_network("0.0.0.0/0"), DataValidationFailedExc),
        (ipaddress.ip_network("0.0.0.0/32"), DataValidationFailedExc),
        (ipaddress.ip_network("::/0"), DataValidationFailedExc),
        (ipaddress.ip_network("::1/128"), DataValidationFailedExc),
        (ipaddress.ip_network("2001:db8::/32"), DataValidationFailedExc),
        (ipaddress.ip_network("2001:db8::/64"), DataValidationFailedExc),
        (ipaddress.ip_network("2001::/24"), DataValidationFailedExc),
        (ipaddress.ip_network("fe80::/10"), DataValidationFailedExc),
        (urllib.parse.urlparse("https://www.example.com/listtest?key=value#frag"), urllib.parse.urlparse("https://www.example.com/listtest?key=value#frag")),
        (urllib.parse.urlparse("https://www.example.com/listtest?key=value#frag1"), DataValidationFailedExc),
        (urllib.parse.urlparse("https://www.example.com/listtest1?key=value#frag"), DataValidationFailedExc),
        (urllib.parse.urlparse("https://www.example.com/test?key=value#frag"), DataValidationFailedExc),
        (urllib.parse.urlparse("https://www.example.com/listtest?key=value&key2=value2#frag"), DataValidationFailedExc),
        (urllib.parse.urlparse("https://www.example.cz/listtest?key=value#frag"), DataValidationFailedExc),
        (urllib.parse.urlparse("ftp://www.example.com/listtest?key=value#frag"), DataValidationFailedExc),
        (urllib.parse.urlparse(""), DataValidationFailedExc),
        (urllib.parse.urlparse(b"https://www.example.com/listtest?key=value#frag"), DataValidationFailedExc),
        (uuid.UUID('{12345678-1234-5678-1234-56781234abcd}'), uuid.UUID('{12345678-1234-5678-1234-56781234abcd}')),
        (uuid.UUID('12345678-1234-5678-1234-56781234abcd'), uuid.UUID('{12345678-1234-5678-1234-56781234abcd}')),
        (uuid.UUID('1234567812345678123456781234abcd'), uuid.UUID('{12345678-1234-5678-1234-56781234abcd}')),
        (uuid.UUID('{12345678-1234-5678-1234-56781234abcf}'), DataValidationFailedExc),
        (uuid.UUID('{22345678-1234-5678-1234-56781234abcd}'), DataValidationFailedExc),
        (uuid.UUID('{12345678-1234-1234-1234-56781234abcd}'), DataValidationFailedExc),
        (uuid.UUID('12345678-1234-5678-1234-56781234abcf'), DataValidationFailedExc),
        (uuid.UUID('22345678-1234-5678-1234-56781234abcd'), DataValidationFailedExc),
        (uuid.UUID('12345678-1234-1234-1234-56781234abcd'), DataValidationFailedExc),
        (uuid.UUID('1234567812345678123456781234abcf'), DataValidationFailedExc),
        (uuid.UUID('2234567812345678123456781234abcd'), DataValidationFailedExc),
        (uuid.UUID('1234567812341234123456781234abcd'), DataValidationFailedExc),
        (str, str),
        (object, object),
        (int, DataValidationFailedExc),
        (complex, DataValidationFailedExc),
        (list, DataValidationFailedExc),
        (frozenset, DataValidationFailedExc),
        (type(None), DataValidationFailedExc),
        (ipaddress.IPv4Network, DataValidationFailedExc),
        (ipaddress.IPv6Address, DataValidationFailedExc),
        (datetime.datetime, DataValidationFailedExc),
        (uuid.UUID, DataValidationFailedExc),
        (urllib.parse.ParseResult, DataValidationFailedExc),
        (theoretical_testutils.EmptyObject, DataValidationFailedExc),
        (zoneinfo.ZoneInfo("Europe/Prague"), DataValidationFailedExc),
        (zoneinfo.ZoneInfo("America/New_York"), DataValidationFailedExc),
        (datetime.timezone.utc, DataValidationFailedExc),
        (1+5j, DataValidationFailedExc),
        (set(), DataValidationFailedExc),
        (frozenset(), DataValidationFailedExc),
        (tuple(), DataValidationFailedExc),
        (list(), DataValidationFailedExc),
        (theoretical_testutils.EmptyObject(), theoretical_testutils.EmptyObject()),
    )),
)


@pytest.mark.parametrize(("blueprint", "input_", "output"), theoretical_testutils.test_function_parameter_generator(__ALLOWLIST_VALIDATOR_TEST_SUITE))
def test_allowlist_validator(blueprint, input_, output):
    theoretical_testutils.perform_test(blueprint, input_, output)


@pytest.mark.parametrize("alist", (tuple(), []))
def test_allowlist_validator_empty_allowlist(alist):
    with pytest.raises(InvalidValidatorConfigError):
        AllowlistValidator(allowlist=alist)


@pytest.mark.parametrize("alist", (
        ("",),
        ("", "abc"),
        ("", "abc", "řeřicha"),
        ("", "abc", "řeřicha", "\r\n"),
        ("", "abc", "řeřicha", "\r\n", "\x00"),
        ("", "abc", "řeřicha", "\r\n", "\x00", "🤍"),
))
def test_allowlist_validator_allowlist(alist):
    assert AllowlistValidator(allowlist=alist).get_allowlist() == alist
