#!/bin/false

# Copyright (c) 2022 Vít Labuda. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
# following conditions are met:
#  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
#     disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
#     following disclaimer in the documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
#     products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


import os.path
import sys
__TESTS_DIR = os.path.dirname(os.path.realpath(__file__))  
__MODULE_DIR = os.path.realpath(os.path.join(__TESTS_DIR, "../.."))  
if __TESTS_DIR not in sys.path:  
    sys.path.insert(0, __TESTS_DIR)  
if __MODULE_DIR not in sys.path:  
    sys.path.insert(0, __MODULE_DIR)  

import theoretical_testutils
import pytest
import datetime
import zoneinfo
import ipaddress
import urllib.parse
import uuid
from test_006_float_blueprint import expected_output_float_value
from datalidator.validators.impl.BlocklistValidator import BlocklistValidator
from datalidator.validators.exc.DataValidationFailedExc import DataValidationFailedExc
from datalidator.validators.exc.err.InvalidValidatorConfigError import InvalidValidatorConfigError
from datalidator.blueprints.ParsingMode import ParsingMode
from datalidator.blueprints.impl.StringBlueprint import StringBlueprint
from datalidator.blueprints.impl.IntegerBlueprint import IntegerBlueprint
from datalidator.blueprints.impl.FloatBlueprint import FloatBlueprint
from datalidator.blueprints.impl.ListBlueprint import ListBlueprint
from datalidator.blueprints.impl.GenericBlueprint import GenericBlueprint
from datalidator.blueprints.exc.InvalidInputDataExc import InvalidInputDataExc
from datalidator.blueprints.exc.InputDataNotConvertibleExc import InputDataNotConvertibleExc
from datalidator.blueprints.exc.InputDataTypeNotInAllowlistExc import InputDataTypeNotInAllowlistExc
from datalidator.filters.impl.StringStripFilter import StringStripFilter


__BLOCKLIST_VALIDATOR_TEST_SUITE = (
    (StringBlueprint(
        validators=(BlocklistValidator(blocklist=[
            "",
            "abc",
            "\r\n",
            "\x00",
            "🤍",
            "řeřicha",
            "Příliš žluťoučký kůň úpěl ďábelské ódy.\n",
            "123",
            "True",
            "None",
            "127.0.0.1",
            "::1",
        ]),),
        parsing_mode=ParsingMode.MODE_RATIONAL
    ), (
        ("", DataValidationFailedExc),
        ("".join([]), DataValidationFailedExc),
        (" ", " "),
        ("\u2029\x85", "\u2029\x85"),
        ("X", "X"),
        ("abc", DataValidationFailedExc),
        ("abc ", "abc "),
        ("\u2029abc\x85", "\u2029abc\x85"),
        ("abc\x00", "abc\x00"),
        ("abcX", "abcX"),
        ("ABC", "ABC"),
        ("Abc", "Abc"),
        ("abc something", "abc something"),
        ("abc something!", "abc something!"),
        ("\r\n", DataValidationFailedExc),
        ("\r\n ", "\r\n "),
        ("\u2029\r\n\x85", "\u2029\r\n\x85"),
        ("\r\n\x00", "\r\n\x00"),
        ("\r\nX", "\r\nX"),
        ("\n", "\n"),
        ("\r", "\r"),
        ("\n\r", "\n\r"),
        ("\r\n\n", "\r\n\n"),
        ("\r\n\r", "\r\n\r"),
        ("\x00", DataValidationFailedExc),
        ("\x00 ", "\x00 "),
        ("\u2029\x00\x85", "\u2029\x00\x85"),
        ("\x00\x00", "\x00\x00"),
        ("\x00X", "\x00X"),
        ("\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),
        ("\x01", "\x01"),
        ("🤍", DataValidationFailedExc),
        ("🤍 ", "🤍 "),
        ("\u2029🤍\x85", "\u2029🤍\x85"),
        ("🤍\x00", "🤍\x00"),
        ("🤍X", "🤍X"),
        ("řeřicha", DataValidationFailedExc),
        ("řeřicha ", "řeřicha "),
        ("\u2029řeřicha\x85", "\u2029řeřicha\x85"),
        ("řeřicha\x00", "řeřicha\x00"),
        ("řeřichaX", "řeřichaX"),
        ("ŘEŘICHA", "ŘEŘICHA"),
        ("Řeřicha", "Řeřicha"),
        ("řeřicha květina", "řeřicha květina"),
        ("řeřicha květina!", "řeřicha květina!"),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n", DataValidationFailedExc),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n ", "Příliš žluťoučký kůň úpěl ďábelské ódy.\n "),
        ("\u2028Příliš žluťoučký kůň úpěl ďábelské ódy.\n\x85", "\u2028Příliš žluťoučký kůň úpěl ďábelské ódy.\n\x85"),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n\x00", "Příliš žluťoučký kůň úpěl ďábelské ódy.\n\x00"),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\nX", "Příliš žluťoučký kůň úpěl ďábelské ódy.\nX"),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.", "Příliš žluťoučký kůň úpěl ďábelské ódy."),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\r", "Příliš žluťoučký kůň úpěl ďábelské ódy.\r"),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy\n", "Příliš žluťoučký kůň úpěl ďábelské ódy\n"),
        ("PŘíliš žluťoučký kůň úpěl ďábelské ódy.\n", "PŘíliš žluťoučký kůň úpěl ďábelské ódy.\n"),
        ("Příliš\tžluťoučký kůň úpěl ďábelské ódy.\n", "Příliš\tžluťoučký kůň úpěl ďábelské ódy.\n"),
        ("Příliš žluťoučký kůň  úpěl ďábelské ódy.\n", "Příliš žluťoučký kůň  úpěl ďábelské ódy.\n"),
        ("PŘÍLIŠ ŽLUŤOUČKÝ KŮŇ ÚPĚL ĎÁBELSKÉ ÓDY.\n", "PŘÍLIŠ ŽLUŤOUČKÝ KŮŇ ÚPĚL ĎÁBELSKÉ ÓDY.\n"),
        (123, DataValidationFailedExc),
        ("123", DataValidationFailedExc),
        ("123\x00", "123\x00"),
        ("123X", "123X"),
        ("\r\n   123  \x1d\u2028", "\r\n   123  \x1d\u2028"),
        (123.0, "123.0"),
        ("123.0", "123.0"),
        ("123.0\x00", "123.0\x00"),
        ("123.0X", "123.0X"),
        ("\r\n   123.0  \x1d\u2028", "\r\n   123.0  \x1d\u2028"),
        (123.9, "123.9"),
        ("123.9", "123.9"),
        ("123.9\x00", "123.9\x00"),
        ("123.9X", "123.9X"),
        ("\r\n   123.9  \x1d\u2028", "\r\n   123.9  \x1d\u2028"),
        (122, "122"),
        ("122", "122"),
        ("122\x00", "122\x00"),
        ("122X", "122X"),
        ("\r\n   122  \x1d\u2028", "\r\n   122  \x1d\u2028"),
        (124, "124"),
        ("124", "124"),
        ("124\x00", "124\x00"),
        ("124X", "124X"),
        ("\r\n   124  \x1d\u2028", "\r\n   124  \x1d\u2028"),
        (True, DataValidationFailedExc),
        ("True", DataValidationFailedExc),
        ("True ", "True "),
        ("\u2029True\x85", "\u2029True\x85"),
        ("True\x00", "True\x00"),
        ("TrueX", "TrueX"),
        ("TRUE", "TRUE"),
        ("true", "true"),
        ("TruE", "TruE"),
        ("This is True", "This is True"),
        ("This is True!", "This is True!"),
        (False, "False"),
        ("False", "False"),
        ("FalseX", "FalseX"),
        (None, DataValidationFailedExc),
        ("None", DataValidationFailedExc),
        ("None ", "None "),
        ("\u2029None\x85", "\u2029None\x85"),
        ("None\x00", "None\x00"),
        ("NoneX", "NoneX"),
        ("NONE", "NONE"),
        ("none", "none"),
        ("NonE", "NonE"),
        ("This is None", "This is None"),
        ("This is None!", "This is None!"),
        (ipaddress.ip_address("127.0.0.1"), DataValidationFailedExc),
        ("127.0.0.1", DataValidationFailedExc),
        ("127.0.0.1 ", "127.0.0.1 "),
        ("\u2029127.0.0.1\x85", "\u2029127.0.0.1\x85"),
        ("127.0.0.1\x00", "127.0.0.1\x00"),
        ("127.0.0.1X", "127.0.0.1X"),
        (ipaddress.ip_address("127.0.0.2"), "127.0.0.2"),
        ("127.0.0.2", "127.0.0.2"),
        (ipaddress.ip_address("8.8.8.8"), "8.8.8.8"),
        ("8.8.8.8", "8.8.8.8"),
        (ipaddress.ip_address("::1"), DataValidationFailedExc),
        (ipaddress.ip_address("0000:0000:0000:0000:0000:0000:0000:0001"), DataValidationFailedExc),
        ("::1", DataValidationFailedExc),
        ("0000:0000:0000:0000:0000:0000:0000:0001", "0000:0000:0000:0000:0000:0000:0000:0001"),
        ("::1 ", "::1 "),
        ("0000:0000:0000:0000:0000:0000:0000:0001 ", "0000:0000:0000:0000:0000:0000:0000:0001 "),
        ("\u2029::1\x85", "\u2029::1\x85"),
        ("\u20290000:0000:0000:0000:0000:0000:0000:0001\x85", "\u20290000:0000:0000:0000:0000:0000:0000:0001\x85"),
        ("::1\x00", "::1\x00"),
        ("0000:0000:0000:0000:0000:0000:0000:0001\x00", "0000:0000:0000:0000:0000:0000:0000:0001\x00"),
        ("::1X", "::1X"),
        ("0000:0000:0000:0000:0000:0000:0000:0001X", "0000:0000:0000:0000:0000:0000:0000:0001X"),
        (ipaddress.ip_address("2001:db8::ffff"), "2001:db8::ffff"),
        (ipaddress.ip_address("2001:0db8:0000:0000:0000:0000:0000:ffff"), "2001:db8::ffff"),
        ("2001:db8::ffff", "2001:db8::ffff"),
        ("2001:0db8:0000:0000:0000:0000:0000:ffff", "2001:0db8:0000:0000:0000:0000:0000:ffff"),
        (float("-inf"), "-inf"),
        (float("nan"), "nan"),
        (urllib.parse.urlparse("https://www.google.com/thisisatest?key=value&key2=value2"), "https://www.google.com/thisisatest?key=value&key2=value2"),
        (urllib.parse.urlparse(b"https://www.google.com/thisisatest?key=value&key2=value2"), InputDataTypeNotInAllowlistExc),
        (str, InputDataTypeNotInAllowlistExc),
        (object(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (StringBlueprint(
        filters=(StringStripFilter(),),
        validators=(BlocklistValidator(blocklist=[
            "",
            "abc",
            "\r\n",
            "\x00",
            "🤍",
            "řeřicha",
            "Příliš žluťoučký kůň úpěl ďábelské ódy.\n",
            "123",
            "True",
            "None",
            "127.0.0.1",
            "::1",
        ]),),
        parsing_mode=ParsingMode.MODE_RATIONAL
    ), (
        ("", DataValidationFailedExc),
        ("".join([]), DataValidationFailedExc),
        (" ", DataValidationFailedExc),
        ("\u2029\x85", DataValidationFailedExc),
        ("X", "X"),
        ("abc", DataValidationFailedExc),
        ("abc ", DataValidationFailedExc),
        ("\u2029abc\x85", DataValidationFailedExc),
        ("abc\x00", "abc\x00"),
        ("abcX", "abcX"),
        ("ABC", "ABC"),
        ("Abc", "Abc"),
        ("abc something", "abc something"),
        ("abc something!", "abc something!"),
        ("\r\n", DataValidationFailedExc),
        ("\r\n ", DataValidationFailedExc),
        ("\u2029\r\n\x85", DataValidationFailedExc),
        ("\r\n\x00", DataValidationFailedExc),
        ("\r\nX", "X"),
        ("\n", DataValidationFailedExc),
        ("\r", DataValidationFailedExc),
        ("\n\r", DataValidationFailedExc),
        ("\r\n\n", DataValidationFailedExc),
        ("\r\n\r", DataValidationFailedExc),
        ("\x00", DataValidationFailedExc),
        ("\x00 ", DataValidationFailedExc),
        ("\u2029\x00\x85", DataValidationFailedExc),
        ("\x00\x00", "\x00\x00"),
        ("\x00X", "\x00X"),
        ("\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),
        ("\x01", "\x01"),
        ("🤍", DataValidationFailedExc),
        ("🤍 ", DataValidationFailedExc),
        ("\u2029🤍\x85", DataValidationFailedExc),
        ("🤍\x00", "🤍\x00"),
        ("🤍X", "🤍X"),
        ("řeřicha", DataValidationFailedExc),
        ("řeřicha ", DataValidationFailedExc),
        ("\u2029řeřicha\x85", DataValidationFailedExc),
        ("řeřicha\x00", "řeřicha\x00"),
        ("řeřichaX", "řeřichaX"),
        ("ŘEŘICHA", "ŘEŘICHA"),
        ("Řeřicha", "Řeřicha"),
        ("řeřicha květina", "řeřicha květina"),
        ("řeřicha květina!", "řeřicha květina!"),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n", "Příliš žluťoučký kůň úpěl ďábelské ódy."),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n ", "Příliš žluťoučký kůň úpěl ďábelské ódy."),
        ("\u2028Příliš žluťoučký kůň úpěl ďábelské ódy.\n\x85", "Příliš žluťoučký kůň úpěl ďábelské ódy."),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\n\x00", "Příliš žluťoučký kůň úpěl ďábelské ódy.\n\x00"),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\nX", "Příliš žluťoučký kůň úpěl ďábelské ódy.\nX"),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.", "Příliš žluťoučký kůň úpěl ďábelské ódy."),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy.\r", "Příliš žluťoučký kůň úpěl ďábelské ódy."),
        ("Příliš žluťoučký kůň úpěl ďábelské ódy\n", "Příliš žluťoučký kůň úpěl ďábelské ódy"),
        ("PŘíliš žluťoučký kůň úpěl ďábelské ódy.\n", "PŘíliš žluťoučký kůň úpěl ďábelské ódy."),
        ("Příliš\tžluťoučký kůň úpěl ďábelské ódy.\n", "Příliš\tžluťoučký kůň úpěl ďábelské ódy."),
        ("Příliš žluťoučký kůň  úpěl ďábelské ódy.\n", "Příliš žluťoučký kůň  úpěl ďábelské ódy."),
        ("PŘÍLIŠ ŽLUŤOUČKÝ KŮŇ ÚPĚL ĎÁBELSKÉ ÓDY.\n", "PŘÍLIŠ ŽLUŤOUČKÝ KŮŇ ÚPĚL ĎÁBELSKÉ ÓDY."),
        (123, DataValidationFailedExc),
        ("123", DataValidationFailedExc),
        ("123\x00", "123\x00"),
        ("123X", "123X"),
        ("\r\n   123  \x1d\u2028", DataValidationFailedExc),
        (123.0, "123.0"),
        ("123.0", "123.0"),
        ("123.0\x00", "123.0\x00"),
        ("123.0X", "123.0X"),
        ("\r\n   123.0  \x1d\u2028", "123.0"),
        (123.9, "123.9"),
        ("123.9", "123.9"),
        ("123.9\x00", "123.9\x00"),
        ("123.9X", "123.9X"),
        ("\r\n   123.9  \x1d\u2028", "123.9"),
        (122, "122"),
        ("122", "122"),
        ("122\x00", "122\x00"),
        ("122X", "122X"),
        ("\r\n   122  \x1d\u2028", "122"),
        (124, "124"),
        ("124", "124"),
        ("124\x00", "124\x00"),
        ("124X", "124X"),
        ("\r\n   124  \x1d\u2028", "124"),
        (True, DataValidationFailedExc),
        ("True", DataValidationFailedExc),
        ("True ", DataValidationFailedExc),
        ("\u2029True\x85", DataValidationFailedExc),
        ("True\x00", "True\x00"),
        ("TrueX", "TrueX"),
        ("TRUE", "TRUE"),
        ("true", "true"),
        ("TruE", "TruE"),
        ("This is True", "This is True"),
        ("This is True!", "This is True!"),
        (False, "False"),
        ("False", "False"),
        ("FalseX", "FalseX"),
        (None, DataValidationFailedExc),
        ("None", DataValidationFailedExc),
        ("None ", DataValidationFailedExc),
        ("\u2029None\x85", DataValidationFailedExc),
        ("None\x00", "None\x00"),
        ("NoneX", "NoneX"),
        ("NONE", "NONE"),
        ("none", "none"),
        ("NonE", "NonE"),
        ("This is None", "This is None"),
        ("This is None!", "This is None!"),
        (ipaddress.ip_address("127.0.0.1"), DataValidationFailedExc),
        ("127.0.0.1", DataValidationFailedExc),
        ("127.0.0.1 ", DataValidationFailedExc),
        ("\u2029127.0.0.1\x85", DataValidationFailedExc),
        ("127.0.0.1\x00", "127.0.0.1\x00"),
        ("127.0.0.1X", "127.0.0.1X"),
        (ipaddress.ip_address("127.0.0.2"), "127.0.0.2"),
        ("127.0.0.2", "127.0.0.2"),
        (ipaddress.ip_address("8.8.8.8"), "8.8.8.8"),
        ("8.8.8.8", "8.8.8.8"),
        (ipaddress.ip_address("::1"), DataValidationFailedExc),
        (ipaddress.ip_address("0000:0000:0000:0000:0000:0000:0000:0001"), DataValidationFailedExc),
        ("::1", DataValidationFailedExc),
        ("0000:0000:0000:0000:0000:0000:0000:0001", "0000:0000:0000:0000:0000:0000:0000:0001"),
        ("::1 ", DataValidationFailedExc),
        ("0000:0000:0000:0000:0000:0000:0000:0001 ", "0000:0000:0000:0000:0000:0000:0000:0001"),
        ("\u2029::1\x85", DataValidationFailedExc),
        ("\u20290000:0000:0000:0000:0000:0000:0000:0001\x85", "0000:0000:0000:0000:0000:0000:0000:0001"),
        ("::1\x00", "::1\x00"),
        ("0000:0000:0000:0000:0000:0000:0000:0001\x00", "0000:0000:0000:0000:0000:0000:0000:0001\x00"),
        ("::1X", "::1X"),
        ("0000:0000:0000:0000:0000:0000:0000:0001X", "0000:0000:0000:0000:0000:0000:0000:0001X"),
        (ipaddress.ip_address("2001:db8::ffff"), "2001:db8::ffff"),
        (ipaddress.ip_address("2001:0db8:0000:0000:0000:0000:0000:ffff"), "2001:db8::ffff"),
        ("2001:db8::ffff", "2001:db8::ffff"),
        ("2001:0db8:0000:0000:0000:0000:0000:ffff", "2001:0db8:0000:0000:0000:0000:0000:ffff"),
        (float("-inf"), "-inf"),
        (float("nan"), "nan"),
        (urllib.parse.urlparse("https://www.google.com/thisisatest?key=value&key2=value2"), "https://www.google.com/thisisatest?key=value&key2=value2"),
        (urllib.parse.urlparse(b"https://www.google.com/thisisatest?key=value&key2=value2"), InputDataTypeNotInAllowlistExc),
        (str, InputDataTypeNotInAllowlistExc),
        (object(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (FloatBlueprint(
        validators=(BlocklistValidator(blocklist=[
            0.0,
            888.555,
            -777.111,
            float("inf"),
            float("nan")
        ]),),
        parsing_mode=ParsingMode.MODE_RATIONAL,
        allow_ieee754_special_values=False
    ), (
        (0.0, DataValidationFailedExc),
        (-0.0, DataValidationFailedExc),
        (0, DataValidationFailedExc),
        (False, DataValidationFailedExc),
        ("\r\n\t  000_0.00000  \x85\u2028", DataValidationFailedExc),
        (0.1, expected_output_float_value("0.1")),
        ("\r\n\t  000_0.10000  \x85\u2028", expected_output_float_value("0.1")),
        (1.0, expected_output_float_value("1.0")),
        (1, expected_output_float_value("1.0")),
        (True, expected_output_float_value("1.0")),
        ("\r\n\t  1  \x85\u2028", expected_output_float_value("1.0")),
        (888.555, DataValidationFailedExc),
        ("\r\n\t  888.555  \x85\u2028", DataValidationFailedExc),
        (888.554, expected_output_float_value("888.554")),
        ("\r\n\t  888.554  \x85\u2028", expected_output_float_value("888.554")),
        (888.556, expected_output_float_value("888.556")),
        ("\r\n\t  888.556  \x85\u2028", expected_output_float_value("888.556")),
        (888.5555, expected_output_float_value("888.5555")),
        ("\r\n\t  888.5555  \x85\u2028", expected_output_float_value("888.5555")),
        (-888.555, expected_output_float_value("-888.555")),
        ("\r\n\t  -888.555  \x85\u2028", expected_output_float_value("-888.555")),
        (888.0, expected_output_float_value("888.0")),
        (888, expected_output_float_value("888.0")),
        ("\r\n\t  888.0  \x85\u2028", expected_output_float_value("888.0")),
        (-777.111, DataValidationFailedExc),
        ("\r\n\t  -777.111  \x85\u2028", DataValidationFailedExc),
        (-777.110, expected_output_float_value("-777.11")),
        ("\r\n\t  -777.110  \x85\u2028", expected_output_float_value("-777.11")),
        (-777.112, expected_output_float_value("-777.112")),
        ("\r\n\t  -777.112  \x85\u2028", expected_output_float_value("-777.112")),
        (-777.1111, expected_output_float_value("-777.1111")),
        ("\r\n\t  -777.1111  \x85\u2028", expected_output_float_value("-777.1111")),
        (777.111, expected_output_float_value("777.111")),
        ("\r\n\t  777.111  \x85\u2028", expected_output_float_value("777.111")),
        (-777.0, expected_output_float_value("-777.0")),
        (-777, expected_output_float_value("-777.0")),
        ("\r\n\t  -777.0  \x85\u2028", expected_output_float_value("-777.0")),
        (float("inf"), InvalidInputDataExc),
        ("\r\n\t  inf  \x85\u2028", InvalidInputDataExc),
        (float("-inf"), InvalidInputDataExc),
        ("\r\n\t  -inf  \x85\u2028", InvalidInputDataExc),
        (float("nan"), InvalidInputDataExc),
        ("\r\n\t  nan  \x85\u2028", InvalidInputDataExc),
        ("", InputDataNotConvertibleExc),
        ("\n", InputDataNotConvertibleExc),
        ("hello", InputDataNotConvertibleExc),
        (None, InputDataTypeNotInAllowlistExc),
        ([], InputDataTypeNotInAllowlistExc),
        (float, InputDataTypeNotInAllowlistExc),
        (object(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (FloatBlueprint(
        validators=(BlocklistValidator(blocklist=[
            0.0,
            888.555,
            -777.111,
            float("inf"),
            float("nan")
        ]),),
        parsing_mode=ParsingMode.MODE_RATIONAL,
        allow_ieee754_special_values=True
    ), (
        (0.0, DataValidationFailedExc),
        (-0.0, DataValidationFailedExc),  # 0.0 == -0.0
        (0, DataValidationFailedExc),
        (False, DataValidationFailedExc),
        ("\r\n\t  000_0.00000  \x85\u2028", DataValidationFailedExc),
        (0.1, expected_output_float_value("0.1")),
        ("\r\n\t  000_0.10000  \x85\u2028", expected_output_float_value("0.1")),
        (1.0, expected_output_float_value("1.0")),
        (1, expected_output_float_value("1.0")),
        (True, expected_output_float_value("1.0")),
        ("\r\n\t  1  \x85\u2028", expected_output_float_value("1.0")),
        (888.555, DataValidationFailedExc),
        ("\r\n\t  888.555  \x85\u2028", DataValidationFailedExc),
        (888.554, expected_output_float_value("888.554")),
        ("\r\n\t  888.554  \x85\u2028", expected_output_float_value("888.554")),
        (888.556, expected_output_float_value("888.556")),
        ("\r\n\t  888.556  \x85\u2028", expected_output_float_value("888.556")),
        (888.5555, expected_output_float_value("888.5555")),
        ("\r\n\t  888.5555  \x85\u2028", expected_output_float_value("888.5555")),
        (-888.555, expected_output_float_value("-888.555")),
        ("\r\n\t  -888.555  \x85\u2028", expected_output_float_value("-888.555")),
        (888.0, expected_output_float_value("888.0")),
        (888, expected_output_float_value("888.0")),
        ("\r\n\t  888.0  \x85\u2028", expected_output_float_value("888.0")),
        (-777.111, DataValidationFailedExc),
        ("\r\n\t  -777.111  \x85\u2028", DataValidationFailedExc),
        (-777.110, expected_output_float_value("-777.11")),
        ("\r\n\t  -777.110  \x85\u2028", expected_output_float_value("-777.11")),
        (-777.112, expected_output_float_value("-777.112")),
        ("\r\n\t  -777.112  \x85\u2028", expected_output_float_value("-777.112")),
        (-777.1111, expected_output_float_value("-777.1111")),
        ("\r\n\t  -777.1111  \x85\u2028", expected_output_float_value("-777.1111")),
        (777.111, expected_output_float_value("777.111")),
        ("\r\n\t  777.111  \x85\u2028", expected_output_float_value("777.111")),
        (-777.0, expected_output_float_value("-777.0")),
        (-777, expected_output_float_value("-777.0")),
        ("\r\n\t  -777.0  \x85\u2028", expected_output_float_value("-777.0")),
        (float("inf"), DataValidationFailedExc),
        ("\r\n\t  inf  \x85\u2028", DataValidationFailedExc),
        (float("-inf"), expected_output_float_value("-inf")),
        ("\r\n\t  -inf  \x85\u2028", expected_output_float_value("-inf")),
        (float("nan"), expected_output_float_value("nan")),  # Python considers float("nan") != float("nan")
        ("\r\n\t  nan  \x85\u2028", expected_output_float_value("nan")),  # Python considers float("nan") != float("nan")
        ("", InputDataNotConvertibleExc),
        ("\n", InputDataNotConvertibleExc),
        ("hello", InputDataNotConvertibleExc),
        (None, InputDataTypeNotInAllowlistExc),
        ([], InputDataTypeNotInAllowlistExc),
        (float, InputDataTypeNotInAllowlistExc),
        (object(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (ListBlueprint(
        item_blueprint=IntegerBlueprint(  
            validators=(BlocklistValidator(blocklist=[
                1,
                333,
                -333
            ]),),
            parsing_mode=ParsingMode.MODE_STRICT
        ),
        validators=(BlocklistValidator(blocklist=[
            [],
            [1],
            [-333, 1, 333],
            [-333, 2, 333],
            [5, 6, 7]
        ]),),
        parsing_mode=ParsingMode.MODE_STRICT
    ), (
        ([], DataValidationFailedExc),
        ([1], DataValidationFailedExc),
        ([2], [2]),
        ([-1], [-1]),
        ([0], [0]),
        ([-333, 1, 333], DataValidationFailedExc),
        ([333, 1, -333], DataValidationFailedExc),
        ([-333, 333, 1], DataValidationFailedExc),
        ([1, -333, 333], DataValidationFailedExc),
        ([1, 333, -333], DataValidationFailedExc),
        ([-333, 1], DataValidationFailedExc),
        ([333, 1], DataValidationFailedExc),
        ([1, 333], DataValidationFailedExc),
        ([1, -333], DataValidationFailedExc),
        ([333], DataValidationFailedExc),
        ([-333], DataValidationFailedExc),
        ([-333, 1, 1, 333], DataValidationFailedExc),
        ([-333, 1, 333, 333], DataValidationFailedExc),
        ([-333, -333, 1, 333], DataValidationFailedExc),
        ([-333, 1, 333, 1], DataValidationFailedExc),
        ([-333, 1, 333, 1, 333, 333, -333, 333, 1, 1, 1], DataValidationFailedExc),
        ([1, 1, 1, 1, -333, 1, 333, 1, 333, 333, -333, 333, 1, 1, 1], DataValidationFailedExc),
        ([-333, 2, 333], DataValidationFailedExc),
        ([333, 2, -333], DataValidationFailedExc),
        ([-333, 333, 2], DataValidationFailedExc),
        ([2, -333, 333], DataValidationFailedExc),
        ([2, 333, -333], DataValidationFailedExc),
        ([-333, 2], DataValidationFailedExc),
        ([333, 2], DataValidationFailedExc),
        ([2, 333], DataValidationFailedExc),
        ([2, -333], DataValidationFailedExc),
        ([333], DataValidationFailedExc),
        ([-333], DataValidationFailedExc),
        ([-333, 2, 2, 333], DataValidationFailedExc),
        ([-333, 2, 333, 333], DataValidationFailedExc),
        ([-333, -333, 2, 333], DataValidationFailedExc),
        ([-333, 2, 333, 2], DataValidationFailedExc),
        ([-333, 2, 333, 2, 333, 333, -333, 333, 2, 2, 2], DataValidationFailedExc),
        ([2, 2, 2, 2, -333, 2, 333, 2, 333, 333, -333, 333, 2, 2, 2], DataValidationFailedExc),
        ([5, 6, 7], DataValidationFailedExc),
        ([7, 6, 5], [7, 6, 5]),
        ([6, 5], [6, 5]),
        ([5, 6], [5, 6]),
        ([6, 7], [6, 7]),
        ([5], [5]),
        ([6], [6]),
        ([7], [7]),
        ([5, 6, 7, 5], [5, 6, 7, 5]),
        ([5, 6, 6, 7], [5, 6, 6, 7]),
        ([5, 6, 6, 7, 6, 7, 5, 6, 7, 5, 5, 5, 5], [5, 6, 6, 7, 6, 7, 5, 6, 7, 5, 5, 5, 5]),
        ([-333, 1, 2, 333], DataValidationFailedExc),
        ([-333, 5, 1, 333], DataValidationFailedExc),
        ([-333, 1, 333, 6], DataValidationFailedExc),
        ([7, -333, 1, 333], DataValidationFailedExc),
        ([-333, -1, 333], DataValidationFailedExc),
        ([333, -1, -333], DataValidationFailedExc),
        (tuple(), DataValidationFailedExc),
        (tuple([1]), DataValidationFailedExc),
        (tuple([2]), [2]),
        (tuple([-1]), [-1]),
        (tuple([0]), [0]),
        (tuple([-333, 1, 333]), DataValidationFailedExc),
        (tuple([333, 1, -333]), DataValidationFailedExc),
        (tuple([-333, 333, 1]), DataValidationFailedExc),
        (tuple([1, -333, 333]), DataValidationFailedExc),
        (tuple([1, 333, -333]), DataValidationFailedExc),
        (tuple([-333, 1]), DataValidationFailedExc),
        (tuple([333, 1]), DataValidationFailedExc),
        (tuple([1, 333]), DataValidationFailedExc),
        (tuple([1, -333]), DataValidationFailedExc),
        (tuple([333]), DataValidationFailedExc),
        (tuple([-333]), DataValidationFailedExc),
        (tuple([-333, 1, 1, 333]), DataValidationFailedExc),
        (tuple([-333, 1, 333, 333]), DataValidationFailedExc),
        (tuple([-333, -333, 1, 333]), DataValidationFailedExc),
        (tuple([-333, 1, 333, 1]), DataValidationFailedExc),
        (tuple([-333, 1, 333, 1, 333, 333, -333, 333, 1, 1, 1]), DataValidationFailedExc),
        (tuple([1, 1, 1, 1, -333, 1, 333, 1, 333, 333, -333, 333, 1, 1, 1]), DataValidationFailedExc),
        (tuple([-333, 2, 333]), DataValidationFailedExc),
        (tuple([333, 2, -333]), DataValidationFailedExc),
        (tuple([-333, 333, 2]), DataValidationFailedExc),
        (tuple([2, -333, 333]), DataValidationFailedExc),
        (tuple([2, 333, -333]), DataValidationFailedExc),
        (tuple([-333, 2]), DataValidationFailedExc),
        (tuple([333, 2]), DataValidationFailedExc),
        (tuple([2, 333]), DataValidationFailedExc),
        (tuple([2, -333]), DataValidationFailedExc),
        (tuple([333]), DataValidationFailedExc),
        (tuple([-333]), DataValidationFailedExc),
        (tuple([-333, 2, 2, 333]), DataValidationFailedExc),
        (tuple([-333, 2, 333, 333]), DataValidationFailedExc),
        (tuple([-333, -333, 2, 333]), DataValidationFailedExc),
        (tuple([-333, 2, 333, 2]), DataValidationFailedExc),
        (tuple([-333, 2, 333, 2, 333, 333, -333, 333, 2, 2, 2]), DataValidationFailedExc),
        (tuple([2, 2, 2, 2, -333, 2, 333, 2, 333, 333, -333, 333, 2, 2, 2]), DataValidationFailedExc),
        (tuple([5, 6, 7]), DataValidationFailedExc),
        (tuple([7, 6, 5]), [7, 6, 5]),
        (tuple([6, 5]), [6, 5]),
        (tuple([5, 6]), [5, 6]),
        (tuple([6, 7]), [6, 7]),
        (tuple([5]), [5]),
        (tuple([6]), [6]),
        (tuple([7]), [7]),
        (tuple([5, 6, 7, 5]), [5, 6, 7, 5]),
        (tuple([5, 6, 6, 7]), [5, 6, 6, 7]),
        (tuple([5, 6, 6, 7, 6, 7, 5, 6, 7, 5, 5, 5, 5]), [5, 6, 6, 7, 6, 7, 5, 6, 7, 5, 5, 5, 5]),
        (tuple([-333, 1, 2, 333]), DataValidationFailedExc),
        (tuple([-333, 5, 1, 333]), DataValidationFailedExc),
        (tuple([-333, 1, 333, 6]), DataValidationFailedExc),
        (tuple([7, -333, 1, 333]), DataValidationFailedExc),
        (tuple([-333, -1, 333]), DataValidationFailedExc),
        (tuple([333, -1, -333]), DataValidationFailedExc),
        (set(), DataValidationFailedExc),
        (frozenset(), DataValidationFailedExc),
        ([-333, "1", 333], DataValidationFailedExc),
        ([-333, 1.0, 333], DataValidationFailedExc),
        ([-333, None, 333], DataValidationFailedExc),
        ([-333, theoretical_testutils.EmptyObject(), 333], DataValidationFailedExc),
        ([5, "6", 7], InputDataTypeNotInAllowlistExc),
        ([5, 6.0, 7], InputDataTypeNotInAllowlistExc),
        ([5, None, 7], InputDataTypeNotInAllowlistExc),
        ([5, theoretical_testutils.EmptyObject(), 7], InputDataTypeNotInAllowlistExc),
        (["5", 6, 7], InputDataTypeNotInAllowlistExc),
        ([5.0, 6, 7], InputDataTypeNotInAllowlistExc),
        ([None, 6, 7], InputDataTypeNotInAllowlistExc),
        ([theoretical_testutils.EmptyObject(), 6, 7], InputDataTypeNotInAllowlistExc),
        (dict(), InputDataTypeNotInAllowlistExc),
        ("", InputDataTypeNotInAllowlistExc),
        ("333", InputDataTypeNotInAllowlistExc),
        (b"", InputDataTypeNotInAllowlistExc),
        (b"333", InputDataTypeNotInAllowlistExc),
        (333, InputDataTypeNotInAllowlistExc),
        (333.5, InputDataTypeNotInAllowlistExc),
        (True, InputDataTypeNotInAllowlistExc),
        (None, InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_address("127.0.0.1"), InputDataTypeNotInAllowlistExc),
        (ipaddress.ip_network("8.8.8.0/24"), InputDataTypeNotInAllowlistExc),
        (list, InputDataTypeNotInAllowlistExc),
        (int, InputDataTypeNotInAllowlistExc),
        (object(), InputDataTypeNotInAllowlistExc),
        (theoretical_testutils.EmptyObject(), InputDataTypeNotInAllowlistExc),
    )),
    (GenericBlueprint(
        validators=(BlocklistValidator(blocklist=[  
            True,
            b'hello world',
            "řeřicha\x00\r\n",
            datetime.datetime(2021, 1, 1, 8, 50, 51, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")),
            456,
            float("inf"),
            [1, "test", 2, "string 🤍"],
            {8: "hello", 4: "world"},
            ipaddress.ip_address("2a01::"),
            ipaddress.ip_network("127.127.0.0/24"),
            urllib.parse.urlparse("https://www.example.com/listtest?key=value#frag"),
            uuid.UUID('{12345678-1234-5678-1234-56781234abcd}'),
            str,
            object,
            theoretical_testutils.EmptyObject()
        ]),)
    ), (
        (True, DataValidationFailedExc),
        (False, False),
        (None, None),
        (b'hello world', DataValidationFailedExc),
        (b'Hello world', b'Hello world'),
        (b'hello World', b'hello World'),
        (b'Hello World', b'Hello World'),
        (b'HELLO WORLD', b'HELLO WORLD'),
        (b'hello world ', b'hello world '),
        (b'hello world\n', b'hello world\n'),
        (b'hello world\x00', b'hello world\x00'),
        (b'hello', b'hello'),
        (b'world', b'world'),
        (b'', b''),
        ("řeřicha\x00\r\n", DataValidationFailedExc),
        ("Řeřicha\x00\r\n", "Řeřicha\x00\r\n"),
        ("ŘEŘICHA\x00\r\n", "ŘEŘICHA\x00\r\n"),
        ("řeřicha\x00\r", "řeřicha\x00\r"),
        ("řeřicha\x00\n", "řeřicha\x00\n"),
        ("řeřicha\x00\n\r", "řeřicha\x00\n\r"),
        ("řeřicha\x00", "řeřicha\x00"),
        ("řeřicha\r\n", "řeřicha\r\n"),
        ("řeřicha\n", "řeřicha\n"),
        ("řeřicha\r", "řeřicha\r"),
        ("řeřicha\n\r", "řeřicha\n\r"),
        ("řeřicha", "řeřicha"),
        ("Řeřicha", "Řeřicha"),
        ("ŘEŘICHA", "ŘEŘICHA"),
        ("", ""),
        (" ", " "),
        ("\r\n", "\r\n"),
        ("\x00", "\x00"),
        ("\x00\x00", "\x00\x00"),
        ("hello", "hello"),
        ("test", "test"),
        (datetime.datetime(2021, 1, 1, 8, 50, 51, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), DataValidationFailedExc),
        (datetime.datetime(2021, 1, 1, 8, 50, 51, tzinfo=zoneinfo.ZoneInfo("America/New_York")), datetime.datetime(2021, 1, 1, 8, 50, 51, tzinfo=zoneinfo.ZoneInfo("America/New_York"))),
        (datetime.datetime(2021, 1, 1, 8, 50, 51, tzinfo=datetime.timezone.utc), datetime.datetime(2021, 1, 1, 8, 50, 51, tzinfo=datetime.timezone.utc)),
        (datetime.datetime(2021, 1, 1, 8, 50, 51), datetime.datetime(2021, 1, 1, 8, 50, 51)),
        (datetime.datetime(2021, 1, 1, 8, 50, 50, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), datetime.datetime(2021, 1, 1, 8, 50, 50, tzinfo=zoneinfo.ZoneInfo("Europe/Prague"))),
        (datetime.datetime(2021, 1, 1, 8, 50, 52, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), datetime.datetime(2021, 1, 1, 8, 50, 52, tzinfo=zoneinfo.ZoneInfo("Europe/Prague"))),
        (datetime.datetime(2021, 1, 1, 8, 50, 51, 1, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), datetime.datetime(2021, 1, 1, 8, 50, 51, 1, tzinfo=zoneinfo.ZoneInfo("Europe/Prague"))),
        (datetime.datetime(2021, 1, 1, 8, 50, 51, 999999, tzinfo=zoneinfo.ZoneInfo("Europe/Prague")), datetime.datetime(2021, 1, 1, 8, 50, 51, 999999, tzinfo=zoneinfo.ZoneInfo("Europe/Prague"))),
        (456, DataValidationFailedExc),
        (456.0, DataValidationFailedExc),  # 456 == 456.0
        (456.1, 456.1),
        (455, 455),
        (457, 457),
        (-456, -456),
        (-456.0, -456.0),
        (0, 0),
        (0.0, 0.0),
        (float("inf"), DataValidationFailedExc),
        (float("-inf"), float("-inf")),
        (1e100, 1e100),
        (-1e100, -1e100),
        ([1, "test", 2, "string 🤍"], DataValidationFailedExc),
        ([2, "test", 2, "string 🤍"], [2, "test", 2, "string 🤍"]),
        ([-1, "test", 2, "string 🤍"], [-1, "test", 2, "string 🤍"]),
        ([0, "test", 2, "string 🤍"], [0, "test", 2, "string 🤍"]),
        ([1, "test ", 2, "string 🤍"], [1, "test ", 2, "string 🤍"]),
        ([1, "test\x00", 2, "string 🤍"], [1, "test\x00", 2, "string 🤍"]),
        ([1, "hello world", 2, "string 🤍"], [1, "hello world", 2, "string 🤍"]),
        ([1, "test", 3, "string 🤍"], [1, "test", 3, "string 🤍"]),
        ([1, "test", -2, "string 🤍"], [1, "test", -2, "string 🤍"]),
        ([1, "test", 1, "string 🤍"], [1, "test", 1, "string 🤍"]),
        ([1, "test", 0, "string 🤍"], [1, "test", 0, "string 🤍"]),
        ([1, "test", 2, "string🤍"], [1, "test", 2, "string🤍"]),
        ([1, "test", 2, "String 🤍"], [1, "test", 2, "String 🤍"]),
        ([1, "test", 2, "STRING 🤍"], [1, "test", 2, "STRING 🤍"]),
        ([1, "test", 2, "string\t🤍"], [1, "test", 2, "string\t🤍"]),
        ([1, "test", 2, "string 🤍 "], [1, "test", 2, "string 🤍 "]),
        ([1, "test", 2, "string 🤍\x00"], [1, "test", 2, "string 🤍\x00"]),
        ([1, "test", 2, "string 🤍 something"], [1, "test", 2, "string 🤍 something"]),
        ([1, "test", 2, "hello world"], [1, "test", 2, "hello world"]),
        (["x", 1, "test", 2, "string 🤍"], ["x", 1, "test", 2, "string 🤍"]),
        ([1, "test", "x", 2, "string 🤍"], [1, "test", "x", 2, "string 🤍"]),
        ([1, "test", 2, "string 🤍", 3], [1, "test", 2, "string 🤍", 3]),
        ([1, "test", 2, "string 🤍", 3, 4, 5, 6, 7, 8, 9], [1, "test", 2, "string 🤍", 3, 4, 5, 6, 7, 8, 9]),
        (["test", 2, "string 🤍"], ["test", 2, "string 🤍"]),
        ([1, 2, "string 🤍"], [1, 2, "string 🤍"]),
        ([1, "test", 2], [1, "test", 2]),
        ([1], [1]),
        (["test"], ["test"]),
        ([2], [2]),
        (["string 🤍"], ["string 🤍"]),
        (["string 🤍", 2, "test", 1], ["string 🤍", 2, "test", 1]),
        ([1, "test", "string 🤍", 2], [1, "test", "string 🤍", 2]),
        (["test", 1, 2, "string 🤍"], ["test", 1, 2, "string 🤍"]),
        ([2, "test", 1, "string 🤍"], [2, "test", 1, "string 🤍"]),
        ([], []),
        ([None], [None]),
        ([None, True, False], [None, True, False]),
        ({8: "hello", 4: "world"}, DataValidationFailedExc),
        ({4: "world", 8: "hello"}, DataValidationFailedExc),
        ({8: "hello ", 4: "world"}, {8: "hello ", 4: "world"}),
        ({8: "hello\x00", 4: "world"}, {8: "hello\x00", 4: "world"}),
        ({8: "hello!", 4: "world"}, {8: "hello!", 4: "world"}),
        ({8: "hello", 4: "world "}, {8: "hello", 4: "world "}),
        ({8: "hello", 4: "world\x00"}, {8: "hello", 4: "world\x00"}),
        ({8: "hello", 4: "world!"}, {8: "hello", 4: "world!"}),
        ({8: "hello", 4: "World"}, {8: "hello", 4: "World"}),
        ({8: "hello", 4: "WORLD"}, {8: "hello", 4: "WORLD"}),
        ({1: "x", 8: "hello", 4: "world"}, {1: "x", 8: "hello", 4: "world"}),
        ({8: "hello", 1: "x", 4: "world"}, {8: "hello", 1: "x", 4: "world"}),
        ({8: "hello", 4: "world", 1: "x"}, {8: "hello", 4: "world", 1: "x"}),
        ({8: "hello", 4: "world", 1: "x", 2: "y", 3: "z"}, {8: "hello", 4: "world", 1: "x", 2: "y", 3: "z"}),
        ({8: "hello"}, {8: "hello"}),
        ({4: "world"}, {4: "world"}),
        (dict(), dict()),
        ({None: "hello"}, {None: "hello"}),
        ({None: "hello", True: "world"}, {None: "hello", True: "world"}),
        ({None: "hello", True: "world", False: "test"}, {None: "hello", True: "world", False: "test"}),
        (ipaddress.ip_address("2a01::"), DataValidationFailedExc),
        (ipaddress.ip_address("2a01:0000:0000:0000:0000:0000:0000:0000"), DataValidationFailedExc),
        (ipaddress.ip_address("2a01::1"), ipaddress.ip_address("2a01::1")),
        (ipaddress.ip_address("2a01:0000:0000:0000:0000:0000:0000:0001"), ipaddress.ip_address("2a01::1")),
        (ipaddress.ip_address("2a01::ffff"), ipaddress.ip_address("2a01::ffff")),
        (ipaddress.ip_address("2a01:0000:0000:0000:0000:0000:0000:ffff"), ipaddress.ip_address("2a01::ffff")),
        (ipaddress.ip_address("2a02::"), ipaddress.ip_address("2a02::")),
        (ipaddress.ip_address("2a02:0000:0000:0000:0000:0000:0000:0000"), ipaddress.ip_address("2a02::")),
        (ipaddress.ip_address("127.0.0.1"), ipaddress.ip_address("127.0.0.1")),
        (ipaddress.ip_address("8.8.8.8"), ipaddress.ip_address("8.8.8.8")),
        (ipaddress.ip_address("0.0.0.0"), ipaddress.ip_address("0.0.0.0")),
        (ipaddress.ip_network("127.127.0.0/24"), DataValidationFailedExc),
        (ipaddress.ip_network("127.127.0.0/23"), ipaddress.ip_network("127.127.0.0/23")),
        (ipaddress.ip_network("127.127.0.0/25"), ipaddress.ip_network("127.127.0.0/25")),
        (ipaddress.ip_network("127.127.0.0/32"), ipaddress.ip_network("127.127.0.0/32")),
        (ipaddress.ip_network("127.127.1.0/24"), ipaddress.ip_network("127.127.1.0/24")),
        (ipaddress.ip_network("127.127.255.0/24"), ipaddress.ip_network("127.127.255.0/24")),
        (ipaddress.ip_network("128.127.0.0/24"), ipaddress.ip_network("128.127.0.0/24")),
        (ipaddress.ip_network("0.0.0.0/24"), ipaddress.ip_network("0.0.0.0/24")),
        (ipaddress.ip_network("0.0.0.0/0"), ipaddress.ip_network("0.0.0.0/0")),
        (ipaddress.ip_network("0.0.0.0/32"), ipaddress.ip_network("0.0.0.0/32")),
        (ipaddress.ip_network("::/0"), ipaddress.ip_network("::/0")),
        (ipaddress.ip_network("::1/128"), ipaddress.ip_network("::1/128")),
        (ipaddress.ip_network("2001:db8::/32"), ipaddress.ip_network("2001:db8::/32")),
        (ipaddress.ip_network("2001:db8::/64"), ipaddress.ip_network("2001:db8::/64")),
        (ipaddress.ip_network("2001::/24"), ipaddress.ip_network("2001::/24")),
        (ipaddress.ip_network("fe80::/10"), ipaddress.ip_network("fe80::/10")),
        (urllib.parse.urlparse("https://www.example.com/listtest?key=value#frag"), DataValidationFailedExc),
        (urllib.parse.urlparse("https://www.example.com/listtest?key=value#frag1"), urllib.parse.urlparse("https://www.example.com/listtest?key=value#frag1")),
        (urllib.parse.urlparse("https://www.example.com/listtest1?key=value#frag"), urllib.parse.urlparse("https://www.example.com/listtest1?key=value#frag")),
        (urllib.parse.urlparse("https://www.example.com/test?key=value#frag"), urllib.parse.urlparse("https://www.example.com/test?key=value#frag")),
        (urllib.parse.urlparse("https://www.example.com/listtest?key=value&key2=value2#frag"), urllib.parse.urlparse("https://www.example.com/listtest?key=value&key2=value2#frag")),
        (urllib.parse.urlparse("https://www.example.cz/listtest?key=value#frag"), urllib.parse.urlparse("https://www.example.cz/listtest?key=value#frag")),
        (urllib.parse.urlparse("ftp://www.example.com/listtest?key=value#frag"), urllib.parse.urlparse("ftp://www.example.com/listtest?key=value#frag")),
        (urllib.parse.urlparse(""), urllib.parse.urlparse("")),
        (urllib.parse.urlparse(b"https://www.example.com/listtest?key=value#frag"), urllib.parse.urlparse(b"https://www.example.com/listtest?key=value#frag")),
        (uuid.UUID('{12345678-1234-5678-1234-56781234abcd}'), DataValidationFailedExc),
        (uuid.UUID('12345678-1234-5678-1234-56781234abcd'), DataValidationFailedExc),
        (uuid.UUID('1234567812345678123456781234abcd'), DataValidationFailedExc),
        (uuid.UUID('{12345678-1234-5678-1234-56781234abcf}'), uuid.UUID('{12345678-1234-5678-1234-56781234abcf}')),
        (uuid.UUID('{22345678-1234-5678-1234-56781234abcd}'), uuid.UUID('{22345678-1234-5678-1234-56781234abcd}')),
        (uuid.UUID('{12345678-1234-1234-1234-56781234abcd}'), uuid.UUID('{12345678-1234-1234-1234-56781234abcd}')),
        (uuid.UUID('12345678-1234-5678-1234-56781234abcf'), uuid.UUID('{12345678-1234-5678-1234-56781234abcf}')),
        (uuid.UUID('22345678-1234-5678-1234-56781234abcd'), uuid.UUID('{22345678-1234-5678-1234-56781234abcd}')),
        (uuid.UUID('12345678-1234-1234-1234-56781234abcd'), uuid.UUID('{12345678-1234-1234-1234-56781234abcd}')),
        (uuid.UUID('1234567812345678123456781234abcf'), uuid.UUID('{12345678-1234-5678-1234-56781234abcf}')),
        (uuid.UUID('2234567812345678123456781234abcd'), uuid.UUID('{22345678-1234-5678-1234-56781234abcd}')),
        (uuid.UUID('1234567812341234123456781234abcd'), uuid.UUID('{12345678-1234-1234-1234-56781234abcd}')),
        (str, DataValidationFailedExc),
        (object, DataValidationFailedExc),
        (int, int),
        (complex, complex),
        (list, list),
        (frozenset, frozenset),
        (type(None), type(None)),
        (ipaddress.IPv4Network, ipaddress.IPv4Network),
        (ipaddress.IPv6Address, ipaddress.IPv6Address),
        (datetime.datetime, datetime.datetime),
        (uuid.UUID, uuid.UUID),
        (urllib.parse.ParseResult, urllib.parse.ParseResult),
        (theoretical_testutils.EmptyObject, theoretical_testutils.EmptyObject),
        (zoneinfo.ZoneInfo("Europe/Prague"), zoneinfo.ZoneInfo("Europe/Prague")),
        (zoneinfo.ZoneInfo("America/New_York"), zoneinfo.ZoneInfo("America/New_York")),
        (datetime.timezone.utc, datetime.timezone.utc),
        (1+5j, 1+5j),
        (set(), set()),
        (frozenset(), frozenset()),
        (tuple(), tuple()),
        (list(), list()),
        (theoretical_testutils.EmptyObject(), DataValidationFailedExc),
    )),
)


@pytest.mark.parametrize(("blueprint", "input_", "output"), theoretical_testutils.test_function_parameter_generator(__BLOCKLIST_VALIDATOR_TEST_SUITE))
def test_blocklist_validator(blueprint, input_, output):
    theoretical_testutils.perform_test(blueprint, input_, output)


@pytest.mark.parametrize("blist", (tuple(), []))
def test_blocklist_validator_empty_blocklist(blist):
    with pytest.raises(InvalidValidatorConfigError):
        BlocklistValidator(blocklist=blist)


@pytest.mark.parametrize("blist", (
        ("",),
        ("", "abc"),
        ("", "abc", "řeřicha"),
        ("", "abc", "řeřicha", "\r\n"),
        ("", "abc", "řeřicha", "\r\n", "\x00"),
        ("", "abc", "řeřicha", "\r\n", "\x00", "🤍"),
))
def test_blocklist_validator_blocklist(blist):
    assert BlocklistValidator(blocklist=blist).get_blocklist() == blist
